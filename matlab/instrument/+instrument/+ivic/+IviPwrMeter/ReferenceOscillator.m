classdef ReferenceOscillator < instrument.ivic.IviGroupBase
    %REFERENCEOSCILLATOR Reference Oscillator
    
    % Copyright 2010 The MathWorks, Inc.
    
    %% Public Properties
    properties
        %REF_OSCILLATOR_ENABLED_RO Specifies if the internal
        %reference oscillator is enabled.
        Ref_Oscillator_Enabled_RO
        
        %REF_OSCILLATOR_FREQUENCY_RO Specifies the frequency of the
        %signal generated by the reference oscillator in Hertz. This
        %attribute affects the behavior of the instrument only if
        %the IVIPWRMETER_ATTR_REF_OSCILLATOR_ENABLED RO attribute is
        %set to TRUE.
        Ref_Oscillator_Frequency_RO
        
        %REF_OSCILLATOR_LEVEL_RO Specifies the power level of the
        %signal generated by the reference oscillator in dBm. This
        %attribute affects the behavior of the instrument only if
        %the IVIPWRMETER_ATTR_REF_OSCILLATOR_ENABLED RO attribute is
        %set to TRUE.
        Ref_Oscillator_Level_RO
    end
    
    %% Property access methods
    methods
        %% Ref_Oscillator_Enabled_RO property access methods
        function value = get.Ref_Oscillator_Enabled_RO(obj)
            attributAccessors = instrument.ivic.IviPwrMeter.Configuration.SetGetCheckAttribute.GetAttribute();
            [libName, session] = obj.getLibraryAndSession();
            attributAccessors.setLibraryAndSession(libName,session);
            value = attributAccessors.GetAttributeViBoolean( obj.RepCapIdentifier ,1250501);
        end
        function set.Ref_Oscillator_Enabled_RO(obj,newValue)
            attributAccessors = instrument.ivic.IviPwrMeter.Configuration.SetGetCheckAttribute.SetAttribute();
            [libName, session] = obj.getLibraryAndSession();
            attributAccessors.setLibraryAndSession(libName, session);
            import instrument.ivic.IviPwrMeter.ReferenceOscillator.*;
            Boolean_values.checkEnumValue(newValue );
            attributAccessors.SetAttributeViBoolean( obj.RepCapIdentifier ,1250501, newValue);
        end
        
        %% Ref_Oscillator_Frequency_RO property access methods
        function value = get.Ref_Oscillator_Frequency_RO(obj)
            attributAccessors = instrument.ivic.IviPwrMeter.Configuration.SetGetCheckAttribute.GetAttribute();
            [libName, session] = obj.getLibraryAndSession();
            attributAccessors.setLibraryAndSession(libName,session);
            value = attributAccessors.GetAttributeViReal64( obj.RepCapIdentifier ,1250502);
        end
        function set.Ref_Oscillator_Frequency_RO(obj,newValue)
            attributAccessors = instrument.ivic.IviPwrMeter.Configuration.SetGetCheckAttribute.SetAttribute();
            [libName, session] = obj.getLibraryAndSession();
            attributAccessors.setLibraryAndSession(libName, session);
            newValue = obj.checkScalarDoubleArg(newValue);
            attributAccessors.SetAttributeViReal64( obj.RepCapIdentifier ,1250502, newValue);
        end
        
        %% Ref_Oscillator_Level_RO property access methods
        function value = get.Ref_Oscillator_Level_RO(obj)
            attributAccessors = instrument.ivic.IviPwrMeter.Configuration.SetGetCheckAttribute.GetAttribute();
            [libName, session] = obj.getLibraryAndSession();
            attributAccessors.setLibraryAndSession(libName,session);
            value = attributAccessors.GetAttributeViReal64( obj.RepCapIdentifier ,1250503);
        end
        function set.Ref_Oscillator_Level_RO(obj,newValue)
            attributAccessors = instrument.ivic.IviPwrMeter.Configuration.SetGetCheckAttribute.SetAttribute();
            [libName, session] = obj.getLibraryAndSession();
            attributAccessors.setLibraryAndSession(libName, session);
            newValue = obj.checkScalarDoubleArg(newValue);
            attributAccessors.SetAttributeViReal64( obj.RepCapIdentifier ,1250503, newValue);
        end
    end
end
