<?xml version="1.0" encoding="utf-8"?>
<MATLABInstrumentDriver>
   <FileVersion>1.0</FileVersion>
   <DriverName>D:\A\matlab\matlab\toolbox\instrument\instrument\drivers\generic_agilent_33120a.mdd</DriverName>
   <DriverType>MATLAB generic</DriverType>
   <InstrumentType>Function Generator</InstrumentType>
   <InstrumentManufacturer>Agilent</InstrumentManufacturer>
   <InstrumentModel>33120A</InstrumentModel>
   <InstrumentVersion>1.0</InstrumentVersion>
   <Identify>*IDN?</Identify>
   <Reset>*RST</Reset>
   <Selftest>*TST?</Selftest>
   <Error>System:Error?</Error>
   <CreateInitCode>
      <Code>function init(obj)

% This method is called after the object is created.
% OBJ is the device object.
% End of function definition - DO NOT EDIT
    % Extract the interface object.
 
% initializes driverData
driverData = get(obj, 'DriverData');

% checks to see if driver has been called on before, if it has then it 
% loads data that would normaly be saved if machine was turned off
try
   load('generic_agilent_33120a_initialData')
catch
    % if driver has never been called before it sets all data to default
    % settings
    driverData.amplitude = 0.1;
    driverData.offset = 0;
    driverData.units = 'vpp';
    driverData.catalog = {'"SINC"','"NEG_RAMP"','"EXP_RISE"','"EXP_FALL"','"CARDIAC"'};
    driverData.dutycycle = 50;
    driverData.dutycyclesquare = 50;
    driverData.frequency = 1000;
    driverData.outputload = 50;
    driverData.outputsync = 'on';
    driverData.triggerslope = 'positive';
    driverData.triggersource = 'immediate';
    driverData.waveform = 'sin';
    driverData.error = {};
    driverData.holdplace = 1;
    driverData.enabled = {'off','off','off','off','off'};
    driverData.waveformMax = 15000000;
    driverData.unitfactor = 1;
    driverData.points = {8.19200E+03,9.00000E+00,4.09600E+03,4.09600E+03,1.02400E+03};

    driverData.amplitudemod.depth = 100;
    driverData.amplitudemod.enabled = 'off';
    driverData.amplitudemod.internalfrequencey = 100;
    driverData.amplitudemod.internalwaveform = 'sin';
    driverData.amplitudemod.source = 'both';

    driverData.arbitrarywaveform.crestfactor = 0;
    driverData.arbitrarywaveform.currentwaveformname = 'SINC';
    driverData.arbitrarywaveform.gain =  0.1;
    driverData.arbitrarywaveform.maxnumberwaveform = 9;
    driverData.arbitrarywaveform.offset =  0;
    driverData.arbitrarywaveform.waveformlengthmax = 16000;
    driverData.arbitrarywaveform.waveformlengthmin =  8;
    driverData.arbitrarywaveform.numbercreated = 5;

    driverData.burstmod.cycles = 1;
    driverData.burstmod.enabled = 'off';
    driverData.burstmod.internalrate = 100;
    driverData.burstmod.phase = 0;
    driverData.burstmod.source = 'internal';

    driverData.calibration.count = 0;
    driverData.calibration.state = 'on';
    driverData.calibration.message = '';
    driverData.calibration.setup = 0;
    driverData.calibration.code = 'HP033120';

    driverData.display.enabled = 'on';
    driverData.display.settext = '';

    driverData.frequencymod.enabled = 'off';
    driverData.frequencymod.internaldeviation = 100;
    driverData.frequencymod.internalfrequenvy = 10;
    driverData.frequencymod.internalwaveform = 'sin';

    driverData.frequencysweep.enabled = 'off';
    driverData.frequencysweep.spacing = 'linear';
    driverData.frequencysweep.start = 100;
    driverData.frequencysweep.stop = 1000;
    driverData.frequencysweep.time = 1;

    driverData.fskmod.enabled = 'off';
    driverData.fskmod.frequency = 100;
    driverData.fskmod.internalrate = 10;
    driverData.fskmod.source = 'internal';

    driverData.system.byteorder = 'normal';
    driverData.system.version = 1993;
    
    % saves the initial data
    save('generic_agilent_33120a_initialData', 'driverData')
end
test = get(obj, 'DriverData');
set(obj, 'DriverData', driverData);

</Code>
   </CreateInitCode>
   <ConnectInitCode>
      <Type>MCode</Type>
      <Code>function init(obj) 
% This function is called after the object is connected.
% OBJ is the device object.
% End of function definition - DO NOT EDIT
 
driverData = get(obj, 'DriverData');
driverData.connect = true;
set(obj, 'DriverData', driverData);
</Code>
   </ConnectInitCode>
   <CleanupCode>
      <Type>MCode</Type>
      <Code>function cleanup(obj)
% This function is called before the object is disconnected.
% OBJ is the device object.
% End of function definition - DO NOT EDIT
 
driverData = get(obj, 'DriverData');

% resets data and saves the data that should be retained after driver is 
% disconnected
try 
    invoke(obj,'reset')
    driverData = get(obj, 'DriverData');
    save('generic_agilent_33120a_initialData', 'driverData')
catch
end
driverData.disconnect = true;
set(obj, 'DriverData', driverData);

</Code>
   </CleanupCode>
   <GroupInfo>
      <Group>
         <Name>parent</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="parent1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Amplitude</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(obj, 'DriverData');
propertyValue = driverData.amplitude * driverData.unitfactor;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(obj, 'DriverData');

% converts the amplitude to vpp
if(~ischar(propertyValue))
propertyValue = propertyValue / driverData.unitfactor;
end

% finds the maximum and minimum amplitude with respect to the output load
if(driverData.outputload == 50)
    max = 10;
    min = .05;
elseif(driverData.outputload == 9.9E37)
    max = 20;
    min = 0.1;
end

% checks to see if the user typed in a string value and then sets the 
% appropriate propertyValue
if(strcmpi(propertyValue,'min'))
    propertyValue = min;
elseif(strcmpi(propertyValue,'max'))
    propertyValue = max;
end

driverData.amplitude = propertyValue;
set(obj, 'DriverData', driverData);


</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="20.0" Min="0.1"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="max" Value="max"/>
                     <Enum Name="min" Value="min"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.100</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the output amplitude for the currently active function.  MIN selects the smallest amplitude allowed for the selected function (50 mVpp into 50 ohms) MAX Selects the largest amplitude allowed (10 Vpp into 50 ohms).  The default amplitude is 100 mVpp(into 50 ohms).  For arbitrary waveforms, the maximum amplitude will be limited if the data do not span the full range of the output DAC (Digital-to-Analog Converter). For example, the built-in "SINC" does not use the full range of value between PLUS OR MINUS 1 and therefore its maximum amplitude is 6.084 (into 50 ohms).  For dc volts, the output level is actually controlled by setting the offset voltage. You can set the dc voltage to any value between PLUS OR MINUS 5 Vdc into 50 ohms or PLUS OR MINUS 10 Vdc into an open circuit.</Description>
            </Property>
            <Property>
               <Name>AmplitudeOffset</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName) 
% Return a property value. 
%   This function is called to return the device or group object property 
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object. 

driverData = get(obj, 'DriverData');
propertyValue = driverData.offset;
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue) 
% Set a property value. 
%   This function is called to set the device or group object property 
%   value. If the property is a group property, OBJ is the group object. If 
%   the property is a base device property, OBJ is the device object.  

driverData = get(obj, 'DriverData');

% get the OutputLoad 
load = driverData.outputload; 

% returns an error if the propertyValue is not within in a proper range in 
% relationship to the output load. Also finds the apropriate maximum and 
% minimum amplitude offset value with respect to the ouput load
switch load
    case 50
        max = .2;
        min = -.2;
        if ~ischar(propertyValue)
            if (propertyValue &gt; .2) || (propertyValue &lt; -.2)
                error(['For the current OutputLoad setting, accepted ',...
                    'values for AmplitudeOffset are ''min'',''max'', ',...
                    'or a value from -.2 to .2']);
            end
        end
    case 9.9e37
        max = .4;
        min = -.4;
        if ~ischar(propertyValue)
            if (propertyValue &gt; .4) || (propertyValue &lt; -.4)
                error(['For the current OutputLoad setting, accepted ',...
                    'values for AmplitudeOffset are ''min'',''max'', ',...
                    'or a value from -.4 to .4']);
            end
        end
        otherwise
            error(['Unexpected value for OutputLoad. Expected ',...
                '50 or 9.9e37']);
end 

% checks to see if the user typed in a string value and then sets the 
% appropriate propertyValue
if(strcmpi(propertyValue,'min'))
    propertyValue = min;
elseif(strcmpi(propertyValue,'max'))
    propertyValue = max;
end


driverData.offset = propertyValue;
set(obj, 'DriverData', driverData);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="0.4" Min="-0.4"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="min"/>
                     <Enum Name="max" Value="max"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>-0.2</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>set the amplitude offset for the currently active function. </Description>
            </Property>
            <Property>
               <Name>AmplitudeUnits</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(obj, 'DriverData');
propertyValue = driverData.units;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(obj, 'DriverData');

% finds the appropriate  number that can be used to convert the amplitude 
% to the units specified by the user 
if(strcmpi(propertyValue,'vpp'))
    driverData.unitfactor = 1;   
elseif(strcmpi(propertyValue,'vrms'))
    driverData.unitfactor = .288868;
elseif(strcmpi(propertyValue,'dbm'))
    driverData.unitfactor = 2.2185;
elseif(strcmpi(propertyValue,'default')) 
    driverData.unitfactor = 1;
    propertyValue = 'vpp';
end

driverData.units = propertyValue;
set(obj, 'DriverData', driverData);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="vpp" Value="vpp"/>
                     <Enum Name="vrms" Value="vrms"/>
                     <Enum Name="dbm" Value="dbm"/>
                     <Enum Name="default" Value="default"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>VPP</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select the output unit from amplitude only.</Description>
            </Property>
            <Property>
               <Name>Catalog</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(obj, 'DriverData');

% prints out the catalog 
l = length(driverData.catalog);
str = sprintf('%s',driverData.catalog{1});
for i = 2: l 
pri = sprintf(',%s',driverData.catalog{i});
str = cat(2,str,pri);
end
propertyValue = str;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>List the names of all waveforms currently downloaded to memory.</Description>
            </Property>
            <Property>
               <Name>Dutycycle</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(obj, 'DriverData');

% figures out the dutycyle depending on the active waveform
if(strcmpi('square',driverData.waveform))
    propertyValue = driverData.dutycyclesquare;
else
    propertyValue  = driverData.dutycycle;
end</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

beep on 

driverData = get(obj, 'DriverData');

% returns an error if the propertyValue is not within in a proper range in 
% relationship to frequency. Also finds the apropriate maximum and 
% minimum dutycycle with respect to the frequency
frequency = driverData.frequency;
if(frequency &lt;= 5000000)
    max = 80;
    min = 20;
    if ~ischar(propertyValue)
        if (propertyValue &gt; max) || (propertyValue &lt; min)
            error(['For the current Frequency setting, accepted ',...
                'values for Dutycycle are ''min'',''max'', ',...
                'or a value from 20 to 80']);
        end
    end
elseif(frequency &gt; 5000000)
    max = 40;
    min = 60;
    if ~ischar(propertyValue)
        if (propertyValue &gt; max) || (propertyValue &lt; min)
            error(['For the current Frequency setting, accepted ',...
                'values for Dutycycle are ''min'',''max'', ',...
                'or a value from 40 to 60']);
        end
    end
else
    error(['Unexpected value for Frequency. Expected ',...
        'a value between 1.0E-4 and 1.5E7']);
end

% checks to see if the user typed in a string value and then sets the 
% appropriate propertyValue
if(strcmpi(propertyValue,'min'))
    propertyValue = min;
elseif(strcmpi(propertyValue,'max'))
    propertyValue = max;
end

% if the waveform is a square it stores the dutycycle some where seperate 
% so it can not be over written when the waveform changes
if(strcmpi('square',driverData.waveform))
    driverData.dutycyclesquare = propertyValue;
else
    driverData.dutycycle = propertyValue;
end

set(obj, 'DriverData', driverData);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="min"/>
                     <Enum Name="max" Value="max"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="80.0" Min="20.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>50</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the duty cycle in percent for square waves only.  Duty cycle represents the amount of time per cycle that the square wave is high.  The duty cycle is remembered when you change from square wave to another function. When you return the square wave function, the previous duty cycle is used. The APPly command automatically sets the duty cycle to 50% for square waves.  The duty cycle is automatically adjusted if you select a frequency that is not valid with the percent duty cycle. For example if you set the duty cycle to 70% and then change the frequency to 8MHz, the function generator will automatically adjust the duty cycle to 60% (the upper limit for this frequency).</Description>
            </Property>
            <Property>
               <Name>Frequency</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(obj, 'DriverData');
propertyValue = driverData.frequency;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(obj, 'DriverData');

% checks to see if the user typed in a string value and then sets the 
% appropriate propertyValue
if(strcmpi(propertyValue,'min'))
    propertyValue = 1.0E-4;
elseif(strcmpi(propertyValue,'max'))
    propertyValue = driverData.waveformMax;
end

% adjusts the dutycycle with respect to the frequency
if((propertyValue &gt; 5) &amp;&amp; (driverData.dutycycle &gt; 60))
    driverData.dutycycle = 60;
elseif((propertyValue &gt; 5) &amp;&amp; (driverData.dutycycle &lt; 40))
    driverData.dutycycle = 40;
end

driverData.frequency = propertyValue;
set(obj, 'DriverData', driverData);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="1.5E7" Min="1.0E-4"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="min"/>
                     <Enum Name="max" Value="max"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0E-4</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the output frequency.  min selects the lowest frequency allowed for currently active function. max selects the highest frequency allowed for currently active function.  The default frequency is 1 kHz for all functions.  For arbitrary waveforms that you create and download from memory, the maximum frequency depends on the number of points specified in the waveform.  The output frequency is automatically adjusted if you select a function whose maximum frequency is less than that of currently active function. For example, if you output 1 MHz sine wave and then change the function to triangle wave, the function generator will adjust the output to 100 kHz (the upper limit for triangle wave).</Description>
            </Property>
            <Property>
               <Name>OutputLoad</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(obj, 'DriverData');
propertyValue = driverData.outputload;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(obj, 'DriverData');
oldLoad = driverData.outputload; 

% checks to see if the user typed in a string value and then sets the 
% appropriate propertyValue. Also checks to see if the output load effects
% the amplitude and then adjusts it accordingly
if(strcmpi(propertyValue,'min'))
    propertyValue = 50.0;
elseif(strcmpi(propertyValue,'max') || strcmpi(propertyValue,'infinity'))
    if(oldLoad == 50.0)
        if(~ischar(driverData.amplitude))
            driverData.amplitude = driverData.amplitude * 2;
        end
    end
    propertyValue = 9.9E37;
end

driverData.outputload = propertyValue;
set(obj, 'DriverData', driverData);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>50.0</Value>
                     <Value>9.9E37</Value>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="infinity" Value="infinity"/>
                     <Enum Name="min" Value="min"/>
                     <Enum Name="max" Value="max"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>50</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select the output termination for output amplitude and offset voltage.  The function generator has a fixed output impedance of 50 ohms on the OUTPUT terminal. You can specify whether you are terminating the output into a 50 ohms load or an open circuit. Incorrect impedance matching between the function generator and your load will result in an amplitude or offset which does not match the specified signal level.  INF sets the output termination to "high impedance". MIN selects 50 ohms. MAX selects "high impedance". The default is 50 ohms.  The amplitude (or dc offset) is automatically adjusted (and no error is generated) if you change the output termination. For example, if you set the amplitude to 10 Vpp and then change the termination from 50 ohms to "high impedance", the display impedance will double to 20 Vpp. If you change the "high impedance" to 50 ohms, the displayed amplitude will drop in half.  If you specify 50 ohms but are actually terminating into an open circuit, the displayed output will be twice the value specified. For example, if you set the offset to 100 mVdc (and specify a 50 ohms termination) but are actually terminating output into an open circuit, the actual displayed offset will be 200 mVdc.</Description>
            </Property>
            <Property>
               <Name>OutputMode</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function  propertyValue = getProperty(obj, propertyName)
% This function is called to set the group object property value. 
% get interface 

driverData = get(obj, 'DriverData');

% If it is not stantard, it is arbitrary 
shape = driverData.waveform;
if strcmpi(shape, 'USER') == 1    
    propertyValue = 'arbitrary';
else
    propertyValue = 'standard'; 
end</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue) 
% This function is called to set the device object property value.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="arbitrary" Value="aribtrary"/>
                     <Enum Name="standard" Value="standard"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>standard</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>returns if the wave form is a user waveform or standard</Description>
            </Property>
            <Property>
               <Name>OutputSync</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(obj, 'DriverData');
propertyValue = driverData.outputsync;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(obj, 'DriverData');
driverData.outputsync = propertyValue;
set(obj, 'DriverData', driverData);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="on" Value="on"/>
                     <Enum Name="off" Value="off"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Enable or disable output SYNC from the terminal.  The default is "ON".  When the SYNC signal is disabled, the output level on the SYNC terminal is indeterminate (it might be a TTL "high" or a TTL "low").</Description>
            </Property>
            <Property>
               <Name>TriggerSlope</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(obj, 'DriverData');
propertyValue = driverData.triggerslope;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(obj, 'DriverData');
driverData.triggerslope = propertyValue;
set(obj, 'DriverData', driverData);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="positive" Value="positive"/>
                     <Enum Name="negative" Value="negative"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>positive</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select the polarity of the EXT Trig terminal.</Description>
            </Property>
            <Property>
               <Name>TriggerSource</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(obj, 'DriverData');
propertyValue = driverData.triggersource;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(obj, 'DriverData');
driverData.triggersource = propertyValue;
set(obj, 'DriverData', driverData);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="immediate" Value="immediate"/>
                     <Enum Name="external" Value="external"/>
                     <Enum Name="bus" Value="bus"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>immediate</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select the source from which the function generator will accept a trigger.</Description>
            </Property>
            <Property>
               <Name>Waveform</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(obj, 'DriverData');
propertyValue = driverData.waveform;
 </GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

beep on
driverData = get(obj, 'DriverData');

% sets the maximum amplitude based on the waveform
if(strcmpi(propertyValue,'sin') || strcmpi(propertyValue,'square'))
    driverData.waveformMax = 15000000;
elseif(strcmpi(propertyValue,'triangle') || strcmpi(propertyValue,'ramp'))
    driverData.waveformMax = 100000;
else
    driverData.waveformMax = 5000000;
end

% adjusts the frequency if the new waveform conflicts with the current 
% setting
if(driverData.frequency &gt; driverData.waveformMax)
    driverData.frequency = driverData.waveformMax;
    beep
    driverData.error{driverData.holdplace} = ' -221,"Settings conflict; frequency has been adjusted"';
    driverData.holdplace = driverData.holdplace + 1;
end

% sets the dutycycle 
if(strcmpi('square',propertyValue))
    driverData.dutycycle = driverData.dutycyclesquare;
end

driverData.waveform = propertyValue;
set(obj, 'DriverData', driverData);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="sin" Value="sin"/>
                     <Enum Name="square" Value="square"/>
                     <Enum Name="ramp" Value="ramp"/>
                     <Enum Name="noise" Value="noise"/>
                     <Enum Name="DC" Value="DC"/>
                     <Enum Name="user" Value="user"/>
                     <Enum Name="triangle" Value="triangle"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>sin</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select the output function.  The selected waveform is output using the previously selected frequency, amplitude, and dc offset settings. If you select "USER", the function generator outputs the arbitrary waveform currently selected by the FUNC:USER command.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>drivertest</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function varargout = drivertest(obj)
%   AGILENT_33120_MIDTEST01 Code for testing a MATLAB instrument driver.
%
%   This is the machine generated code that tests a MATLAB instrument driver, 
%   
%   The test consists of multiple test steps that can test the MATLAB instrument
%   drivers functions and properties.
%   
%   The test code was generated with the MIDTEST GUI. For more information
%   on MIDTEST, type 'instrhelp midtest' at the MATLAB command prompt.
%   
% 
%   See also ICDEVICE, MIDTEST.
% 
 
%   Creation time: 07-Nov-2005 13:46:16
 

% Wrap entire test in try catch.
try
fprintf('Test: Generic Agilent 33120a Driver Test\n');
fprintf(['Start time: ' datestr(now) '\n']);

% Initialize variables.
varargout              = {};
stepWarningOccurred    = false;
warningOccurred        = false;
errorOccurred          = false;

% Create device object using the driver file
deviceObj = obj;

driverData = get(deviceObj,'DriverData');
securityCode = driverData.calibration.code;
groupObj = get(deviceObj, 'Calibration');
groupObj = groupObj(1);
invoke(groupObj, 'securedevice', securityCode, 'unsecure');

% Test Step 1: All Properties Sweep (Properties Sweep Test Step)
% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Amplitude property in the parent group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Amplitude property.
validValues = {0.1, 6.1, 12.1, 20.0, 'max', 'min'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        set(deviceObj, 'Amplitude', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing AmplitudeOffset property in the parent group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the AmplitudeOffset property.

% For the current OutputLoad setting, accepted values for AmplitudeOffset
% are 'min','max', or a value from -.2 to .2 whereas absolute range is -.4
% to .4
validValues = {-0.2,0.0,'min','max'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        set(deviceObj, 'AmplitudeOffset', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing AmplitudeUnits property in the parent group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the AmplitudeUnits property.
validValues = {'vpp', 'vrms', 'dbm', 'default'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        set(deviceObj, 'AmplitudeUnits', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Catalog property in the parent group.\n');
 
try
    % Query the value for the read-only property, Catalog.
    get(deviceObj, 'Catalog');

    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);

    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while getting the property value.\n');
    fprintf([lasterr,'\n']);
end

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Dutycycle property in the parent group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Dutycycle property.
validValues = {'min', 'max', 20.0, 40.0, 60.0, 80.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        set(deviceObj, 'Dutycycle', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Frequency property in the parent group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Frequency property.
validValues = {1.0E-4, 4999999.0001, 9999998.0001, 1.5E7, 'min', 'max'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        set(deviceObj, 'Frequency', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing InstrumentModel property in the parent group.\n');
 
try
    % Query the value for the read-only property, InstrumentModel.
    get(deviceObj, 'InstrumentModel');

    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);

    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while getting the property value.\n');
    fprintf([lasterr,'\n']);
end

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing OutputLoad property in the parent group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the OutputLoad property.
validValues = {50.0, 9.9E37, 'infinity', 'min', 'max'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        set(deviceObj, 'OutputLoad', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing OutputMode property in the parent group.\n');
 
try
    % Query the value for the read-only property, OutputMode.
    get(deviceObj, 'OutputMode');

    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);

    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while getting the property value.\n');
    fprintf([lasterr,'\n']);
end

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing OutputSync property in the parent group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the OutputSync property.
validValues = {'on', 'off'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        set(deviceObj, 'OutputSync', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing TriggerSlope property in the parent group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the TriggerSlope property.
validValues = {'positive', 'negative'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        set(deviceObj, 'TriggerSlope', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing TriggerSource property in the parent group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the TriggerSource property.
validValues = {'immediate', 'external', 'bus'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        set(deviceObj, 'TriggerSource', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Waveform property in the parent group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Waveform property.
validValues = {'sin', 'square', 'ramp', 'noise', 'DC', 'user', 'triangle'};

% Test all supported values.
for i = 1:length(validValues)
    try
        
        set(deviceObj,'Frequency','min');
        
        % Configure the property.
        set(deviceObj, 'Waveform', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Depth property in the Amplitudemod group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Depth property.
validValues = {0.0, 40.0, 80.0, 120.0, 'min', 'max'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Amplitudemod');
        set(groupObj, 'Depth', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Enabled property in the Amplitudemod group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Enabled property.
validValues = {'on', 'off'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Amplitudemod');
        set(groupObj, 'Enabled', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing InternalFrequency property in the Amplitudemod group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the InternalFrequency property.
validValues = {0.01, 6666.01, 13332.01, 20000.0, 'min', 'max'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Amplitudemod');
        set(groupObj, 'InternalFrequency', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing InternalWaveform property in the Amplitudemod group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the InternalWaveform property.
validValues = {'sin', 'square', 'triangle', 'ramp', 'noise', 'user'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Amplitudemod');
        set(groupObj, 'InternalWaveform', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Source property in the Amplitudemod group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Source property.
validValues = {'both', 'external'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Amplitudemod');
        set(groupObj, 'Source', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing CrestFactor property in the Arbitrarywaveform group.\n');
 
try
    % Query the value for the read-only property, CrestFactor.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    get(groupObj, {'CrestFactor'});

    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);

    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while getting the property value.\n');
    fprintf([lasterr,'\n']);
end

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing CurrentWaveformName property in the Arbitrarywaveform group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the CurrentWaveformName property excluding 'another' option.
validValues ={'SINC','NEG_RAMP','EXP_RISE','EXP_FALL','CARDIAC'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Arbitrarywaveform');
        set(groupObj, 'CurrentWaveformName', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Frequency property in the Arbitrarywaveform group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Frequency property.
validValues = {1.0E-4, 4999999.0001, 9999998.0001, 1.5E7, 'min', 'max'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Arbitrarywaveform');
        set(groupObj, 'Frequency', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Gain property in the Arbitrarywaveform group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Gain property.

% For current OutputLoad settings, valid values are max, min, or  a value
% from .06095 to 12.165 though absolute limits are from .0305 to 12.165
validValues = {4.0305, 8.0305, 12.165, 'min', 'max'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Arbitrarywaveform');
        set(groupObj, 'Gain', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing MaxNumberWaveform property in the Arbitrarywaveform group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the MaxNumberWaveform property.
validValues = {-1000.0, -500.0, 0.0, 500.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Arbitrarywaveform');
        set(groupObj, 'MaxNumberWaveform', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Offset property in the Arbitrarywaveform group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Offset property.
validValues = {-0.2, -0.1, 0.0, 0.2, 'min', 'max'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Arbitrarywaveform');
        set(groupObj, 'Offset', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing WaveformLengthMax property in the Arbitrarywaveform group.\n');
 
try
    % Query the value for the read-only property, WaveformLengthMax.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    get(groupObj, {'WaveformLengthMax'});

    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);

    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while getting the property value.\n');
    fprintf([lasterr,'\n']);
end

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing WaveformLengthMin property in the Arbitrarywaveform group.\n');
 
try
    % Query the value for the read-only property, WaveformLengthMin.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    get(groupObj, {'WaveformLengthMin'});

    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);

    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while getting the property value.\n');
    fprintf([lasterr,'\n']);
end

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Cycles property in the Burstmod group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Cycles property.
validValues = {1.0, 16667.0, 33333.0, 50000.0, 'min', 'max', 'infinity'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Burstmod');
        set(groupObj, 'Cycles', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Enabled property in the Burstmod group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Enabled property.
validValues = {'on', 'off'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Burstmod');
        set(groupObj, 'Enabled', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing InternalRate property in the Burstmod group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the InternalRate property.
validValues = {0.01, 16666.01, 33332.01, 50000.0, 'min', 'max'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Burstmod');
        set(groupObj, 'InternalRate', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Phase property in the Burstmod group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Phase property.
validValues = {-360.0, -120.0, 120.0, 360.0, 'min', 'max'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Burstmod');
        set(groupObj, 'Phase', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Source property in the Burstmod group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Source property.
validValues = {'external', 'internal'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Burstmod');
        set(groupObj, 'Source', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Count property in the Calibration group.\n');
 
try
    % Query the value for the read-only property, Count.
    groupObj = get(deviceObj, 'Calibration');
    get(groupObj, {'Count'});

    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);

    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while getting the property value.\n');
    fprintf([lasterr,'\n']);
end

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Enabled property in the Calibration group.\n');
 
try
    % Query the value for the read-only property, Enabled.
    groupObj = get(deviceObj, 'Calibration');
    get(groupObj, {'Enabled'});

    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);

    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while getting the property value.\n');
    fprintf([lasterr,'\n']);
end

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Message property in the Calibration group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Message property.
validValues = {'on', 'off', 'sydney', 'wayne', 'min', 'max'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Calibration');
        set(groupObj, 'Message', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Setup property in the Calibration group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Setup property.
validValues = {0.0, 28.0, 56.0, 84.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Calibration');
        set(groupObj, 'Setup', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Enabled property in the Display group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Enabled property.
validValues = {'on', 'off'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Display');
        set(groupObj, 'Enabled', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Enabled property in the Frequencymod group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Enabled property.
validValues = {'on', 'off'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Frequencymod');
        set(groupObj, 'Enabled', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing InternalDeviation property in the Frequencymod group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the InternalDeviation property.
validValues = {0.01, 33333.01, 66666.01, 100000.0, 'min', 'max'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Frequencymod');
        set(groupObj, 'InternalDeviation', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing InternalFrequency property in the Frequencymod group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the InternalFrequency property.
validValues = {0.01, 3333.01, 6666.01, 10000.0, 'min', 'max'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Frequencymod');
        set(groupObj, 'InternalFrequency', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing InternalWaveform property in the Frequencymod group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the InternalWaveform property.
validValues = {'sin', 'square', 'triangle', 'ramp', 'noise', 'user'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Frequencymod');
        set(groupObj, 'InternalWaveform', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Enabled property in the Frequencysweep group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Enabled property.
validValues = {'on', 'off'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Frequencysweep');
        set(groupObj, 'Enabled', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Spacing property in the Frequencysweep group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Spacing property.
validValues = {'linear', 'log'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Frequencysweep');
        set(groupObj, 'Spacing', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Start property in the Frequencysweep group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Start property.
validValues = {0.01, 4999999.01, 9999998.01, 1.5E7, 'min', 'max'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Frequencysweep');
        set(groupObj, 'Start', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Stop property in the Frequencysweep group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Stop property.
validValues = {'max', 'min', 0.01, 4999999.01, 9999998.01, 1.5E7};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Frequencysweep');
        set(groupObj, 'Stop', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Time property in the Frequencysweep group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Time property.
validValues = {0.0010, 166.001, 332.001, 500.0, 'min', 'max'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Frequencysweep');
        set(groupObj, 'Time', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Enabled property in the Fskmod group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Enabled property.
validValues = {'on', 'off'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Fskmod');
        set(groupObj, 'Enabled', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Frequency property in the Fskmod group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Frequency property.
validValues = {0.01, 4999999.01, 9999998.01, 1.5E7, 'min', 'max'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Fskmod');
        set(groupObj, 'Frequency', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing InternalRate property in the Fskmod group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the InternalRate property.
validValues = {0.01, 16666.01, 33332.01, 50000.0, 'min', 'max'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Fskmod');
        set(groupObj, 'InternalRate', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Source property in the Fskmod group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Source property.
validValues = {'internal', 'external'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Fskmod');
        set(groupObj, 'Source', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing ByteOrder property in the System group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the ByteOrder property.
validValues = {'normal', 'swapped'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'System');
        set(groupObj, 'ByteOrder', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Version property in the System group.\n');
 
try
    % Query the value for the read-only property, Version.
    groupObj = get(deviceObj, 'System');
    get(groupObj, {'Version'});

    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);

    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while getting the property value.\n');
    fprintf([lasterr,'\n']);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 2: Amplitude - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Amplitude property.
validValues = {0.1, 6.1, 12.1, 20.0, 'max', 'min'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        set(deviceObj, 'Amplitude', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 3: AmplitudeOffset - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the AmplitudeOffset property.
validValues = {-0.4, -0.2, 0.0, 0.4, 'min', 'max'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        set(deviceObj, 'AmplitudeOffset', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 4: AmplitudeUnits - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the AmplitudeUnits property.
validValues = {'vpp', 'vrms', 'dbm', 'default'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        set(deviceObj, 'AmplitudeUnits', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 5: DutyCycle - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Dutycycle property.
validValues = {'min', 'max', 20.0, 40.0, 60.0, 80.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        set(deviceObj, 'Dutycycle', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 6: Frequency - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Frequency property.
validValues = {1.0E-4, 4999999.0001, 9999998.0001, 1.5E7, 'min', 'max'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        set(deviceObj, 'Frequency', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 7: OutputLoad - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the OutputLoad property.
validValues = {50.0, 9.9E37, 'infinity', 'min', 'max'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        set(deviceObj, 'OutputLoad', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 8: OutputSync - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the OutputSync property.
validValues = {'on', 'off'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        set(deviceObj, 'OutputSync', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 9: TriggerSlope - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the TriggerSlope property.
validValues = {'positive', 'negative'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        set(deviceObj, 'TriggerSlope', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 10: TriggerSource - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the TriggerSource property.
validValues = {'immediate', 'external', 'bus'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        set(deviceObj, 'TriggerSource', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 11: Waveform - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Waveform property.
validValues = {'sin', 'square', 'ramp', 'noise', 'DC', 'user', 'triangle'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        set(deviceObj, 'Waveform', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 12: Depth - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Depth property.
validValues = {0.0, 40.0, 80.0, 120.0, 'min', 'max'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Amplitudemod');
        groupObj = groupObj(1);
        set(groupObj, 'Depth', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 13: Enabled - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Enabled property.
validValues = {'on', 'off'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Amplitudemod');
        groupObj = groupObj(1);
        set(groupObj, 'Enabled', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 14: InternalFrequency - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the InternalFrequency property.
validValues = {0.01, 6666.01, 13332.01, 20000.0, 'min', 'max'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Amplitudemod');
        groupObj = groupObj(1);
        set(groupObj, 'InternalFrequency', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 15: InternalWaveform - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the InternalWaveform property.
validValues = {'sin', 'square', 'triangle', 'ramp', 'noise', 'user'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Amplitudemod');
        groupObj = groupObj(1);
        set(groupObj, 'InternalWaveform', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 16: Source - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Source property.
validValues = {'both', 'external'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Amplitudemod');
        groupObj = groupObj(1);
        set(groupObj, 'Source', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 17: CurrentWaveformName - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the CurrentWaveformName property excluding 'another' option.
validValues ={'SINC','NEG_RAMP','EXP_RISE','EXP_FALL','CARDIAC'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Arbitrarywaveform');
        groupObj = groupObj(1);
        set(groupObj, 'CurrentWaveformName', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 18: Frequency (Waveform) - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Frequency property.
validValues = {1.0E-4, 4999999.0001, 9999998.0001, 1.5E7, 'min', 'max'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Arbitrarywaveform');
        groupObj = groupObj(1);
        set(groupObj, 'Frequency', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 19: Gain - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Gain property.

% For current OutputLoad settings, valid values are max, min, or  a value
% from .06095 to 12.165 though absolute limits are from .0305 to 12.165
validValues = {4.0305, 8.0305, 12.165, 'min', 'max'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Arbitrarywaveform');
        groupObj = groupObj(1);
        set(groupObj, 'Gain', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 20: MaxNumberWaveform - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the MaxNumberWaveform property.
validValues = {-1000.0, -500.0, 0.0, 500.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Arbitrarywaveform');
        groupObj = groupObj(1);
        set(groupObj, 'MaxNumberWaveform', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 21: Offset - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Offset property.
validValues = {-0.2, -0.1, 0.0, 0.2, 'min', 'max'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Arbitrarywaveform');
        groupObj = groupObj(1);
        set(groupObj, 'Offset', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 22: Cycles - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Cycles property.
validValues = {1.0, 16667.0, 33333.0, 50000.0, 'min', 'max', 'infinity'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Burstmod');
        groupObj = groupObj(1);
        set(groupObj, 'Cycles', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 23: Enabled (BurstMod) - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Enabled property.
validValues = {'on', 'off'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Burstmod');
        groupObj = groupObj(1);
        set(groupObj, 'Enabled', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 24: InternalRate - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the InternalRate property.
validValues = {0.01, 16666.01, 33332.01, 50000.0, 'min', 'max'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Burstmod');
        groupObj = groupObj(1);
        set(groupObj, 'InternalRate', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 25: Phase - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Phase property.
validValues = {-360.0, -120.0, 120.0, 360.0, 'min', 'max'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Burstmod');
        groupObj = groupObj(1);
        set(groupObj, 'Phase', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 26: Source (BurstMod) - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Source property.
validValues = {'external', 'internal'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Burstmod');
        groupObj = groupObj(1);
        set(groupObj, 'Source', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 27: Message - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Message property.
validValues = {'on', 'off', 'sydney', 'wayne', 'min', 'max'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Calibration');
        groupObj = groupObj(1);
        set(groupObj, 'Message', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 28: Setup (Calibration) - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Setup property.
validValues = {0.0, 28.0, 56.0, 84.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Calibration');
        groupObj = groupObj(1);
        set(groupObj, 'Setup', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 29: Enabled (Display) - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Enabled property.
validValues = {'on', 'off'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Display');
        groupObj = groupObj(1);
        set(groupObj, 'Enabled', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 30: Enabled (FrequencyMod) - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Enabled property.
validValues = {'on', 'off'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Frequencymod');
        groupObj = groupObj(1);
        set(groupObj, 'Enabled', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 31: InternalDeviation - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the InternalDeviation property.
validValues = {0.01, 33333.01, 66666.01, 100000.0, 'min', 'max'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Frequencymod');
        groupObj = groupObj(1);
        set(groupObj, 'InternalDeviation', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 32: InternalFrequency - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the InternalFrequency property.
validValues = {0.01, 3333.01, 6666.01, 10000.0, 'min', 'max'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Frequencymod');
        groupObj = groupObj(1);
        set(groupObj, 'InternalFrequency', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 33: InternalWaveform - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the InternalWaveform property.
validValues = {'sin', 'square', 'triangle', 'ramp', 'noise', 'user'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Frequencymod');
        groupObj = groupObj(1);
        set(groupObj, 'InternalWaveform', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 34: Enabled (FrequencySweep) - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Enabled property.
validValues = {'on', 'off'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Frequencysweep');
        groupObj = groupObj(1);
        set(groupObj, 'Enabled', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 35: Spacing - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Spacing property.
validValues = {'linear', 'log'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Frequencysweep');
        groupObj = groupObj(1);
        set(groupObj, 'Spacing', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 36: Start - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Start property.
validValues = {0.01, 4999999.01, 9999998.01, 1.5E7, 'min', 'max'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Frequencysweep');
        groupObj = groupObj(1);
        set(groupObj, 'Start', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 37: Stop - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Stop property.
validValues = {'max', 'min', 0.01, 4999999.01, 9999998.01, 1.5E7};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Frequencysweep');
        groupObj = groupObj(1);
        set(groupObj, 'Stop', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 38: Time - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Time property.
validValues = {0.0010, 166.001, 332.001, 500.0, 'min', 'max'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Frequencysweep');
        groupObj = groupObj(1);
        set(groupObj, 'Time', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 39: Enabled (FSKMod) - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Enabled property.
validValues = {'on', 'off'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Fskmod');
        groupObj = groupObj(1);
        set(groupObj, 'Enabled', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 40: Frequency (FSKMod) - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Frequency property.
validValues = {0.01, 4999999.01, 9999998.01, 1.5E7, 'min', 'max'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Fskmod');
        groupObj = groupObj(1);
        set(groupObj, 'Frequency', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 41: InternalRate - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the InternalRate property.
validValues = {0.01, 16666.01, 33332.01, 50000.0, 'min', 'max'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Fskmod');
        groupObj = groupObj(1);
        set(groupObj, 'InternalRate', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 42: Source (FSKMod) - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Source property.
validValues = {'internal', 'external'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Fskmod');
        groupObj = groupObj(1);
        set(groupObj, 'Source', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 43: ByteOrder - Set Property (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the ByteOrder property.
validValues = {'normal', 'swapped'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'System');
        groupObj = groupObj(1);
        set(groupObj, 'ByteOrder', validValues{i});

        % Check if instrument error occurred.
        result = invoke(deviceObj,'error');
        errorcode = ~isempty(result);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 44: Amplitude - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    amp = get(deviceObj, 'Amplitude');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, amp};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 45: AmplitudeOffset - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    ampOffset = get(deviceObj, 'AmplitudeOffset');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, ampOffset};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 46: AmplitudeUnits - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    ampunits = get(deviceObj, 'AmplitudeUnits');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, ampunits};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 47: Catalog - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    catalog = get(deviceObj, 'Catalog');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, catalog};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 48: DutyCycle - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    dutyCycle = get(deviceObj, 'Dutycycle');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, dutyCycle};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 49: Frequency - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    freq = get(deviceObj, 'Frequency');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, freq};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 50: InstrumentModel - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    instrModel = get(deviceObj, 'InstrumentModel');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, instrModel};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 51: OutputLoad - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    outputLoad = get(deviceObj, 'OutputLoad');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, outputLoad};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 52: OutputMode - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    outputMode = get(deviceObj, 'OutputMode');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, outputMode};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 53: OutputSync - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    outputSync = get(deviceObj, 'OutputSync');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, outputSync};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 54: TriggerSlope - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    trigSlope = get(deviceObj, 'TriggerSlope');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, trigSlope};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 55: TriggerSource - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    trigSource = get(deviceObj, 'TriggerSource');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, trigSource};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 56: Waveform - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    waveform = get(deviceObj, 'Waveform');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, waveform};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 57: Depth - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    depth = get(groupObj, {'Depth'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, depth};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 58: Enabled (AmplitudeMod) - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    enabled = get(groupObj, {'Enabled'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, enabled};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 59: InternalFrequency - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    internalFreq = get(groupObj, 'InternalFrequency');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, internalFreq};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 60: InternalWaveform - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    internalWaveform = get(groupObj, {'InternalWaveform'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, internalWaveform};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 61: Source (AmplitudeMod) - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    source = get(groupObj, {'Source'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, source};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 62: CrestFactor - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    crestFactor = get(groupObj, {'CrestFactor'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, crestFactor};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 63: CurrentWaveformName - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    waveformName = get(groupObj, 'CurrentWaveformName');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, waveformName};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 64: Frequency (ArbitraryWaveform) - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    freq = get(groupObj, {'Frequency'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, freq};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 65: Gain - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    gain = get(groupObj, {'Gain'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, gain};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 66: maxNumberWaveform - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    maxWaveform = get(groupObj, {'MaxNumberWaveform'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, maxWaveform};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 67: Offset - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    offset = get(groupObj, {'Offset'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, offset};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 68: WaveformLengthMax - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    maxLength = get(groupObj, {'WaveformLengthMax'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, maxLength};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 69: WaveformLengthMin - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    minLength = get(groupObj, {'WaveformLengthMin'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, minLength};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 70: Cycles - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Burstmod');
    cycles = get(groupObj, {'Cycles'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, cycles};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 71: Enabled (BurstMod) - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Burstmod');
    enabled = get(groupObj, {'Enabled'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, enabled};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 72: InternalRate - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Burstmod');
    internalRate = get(groupObj, {'InternalRate'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, internalRate};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 73: Phase - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Burstmod');
    phase = get(groupObj, {'Phase'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, phase};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 74: Source (BurstMod) - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Burstmod');
    source = get(groupObj, {'Source'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, source};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 75: Count - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Calibration');
    count = get(groupObj, {'Count'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, count};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 76: Enabled (Calibration) -Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Calibration');
    enabled = get(groupObj, {'Enabled'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, enabled};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 77: Message - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Calibration');
    message = get(groupObj, {'Message'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, message};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 78: Setup (Calibration) - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Calibration');
    setup = get(groupObj, {'Setup'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, setup};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 79: Enabled (Display) - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Display');
    display = get(groupObj, {'Enabled'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, display};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 80: Enabled (FrequencyMod) - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Frequencymod');
    enabled = get(groupObj, {'Enabled'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, enabled};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 81: internalDeviation - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Frequencymod');
    internalDeviation = get(groupObj, {'InternalDeviation'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, internalDeviation};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 82: InternalFrequency - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Frequencymod');
    internalFreq = get(groupObj, {'InternalFrequency'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, internalFreq};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 83: InternalWaveform - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Frequencymod');
    internalWaveform = get(groupObj, {'InternalWaveform'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, internalWaveform};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 84: Enabled (FrequencySweep) - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Frequencysweep');
    enabled = get(groupObj, {'Enabled'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, enabled};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 85: Spacing - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Frequencysweep');
    spacing = get(groupObj, {'Spacing'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, spacing};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 86: Start - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Frequencysweep');
    start = get(groupObj, {'Start'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, start};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 87: Stop - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Frequencysweep');
    stop = get(groupObj, {'Stop'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, stop};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 88: Time - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Frequencysweep');
    stop = get(groupObj, {'Time'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, stop};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 89: Enabled (FSKMod) - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Fskmod');
    enabled = get(groupObj, {'Enabled'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, enabled};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 90: Frequency (FSKMod) - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Fskmod');
    freq = get(groupObj, {'Frequency'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, freq};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 91: InternalRate - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Fskmod');
    internalRate = get(groupObj, {'InternalRate'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, internalRate};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 92: Source (FSKMod) - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Fskmod');
    source = get(groupObj, {'Source'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, source};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 93: ByteOrder - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'System');
    byteOrder = get(groupObj, {'ByteOrder'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, byteOrder};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 94: Version - Get Property (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'System');
    version = get(groupObj, {'Version'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, version};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 96: error - Function (Function Test Step)

errorcode = false;
try
    % Execute the function.
    [errMsg] = invoke(deviceObj, 'error');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, errMsg};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 100: trigger - Function (Function Test Step)

errorcode = false;
try
    % Execute the function.
    invoke(deviceObj, 'trigger');
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 101: clear - Function (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    invoke(groupObj, 'create', 'TEST', [1:10]);
    invoke(groupObj, 'clear', 'TEST');
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 102: create - Function (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    invoke(groupObj, 'create', 'TEST', [1:10]);
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 103: getlength - Function (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    [lengthWaveform] = invoke(groupObj, 'getlength', 'TEST');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, lengthWaveform};
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 104: setwaveform - Function (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    invoke(groupObj, 'setwaveform', 'TEST');
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 107: clear - Function (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Display');
    groupObj = groupObj(1);
    invoke(groupObj, 'clear');
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 108: settext - Function (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Display');
    groupObj = groupObj(1);
    invoke(groupObj, 'settext', 'Test_Msg');
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 109: beep - Function (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'System');
    groupObj = groupObj(1);
    invoke(groupObj, 'beep');
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 110: savestate - Function (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'System');
    groupObj = groupObj(1);
    invoke(groupObj, 'savestate', 1);
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 111: loadstate - Function (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'System');
    groupObj = groupObj(1);
    invoke(groupObj, 'loadstate', 1);
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 112: deletestate - Function (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'System');
    groupObj = groupObj(1);
    invoke(groupObj, 'deletestate',1);
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 98: reset - Function (Function Test Step)

errorcode = false;
try
    % Execute the function.
    invoke(deviceObj, 'reset');
 
    % Check if instrument error occurred.
    result = invoke(deviceObj,'error');
    errorcode = ~isempty(result);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Cleanup.
disconnect(deviceObj);

% Post results.
fprintf(['Stop time: ' datestr(now) '\n']);
if (errorOccurred == true)
    fprintf('Test status: FAILED\n');
    varargout{1} = false;
elseif (warningOccurred == true)
    fprintf('Test status: PASSED with warnings\n');
    varargout{1} = true;
else
    fprintf('Test status: PASSED\n');
    varargout{1} = true;
end

catch
    % An error occurred while running the test.
    fprintf('An error occurred while executing the test.\n');
    fprintf([lasterr,'\n']);
    varargout{1} = false;
end

</MCode>
               </Code>
               <Description>INVOKE(OBJ,'drivertest') </Description>
            </Method>
            <Method>
               <Name>error</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function err = error(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
 
driverData = get(obj, 'DriverData');
numberOfErrors = numel(driverData.error);

% checks to see if there are any errors stored.
if(numberOfErrors == 0)
    err = '';
else
    err = driverData.error{numberOfErrors};
    driverData.error(numberOfErrors) = '';
    set(obj, 'DriverData', driverData);
end

</MCode>
               </Code>
               <Description>ERR = INVOKE(OBJ,'error')  Returns last instrument error stored </Description>
            </Method>
            <Method>
               <Name>reset</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function reset(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
driverData = get(obj, 'DriverData');

driverData.amplitude = 0.1;
driverData.offset = 0;
driverData.units = 'vpp';
driverData.dutycycle = 50;
driverData.dutycyclesquare = 50;
driverData.frequency = 1000;
driverData.outputload = 50;
driverData.outputsync = 'on';
driverData.triggerslope = 'positive';
driverData.triggersource = 'immediate';
driverData.waveform = 'sin';
driverData.error = {};
driverData.holdplace = 1;
driverData.enabled = {'off','off','off','off','off'};
driverData.waveformMax = 15000000;
driverData.unitfactor = 1;

driverData.amplitudemod.depth = 100;
driverData.amplitudemod.enabled = 'off';
driverData.amplitudemod.internalfrequencey = 100;
driverData.amplitudemod.internalwaveform = 'sin';
driverData.amplitudemod.source = 'both';

driverData.arbitrarywaveform.crestfactor = 0;
driverData.arbitrarywaveform.currentwaveformname = 'SINC';
driverData.arbitrarywaveform.gain =  0.1;
driverData.arbitrarywaveform.maxnumberwaveform = 9;
driverData.arbitrarywaveform.numberwaveform = 0;
driverData.arbitrarywaveform.offset =  0;
driverData.arbitrarywaveform.waveformlengthmax = 16000;
driverData.arbitrarywaveform.waveformlengthmin =  8;
driverData.arbitrarywaveform.numbercreated = 5;

driverData.burstmod.cycles = 1;
driverData.burstmod.enabled = 'off';
driverData.burstmod.internalrate = 100;
driverData.burstmod.phase = 0;
driverData.burstmod.source = 'internal';

driverData.calibration.count = 0;
driverData.calibration.state = 'on';
driverData.calibration.setup = 0;

driverData.display.enabled = 'on';

driverData.frequencymod.enabled = 'off';
driverData.frequencymod.internaldeviation = 100;
driverData.frequencymod.internalfrequenvy = 10;
driverData.frequencymod.internalwaveform = 'sin';

driverData.frequencysweep.enabled = 'off';
driverData.frequencysweep.spacing = 'linear';
driverData.frequencysweep.start = 100;
driverData.frequencysweep.stop = 1000;
driverData.frequencysweep.time = 1;

driverData.fskmod.enabled = 'off';
driverData.fskmod.frequency = 100;
driverData.fskmod.internalrate = 10;
driverData.fskmod.source = 'internal';

driverData.system.byteorder = 'normal';
driverData.system.version = 1993;

set(obj, 'DriverData', driverData);</MCode>
               </Code>
               <Description>INVOKE(OBJ,'reset') Loads the initial values for driverData from the file generic_agilent_33120a_initialData</Description>
            </Method>
            <Method>
               <Name>trigger</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function trigger(obj)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.
</MCode>
               </Code>
               <Description>TRIGGER Send a software trigger to the instrument.  INVOKE(OBJ, 'trigger') sends a software trigger to the instrument.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>amplitudemod</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="AmplitudeMod1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Depth</Name>
               <Location>amplitudemod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
propertyValue = driverData.amplitudemod.depth;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');

% checks to see if the user typed in a string value and then sets the 
% appropriate propertyValue
if(strcmpi(propertyValue,'min'))
    propertyValue = 0;
elseif(strcmpi(propertyValue,'max'))
    propertyValue = 120;
end

driverData.amplitudemod.depth = propertyValue;
set(get(obj, 'Parent'), 'DriverData', driverData);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="120.0" Min="0.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="min"/>
                     <Enum Name="max" Value="max"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>100</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the internal modulation depth in percent.   Select from 0% to 120%. The default is 100%.</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>amplitudemod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
propertyValue = driverData.enabled{1};</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

beep on
driverData = get(get(obj, 'Parent'), 'DriverData');

% checks to see if another mode is enabled
idx = strmatch('on',driverData.enabled,'exact');

% stores an error if another mode is enabled and switches all other modes
% to 'off'
if(strcmpi(propertyValue,'on') &amp;&amp; ~isempty(idx) &amp;&amp; idx ~= 1)
    beep
    driverData.error{driverData.holdplace} = '-221,"Settings conflict; previous modulation has been disabled"';
    driverData.holdplace = driverData.holdplace + 1;
    driverData.enabled{idx} = 'off';
end
     
driverData.enabled{1} = propertyValue;
set(get(obj, 'Parent'), 'DriverData', driverData);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="on" Value="on"/>
                     <Enum Name="off" Value="off"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Disable or enable AM.   To ensure proper operation, you should enable AM after you have set up the other modulation parameters. Only one modulation mode can be enabled at a time. When you enable AM the previous modulation is turned off.</Description>
            </Property>
            <Property>
               <Name>InternalFrequency</Name>
               <Location>amplitudemod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
propertyValue = driverData.amplitudemod.internalfrequencey;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');

% checks to see if the user typed in a string value and then sets the 
% appropriate propertyValue
if(strcmpi(propertyValue,'min'))
    propertyValue = .01;
elseif(strcmpi(propertyValue,'max'))
    propertyValue = 20000;
end

driverData.amplitudemod.internalfrequencey = propertyValue;
set(get(obj, 'Parent'), 'DriverData', driverData);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="20000.0" Min="0.01"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="min"/>
                     <Enum Name="max" Value="max"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.01</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select the frequency of the modulating waveform.  Used only when the internal modulation source is selected. Select from 10 mHz to 20 kHz. The default is 100 Hz.</Description>
            </Property>
            <Property>
               <Name>InternalWaveform</Name>
               <Location>amplitudemod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
propertyValue = driverData.amplitudemod.internalwaveform;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
driverData.amplitudemod.internalwaveform = propertyValue;
set(get(obj, 'Parent'), 'DriverData', driverData);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="sin" Value="sin"/>
                     <Enum Name="square" Value="square"/>
                     <Enum Name="triangle" Value="triangle"/>
                     <Enum Name="ramp" Value="ramp"/>
                     <Enum Name="noise" Value="noise"/>
                     <Enum Name="user" Value="user"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>sin</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select the shape of the modulating waveform.   Used only when the internal modulation source is selected. You can use the noise function as the modulating waveform. However, you cannot use the noise function as or dc volts as the carrier waveform.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>amplitudemod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
propertyValue = driverData.amplitudemod.source;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
driverData.amplitudemod.source  = propertyValue;
set(get(obj, 'Parent'), 'DriverData', driverData);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="both" Value="both"/>
                     <Enum Name="external" Value="external"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>both</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select the source of the modulating signal.  The function generator will accept an internal modulating signal, an external modulating signal, or both. The default is BOTH.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>arbitrarywaveform</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ArbitraryWaveform1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>CrestFactor</Name>
               <Location>arbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.


driverData = get(get(obj, 'Parent'), 'DriverData');
propertyValue = driverData.arbitrarywaveform.crestfactor;
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the default crest factor. Actual Value can not be calculated.

</Description>
            </Property>
            <Property>
               <Name>CurrentWaveformName</Name>
               <Location>arbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
propertyValue = driverData.arbitrarywaveform.currentwaveformname;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

beep on
driverData = get(get(obj, 'Parent'), 'DriverData');

% checks to see if the the waveform name already exists 
custom = driverData.catalog;
str = sprintf('"%s"',upper(propertyValue));
idx = strmatch(upper(str),custom,'exact');

% gets the length of the name
numberofChar = length(propertyValue);

% checks to see if the first character of the name is a nunber
firstChar = propertyValue(1);
ascii = double(lower(firstChar));
number = {'1','2','3','4','5','6','7','8','9','0'}
num = strmatch(firstChar,number,'exact');

% stores an error if name is not in a valid form
if~(isempty(num))
    driverData.error{driverData.holdplace} = '-128,"Numeric data not allowed"';
    driverData.holdplace = driverData.holdplace + 1;
    beep;
elseif~((97 &lt;= ascii) &amp;&amp; (ascii &lt;= 122))
    driverData.error{driverData.holdplace} = '-101,"Invalid character"';
    driverData.holdplace = driverData.holdplace + 1;
    beep;
elseif(numberofChar &gt;= 13)
    driverData.error{driverData.holdplace} = '-112,"Program mnemonic too long"';
    driverData.holdplace = driverData.holdplace + 1;
    beep;
elseif(numberofChar &gt;= 9)
    driverData.error{driverData.holdplace} = '+783,"Arb waveform name too long';
    driverData.holdplace = driverData.holdplace + 1;
    beep;
elseif(isempty(idx))
    driverData.error{driverData.holdplace} = '+785,"Specified arb waveform does not exist"';
    driverData.holdplace = driverData.holdplace + 1;
    beep;
else
    driverData.arbitrarywaveform.currentwaveformname  = propertyValue;
end

set(get(obj, 'Parent'), 'DriverData', driverData);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Set or query the name of the current arbitrary waveform. To view a list of the recognized names of arbitrary waveforms, query the Catalog property of the Parent group.</Description>
            </Property>
            <Property>
               <Name>Frequency</Name>
               <Location>arbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
propertyValue = driverData.frequency;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');

% checks to see if the user typed in a string value and then sets the 
% appropriate propertyValue
if(strcmpi(propertyValue,'min'))
    propertyValue = 1.0E-4;
elseif(strcmpi(propertyValue,'max'))
    propertyValue = driverData.waveformMax;
end

% adjusts the dutycycle with respect to the frequency
if((propertyValue &gt; 5) &amp;&amp; (driverData.dutycycle &gt; 60))
    driverData.dutycycle = 60;
elseif((propertyValue &gt; 5) &amp;&amp; (driverData.dutycycle &lt; 40))
    driverData.dutycycle = 40;
end

driverData.frequency = propertyValue;
set(get(obj, 'Parent'), 'DriverData', driverData);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="1.5E7" Min="1.0E-4"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="min"/>
                     <Enum Name="max" Value="max"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0E-4</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the output frequency.  MIN selects the lowest frequency allowed for currently active function. MAX selects the highest frequency allowed for currently active function.  The default frequency is 1 kHz for all functions.  For arbitrary waveforms that you create and download from memory, the maximum frequency depends on the number of points specified in the waveform.  The output frequency is automatically adjusted if you select a function whose maximum frequency is less than that of currently active function. For example, if you output 1 MHz sine wave and then change the function to triangle wave, the function generator will adjust the output to 100 kHz (the upper limit for triangle wave).</Description>
            </Property>
            <Property>
               <Name>Gain</Name>
               <Location>arbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property 
%   value. If the property is a group property, OBJ is the group object. If 
%   the property is a base device property, OBJ is the device object.  

driverData = get(get(obj, 'Parent'), 'DriverData');
propertyValue = driverData.arbitrarywaveform.gain;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue) 
% Set a property value. 
%   This function is called to set the device or group object property 
%   value. If the property is a group property, OBJ is the group object. If 
%   the property is a base device property, OBJ is the device object.  

driverData = get(get(obj, 'Parent'), 'DriverData');

load = driverData.outputload;

% returns an error if the propertyValue is not within in a proper range in 
% relationship to the output load. Also finds the apropriate maximum gain 
% value with respect to the ouput load
switch load
    case 50
        max = 6.084515;
        if(~ischar(propertyValue))
            if(propertyValue &gt; 6.084515)
                error(['??? Invalid value for Gain. For current',...
                ' OutputLoad settings, valid values are max, min, or ',...
                ' a value from .0305 to 6.084515']);
            end
        end
    case 9.9E37
        max = 12.165;
        if(~ischar(propertyValue))
            if(propertyValue &lt; .06095)
                error(['??? Invalid value for Gain. For current',...
                ' OutputLoad settings, valid values are max, min, or ',...
                ' a value from .06095 to 12.165']);
            end
        end
    otherwise
        error(['??? Unexpected value for OutputLoad. ',...
            'Expected either 50 or 9.9e37.']);
end
    
% checks to see if the user typed in a string value and then sets the 
% appropriate propertyValue
if(strcmpi(propertyValue,'min'))
    propertyValue = 0.0305;
elseif(strcmpi(propertyValue,'max'))
    propertyValue = max;
end

driverData.arbitrarywaveform.gain = propertyValue;
set(get(obj, 'Parent'), 'DriverData', driverData);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="12.165" Min="0.0305"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="min"/>
                     <Enum Name="max" Value="max"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.100</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the output amplitude for the currently active function.  MIN selects the smallest amplitude allowed for the selected function (50 mVpp into 50 ohms) MAX Selects the largest amplitude allowed (10 Vpp into 50 ohms).  The default amplitude is 100 mVpp(into 50 ohms).  For arbitrary waveforms, the maximum amplitude will be limited if the data do not span the full range of the output DAC (Digital-to-Analog Converter). For example, the built-in "SINC" does not use the full range of value between PLUS OR MINUS 1 and therefore its maximum amplitude is 6.084 (into 50 ohms).  For dc volts, the output level is actually controlled by setting the offset voltage. You can set the dc voltage to any value between PLUS OR MINUS 5 Vdc into 50 ohms or PLUS OR MINUS 10 Vdc into an open circuit.</Description>
            </Property>
            <Property>
               <Name>MaxNumberWaveform</Name>
               <Location>arbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = get(obj, propertyName) 
% This function is called to set the group object 
% property value.  

driverData = get(get(obj, 'Parent'), 'DriverData');
propertyValue = driverData.arbitrarywaveform.maxnumberwaveform;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue) 
% This function is called to set the group object property value.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Query the maximun number of waveforms that the function generator supports.</Description>
            </Property>
            <Property>
               <Name>Offset</Name>
               <Location>arbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
propertyValue = driverData.arbitrarywaveform.offset;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');

% checks to see if the user typed in a string value and then sets the 
% appropriate propertyValue
if(strcmpi(propertyValue,'min'))
    propertyValue = -0.2;
elseif(strcmpi(propertyValue,'max'))
    propertyValue = 0.2;
end

driverData.arbitrarywaveform.offset  = propertyValue;
set(get(obj, 'Parent'), 'DriverData', driverData);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="0.2" Min="-0.2"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="min"/>
                     <Enum Name="max" Value="max"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the dc offset voltage for the currently active function.</Description>
            </Property>
            <Property>
               <Name>WaveformLengthMax</Name>
               <Location>arbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = get(obj, propertyName) 
% This function is called to set the group object 
% property value. 

driverData = get(get(obj, 'Parent'), 'DriverData');
propertyValue = driverData.arbitrarywaveform.waveformlengthmax;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue) 
% This function is called to set the group object property value.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>16000</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Maximum number of data points that can be downloaded.</Description>
            </Property>
            <Property>
               <Name>WaveformLengthMin</Name>
               <Location>arbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = get(obj, propertyName) 
% This function is called to set the group object 
% property value. 

driverData = get(get(obj, 'Parent'), 'DriverData');
propertyValue = driverData.arbitrarywaveform.waveformlengthmin</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue) 
% This function is called to set the group object property value.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>8</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Minimum number of data points that can be downloaded.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>clear</Name>
               <Location>arbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function clear(obj, waveName) 
% If this is a group function, OBJ is the group object. If 
% it a base device function, OBJ is the device object. 
% WAVENAME is the namenof the arbitrary waveform to delete.  
% According to the specificaions in the manual you should be able 
% to delete user-defined waveforms both in volatile and non-volatile memory, 
% except the built-in ones. If a user-defined waveform is currently active, 
% you cannot delete it.If you are erasing all user-defined waveforms at once, 
% the currently active waveform won't disappear and an error will be generated.   

beep on

driverData = get(get(obj, 'Parent'), 'DriverData');

% gets the current settings
currentWaveform = driverData.waveform;
currentCatalog = driverData.catalog;

defaultCatalog = {'"SINC"','"NEG_RAMP"','"EXP_RISE"','"EXP_FALL"','"CARDIAC"'};

% gets the current arbitrarty wavefrom name and finds its index in the 
% catalog
arbitraryWaveName = driverData.arbitrarywaveform.currentwaveformname;
String = sprintf('"%s"',upper(arbitraryWaveName));
idx_arbitraryWaveName = strmatch(upper(String),defaultCatalog,'exact');

switch(nargin)     
    case 1
        % if NAME is not specified all non built-in arbitrary waveforms are cleared
        driverData.catalog = defaultCatalog;
        waveName = arbitraryWaveName;
 
        % checks to see if active waveform is an arbitrarywave form and is
        % userdefined
        if(strcmpi(currentWaveform,'USER') &amp;&amp; isempty(idx_arbitraryWaveName))
            
            % saves the data points of the active waveform
            idx = strmatch(upper(String),currentCatalog,'exact');
            temp = driverData.points{idx};
            driverData.points = {8.19200E+03,9.00000E+00,4.09600E+03,4.09600E+03,1.02400E+03};

            % adds the active waveform back on to the catalog
            driverData.catalog = cat(2,driverData.catalog,String);
            driverData.arbitrarywaveform.numbercreated = driverData.arbitrarywaveform.numbercreated + 1;
            
            % adds the saved data points back on
            idx = strmatch(upper(String),driverData.catalog,'exact');
            driverData.points{idx} = temp;
            
            % displays an error
            driverData.error{driverData.holdplace} = '+787,"Cannot delete an active arb waveform"';
            driverData.holdplace = driverData.holdplace + 1;
            beep;
            set(get(obj, 'Parent'), 'DriverData', driverData);
            error('cannot erase active arbitrary waveform')
        else
            driverData.points = {8.19200E+03,9.00000E+00,4.09600E+03,4.09600E+03,1.02400E+03};
        end 
           
    otherwise
        % Verify that the name exists
        str = sprintf('"%s"',upper(waveName));
        idx = strmatch(upper(str),currentCatalog,'exact');

        if isempty(idx)          
            error('NAME must exist.'); 
        end
        % NAME must not be a built-in arbitrary waveform name.         
        if any(strcmpi(waveName, {'sinc', 'neg_ramp', 'exp_rise', 'exp_fall','cardiac'})) 
            driverData.error{driverData.holdplace} = '+786,"Cannot delete a built-in arb waveform"';
            driverData.holdplace = driverData.holdplace + 1;
            beep;
            set(get(obj, 'Parent'), 'DriverData', driverData);
            error('cannot erase any of the following: sinc, neg_ramp, exp_rise, exp_fall , cardiac');
        
        % NAME can not be an active abitrary waveform
        elseif(strcmpi(currentWaveform,'USER') &amp;&amp; strcmpi(arbitraryWaveName,waveName))
            driverData.error{driverData.holdplace} = '+787,"Cannot delete an active arb waveform"';
            driverData.holdplace = driverData.holdplace + 1;
            beep;
            set(get(obj, 'Parent'), 'DriverData', driverData);
            error('cannot erase active arbitrary waveform')            
        end
        
        % deletes the data points associated with the cleared waveform
        driverData.points(idx) = '';

        % deletes the waveform from the catalog
        driverData.catalog(idx) = '';
end

set(get(obj, 'Parent'), 'DriverData', driverData);</MCode>
               </Code>
               <Description>INVOKE(obj, clear, waveName)Delete the specified arbitrary waveform from memory.</Description>
            </Method>
            <Method>
               <Name>create</Name>
               <Location>arbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function create(obj,name, datapoints)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.
% DATAPOINTS is an array of points % NAME is the name of the arbitrary waveform
% if the user specifies the name as VOLATILE, then the waveform can't be stored in
% non-volatile memory (using that name).

beep on
driverData = get(get(obj, 'Parent'), 'DriverData');
d = datapoints;
numberOfWaves = length(driverData.catalog);
% Checks to see if the max number of waveforms has already been reached
if(numberOfWaves &gt;= driverData.arbitrarywaveform.maxnumberwaveform)
    driverData.error{driverData.holdplace} = '+781,"Not enough memory to store new arb waveform; use DATA:DELete"';
    driverData.holdplace = driverData.holdplace + 1;
    beep;
else

    % Check that the array contains only numeric data
    if ~isnumeric(datapoints)
        error('Only numeric data is valid');
    end
    % Check that the number of points is within range
    s = size(datapoints);
    if (length(s) &gt; 2 || (min(s) &gt; 1))
        error('The datapoints must be a 1 x N vector of values');
    end
    driverData.length = length(datapoints);
    minData = driverData.arbitrarywaveform.waveformlengthmin;
    maxData = driverData.arbitrarywaveform.waveformlengthmax;
    if (length(datapoints) &lt; minData || length(datapoints) &gt; maxData)
        error('The datapoints must be between %i and %i in length.',minData,maxData);
    end
    if (max(datapoints) &gt; 2047 || min(datapoints) &lt; -2047)
        error('Only datapoint values between -2047 and 2047 are accepted by the instrument.');
    end
    % Validating the name (must not exceed 8 characters).
    if ~(isvarname(name) &amp;&amp; length(name) &lt;= 8 )
        error(['NAME must be a character string with letters, ',...
            'digits and ' sprintf('\n') 'underscores. The first character ',...
            'in NAME must be a letter.' sprintf('\n') 'The maximum length is 8 characters.']);
    end
    % Check that the name is not one of the restricted names
    if any(strcmpi(name, {'sinc', 'neg_ramp', 'exp_rise', 'exp_fall','cardiac'}))
        error('NAME cannot be any of the following: sinc, neg_ramp, exp_rise, exp_fall , cardiac');
    end

    custom = driverData.catalog;
    str = sprintf('"%s"',upper(name));
    idx = strmatch(upper(str),custom,'exact');
    if(isempty(idx))
        new = sprintf('"%s"',name);
        driverData.catalog = cat(2,driverData.catalog,str);
        driverData.points{length(custom) + 1} = datapoints;
    else
        driverData.points{idx} = datapoints;
    end
end
set(get(obj, 'Parent'), 'DriverData', driverData);</MCode>
               </Code>
               <Description>INVOKE(obj, create, name, datapoints)Upload waveform data to the Function Generator.   OBJ is the device object's ArbitraryWaveform group. NAME is the name to store your waveform to in the arbitrary waveform catalog in non-volatile memory. Alternatively, you can specify 'volatile' for NAME to leave the waveform in volatile memory. DATAPOINTS is an array of numerics representing the functional points of the arbitrary waveform.  To set your uploaded waveform to the current "user" waveform, pass the name you specified(or 'volatile') to the CurrentWaveformName property of the ArbitraryWaveform group. Select 'user' from the waveform property the Parent group to ensure that arbitrary waveform is the selected output mode.</Description>
            </Method>
            <Method>
               <Name>getlength</Name>
               <Location>arbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function points =  getlength(obj,name)  
% OBJ is the group object. 
% NAME is the name of the arbitrary waveform  

driverData = get(get(obj, 'Parent'), 'DriverData'); 

% finds the current waveform
custom = driverData.catalog;
str = sprintf('"%s"',upper(name));
idx = strmatch(upper(str),custom,'exact');

% checks to see if the user typed in a valid waveform
if(isempty(idx))
    error('waveform listed does not exist')
else
    % finds the corrisponing data
    driverData.points;
    data = driverData.points{idx};
    
    % checks to see if the length needs to be calculated 
    if(idx &lt; 6)
        points = data;
    else
        points = length(data);
    end

    % gets the length of the data
    driverData.length = points;
    
    set(get(obj, 'Parent'), 'DriverData', driverData)
end</MCode>
               </Code>
               <Description>points = INVOKE(obj, getlength, name) returns the length of the waveform specified by NAME</Description>
            </Method>
            <Method>
               <Name>setwaveform</Name>
               <Location>arbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setwaveform(obj, name) 
% OBJ is the group object. 
% NAME is the name you want to activate 

beep on
driverData = get(get(obj, 'Parent'), 'DriverData');

% checks to see if the the waveform name already exists 
custom = driverData.catalog;
str = sprintf('"%s"',upper(name));
idx = strmatch(upper(str),custom,'exact');

% gets the length of the name
numberofChar = length(name);

% checks to see if the first character of the name is a nunber
firstChar = name(1);
ascii = double(lower(firstChar));
number = {'1','2','3','4','5','6','7','8','9','0'};
num = strmatch(firstChar,number,'exact');

% returns an error if name is not in a valid form
if~(isempty(num))
    driverData.error{driverData.holdplace} = '-128,"Numeric data not allowed"';
    driverData.holdplace = driverData.holdplace + 1;
    beep;
elseif~((97 &lt;= ascii) &amp;&amp; (ascii &lt;= 122))
    driverData.error{driverData.holdplace} = '-101,"Invalid character"';
    driverData.holdplace = driverData.holdplace + 1;
    beep;
elseif(numberofChar &gt;= 13)
    driverData.error{driverData.holdplace} = '-112,"Program mnemonic too long"';
    driverData.holdplace = driverData.holdplace + 1;
    beep;
elseif(numberofChar &gt;= 9)
    driverData.error{driverData.holdplace} = '+783,"Arb waveform name too long';
    driverData.holdplace = driverData.holdplace + 1;
    beep;
elseif(isempty(idx))
    driverData.error{driverData.holdplace} = '+785,"Specified arb waveform does not exist"';
    driverData.holdplace = driverData.holdplace + 1;
    beep;
else
    driverData.arbitrarywaveform.currentwaveformname  = name;
end

set(get(obj, 'Parent'), 'DriverData', driverData);</MCode>
               </Code>
               <Description>INVOKE(obj, setwaveform, name) Changes the waveform to the specified arbitrary waveform</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>burstmod</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="BurstMod1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Cycles</Name>
               <Location>burstmod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
propertyValue = driverData.burstmod.cycles;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');

% checks to see if the user typed in a string value and then sets the 
% appropriate propertyValue
if(strcmpi(propertyValue,'min'))
    propertyValue = 1.0;
elseif(strcmpi(propertyValue,'max'))
    propertyValue = 50000.0;
end

driverData.burstmod.cycles = propertyValue;
set(get(obj, 'Parent'), 'DriverData', driverData);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="50000.0" Min="1.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="min"/>
                     <Enum Name="max" Value="max"/>
                     <Enum Name="infinity" Value="infinity"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the number of cycles to be output per burst(Trigger burst mode only). Select from one cycle to 50 000 cycles, in 1 cycles increments. The default is 1 cycle.</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>burstmod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
propertyValue = driverData.enabled{2};
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

beep on
driverData = get(get(obj, 'Parent'), 'DriverData');

% checks to see if another mode is enabled
idx = strmatch('on',driverData.enabled,'exact');

% stores an error if another mode is enabled and switches all other modes
% to 'off'
if(strcmpi(propertyValue,'on') &amp;&amp; ~isempty(idx) &amp;&amp; idx ~= 2)
    beep
    driverData.error{driverData.holdplace} = '-221,"Settings conflict; previous modulation has been disabled"';
    driverData.holdplace = driverData.holdplace + 1;
    driverData.enabled{idx} = 'off';
end
     
driverData.enabled{2} = propertyValue;
set(get(obj, 'Parent'), 'DriverData', driverData);
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="on" Value="on"/>
                     <Enum Name="off" Value="off"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>on</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Enable or disable burst modulation.   To ensure proper operation, you should enable the burst mode after you have set other modulation parameters. Only one modulation mode can be enabled at a time. When you enable the burst mode, the previous modulation mode is turned off.</Description>
            </Property>
            <Property>
               <Name>InternalRate</Name>
               <Location>burstmod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
propertyValue = driverData.burstmod.internalrate;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');

% checks to see if the user typed in a string value and then sets the 
% appropriate propertyValue
if(strcmpi(propertyValue,'min'))
    propertyValue = 0.01;
elseif(strcmpi(propertyValue,'max'))
    propertyValue = 50000.0;
end

driverData.burstmod.internalrate = propertyValue;
set(get(obj, 'Parent'), 'DriverData', driverData);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="50000.0" Min="0.01"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="min"/>
                     <Enum Name="max" Value="max"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.01</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the burst rate for internally triggered bursts.  The burst rate frequency defines the interval between bursts. Select from 10 mHz to 50 kHz. The default is 100 Hz.  The burst rate is used only when internal triggering is enables. The burst rate is ignored when single triggering or external triggering is enabled.  It is possible to specify a burst rate that is too fast for the function generator to output with the specified carrier frequency and burst count. If the burst rate is too high, the function generator will internally adjust it as needed to continuously re-trigger the burst. The adjustment is handled internally by the function generator.</Description>
            </Property>
            <Property>
               <Name>Phase</Name>
               <Location>burstmod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
propertyValue = driverData.burstmod.phase;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');

% checks to see if the user typed in a string value and then sets the 
% appropriate propertyValue
if(strcmpi(propertyValue,'min'))
    propertyValue = -360;
elseif(strcmpi(propertyValue,'max'))
    propertyValue = 360;
end

driverData.burstmod.phase = propertyValue;
set(get(obj, 'Parent'), 'DriverData', driverData);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="360.0" Min="-360.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="min"/>
                     <Enum Name="max" Value="max"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the starting phase for the burst (Trigger burst mode only).  Select from -360 degrees to +360, in .001 degree increments. The default is 0 degrees.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>burstmod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
propertyValue = driverData.burstmod.source;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
driverData.burstmod.source = propertyValue;
set(get(obj, 'Parent'), 'DriverData', driverData);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="external" Value="external"/>
                     <Enum Name="internal" Value="internal"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>external</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select the burst modulation source.  In the external gated burst mode, the output waveform is either "on" or "off" based on the level of the external signal applied to the rear panel.  When the internal burst source is selected, the external gated mode is disabled.  When the external gate source is selected, the output is enabled or disabled based on the logic level of the gate signal applied to the EXT TRIG terminal. The default is INT.  When external gate source is selected, the burst count, burst rate, burst phase, and burst trigger are ignored (these parameters are used only for burst mode).</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>calibration</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Calibration1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Count</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
propertyValue = driverData.calibration.count;
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the default count ( 0 ). Actual Value can not be calculated.</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
propertyValue = driverData.calibration.state;
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="on" Value="on"/>
                     <Enum Name="off" Value="off"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>on</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Query the secured state of the funtion generator.</Description>
            </Property>
            <Property>
               <Name>Message</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName) 
% Return a property value. 
%   This function is called to return the device or group object property 
%   value. If the property is a group property, OBJ is the group object. If 
%   the property is a base device property, OBJ is the device object.  

driverData = get(get(obj, 'Parent'), 'DriverData');
propertyValue = driverData.calibration.message;
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
 
beep on
driverData = get(get(obj, 'Parent'), 'DriverData');

% Error checking.
if ~ischar(propertyValue)
    error('MESSAGE must be a string.');
end

% Checks to see if the string entered by the user is longer then 40
% characters. If it is it is then truncated and the user is given an error
if( length(propertyValue) &gt; 40)
    i = 1;
    while(i &lt; 41)
        message(i) = propertyValue(i);
        i = 1 + i;
    end
    warning('ICDevice:longmessage',...
        'Your message may only be 40 characters, and will be truncated')
    beep
    driverData.error{driverData.holdplace} = '-223,"Too much data"';
    driverData.holdplace = driverData.holdplace + 1;
else
    message = propertyValue;
end

% Checks to see if the the power supply is unsecure if it is not, it
% returns an error.
if(strcmp(driverData.calibration.state,'off'))
    driverData.calibration.message = sprintf('"%s"',message);
else
    error('the power supply must be unsecure to set message')
end
 
set(get(obj, 'Parent'), 'DriverData', driverData);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Record calibration information about the function generator.</Description>
            </Property>
            <Property>
               <Name>Setup</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
propertyValue = driverData.calibration.setup;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
driverData.calibration.setup = propertyValue;
set(get(obj, 'Parent'), 'DriverData', driverData);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="84.0" Min="0.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Configure the function generator's internal state for each of the calibration steps to be performed.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>securedevice</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function securedevice(obj, calibrationCode, state)
% OBJ is the device object.
% code is the code to secure the instrument
 
beep on
driverData = get(get(obj, 'Parent'), 'DriverData');
 
% Parse inputs.
switch (nargin)
case 1
    error('CALIBRATIONCODE must be specified.');
case 2
    if(strcmp(calibrationCode,driverData.calibration.code)) 
    currentState = driverData.calibration.state;
    else
        beep
        driverData.error{driverData.holdplace} = '+703,"Invalid secure code"';
        driverData.holdplace = driverData.holdplace+1;
        set(get(obj, 'Parent'), 'DriverData', driverData);
        error('incorrect code')
    end
case 3
     if(strcmp(calibrationCode,driverData.calibration.code)) 
         % STATE can either be 'secure' or 'unsecure'.
           if ~any(strcmpi(state, {'secure', 'unsecure'}))
               error('STATE must be either ''secure'' or ''unsecure''.');
           end
   
        % Translating State into the expected current state numeric value.
           if strcmpi(state, 'secure')
               currentState = 'on';
           else
               currentState = 'off';
           end
     else
         beep
         driverData.error{driverData.holdplace} = '+703,"Invalid secure code"';
         driverData.holdplace = driverData.holdplace + 1;
         set(get(obj, 'Parent'), 'DriverData', driverData);
         error('incorrect code')
     end
otherwise
    error('Too many input arguments.');
end
 
% Error checking.
if ~ischar(calibrationCode)
    error('CALIBRATIONCODE must be a string.');
end
 
% Unsecure or secure the instrument.
driverData.calibration.state = currentState;
set(get(obj, 'Parent'), 'DriverData', driverData);
</MCode>
               </Code>
               <Description>SECUREDEVICE secure or unsecure the power supply for calibration  INVOKE(OBJ, 'securedevice','code','secure') to 'secure' the device after the calibration process.  INVOKE(OBJ, 'securedevice','code','unsecure') to ‘unsecure’ the device before calibration.</Description>
            </Method>
            <Method>
               <Name>setsecurecode</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setsecurecode(obj,secureCode)
% OBJ is the device object.
% SecureCode is the new code.
 
driverData = get(get(obj, 'Parent'), 'DriverData');
 
% Validating the code (12-character format).
if ~(isvarname(secureCode))
    error(['SECURECODE must be a character string with letters, ',...
           'digits and ' sprintf('\n') 'underscores. The first character ',...
           'in SECURECODE must be a letter.' sprintf('\n') 'The maximum length is 12 characters.']);
elseif ~(length(secureCode) &lt;= 12)
    beep
    driverData.error{driverData.holdplace} = '+704,"Secure code too long"';
    driverData.holdplace = driverData.holdplace + 1;
    set(get(obj, 'Parent'), 'DriverData', driverData);    
    error('The maximum length for SECURECODE is 12 characters.')
end
 
% Verifying that the device is unsecured before changing the code. 
state = driverData.calibration.state;
 
if (strcmp(state,'on'))
    error(['The device must be unsecured before changing the code.' sprintf('\n'),...
        'Type ''instrhelp(obj, ''securedevice'')'' for more information on how ' sprintf('\n'),...
        'to unsecure the device.']);
    return
end
 
% Set the secure code to the new code.
driverData.calibration.code = secureCode;
set(get(obj, 'Parent'), 'DriverData', driverData);
</MCode>
               </Code>
               <Description>SETSECURECDE To change the security code into a new one.  INVOKE(OBJ, 'newcode') to change the current security code to a new one.  Note: You must first unsecure the Fumction Generator using the old security code.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>display</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Display1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Enabled</Name>
               <Location>display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
propertyValue  = driverData.display.enabled;
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
driverData.display.enabled = propertyValue;
set(get(obj, 'Parent'), 'DriverData', driverData);
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="on" Value="on"/>
                     <Enum Name="off" Value="off"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>on</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Turn the front panel display on or off.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>clear</Name>
               <Location>display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function clear(obj)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
driverData.display.settext = '';
set(get(obj, 'Parent'), 'DriverData', driverData);
</MCode>
               </Code>
               <Description>INVOKE(obj, clear)  Clear the message displayed on the front panel.</Description>
            </Method>
            <Method>
               <Name>settext</Name>
               <Location>display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setText(obj,str) 

beep on
driverData = get(get(obj, 'Parent'), 'DriverData');
 
% Error checking.
if ~ischar(str)
    error('STR must be a string.');
end
 
% Checks to see if the string entered by the user is longer then 40 
% characters. If it is it is then truncated and the user is given an error
if( length(str) &gt; 40)
    i = 1;
    while(i &lt; 41)
        text(i) = str(i);
        i = 1 + i ;
    end
    warning('ICDevice:longmessage',...
        'Your message may only be 40 characters, and will be truncated');
    beep
    driverData.error{driverData.holdplace} = '-223,"Too much data"';
    driverData.holdplace = driverData.holdplace + 1;
else
    text = str;
end

driverData.display.settext = text;
set(get(obj, 'Parent'), 'DriverData', driverData);
</MCode>
               </Code>
               <Description>INVOKE(obj, settext, text) Display a message containing up to eleven characters on the front panel.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>frequencymod</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="FrequencyMod1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Enabled</Name>
               <Location>frequencymod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
propertyValue = driverData.enabled{3};</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

beep on
driverData = get(get(obj, 'Parent'), 'DriverData');

% checks to see if another mode is enabled
idx = strmatch('on',driverData.enabled,'exact');

% sets an error if another mode is enabled and switches all other modes 
% to 'off'
if(strcmpi(propertyValue,'on') &amp;&amp; ~isempty(idx) &amp;&amp; idx ~= 3)
    beep
    driverData.error{driverData.holdplace} = '-221,"Settings conflict; previous modulation has been disabled"';
    driverData.holdplace = driverData.holdplace + 1;
    driverData.enabled{idx} = 'off';
end
     
driverData.enabled{3} = propertyValue;
set(get(obj, 'Parent'), 'DriverData', driverData);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="on" Value="on"/>
                     <Enum Name="off" Value="off"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>on</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Disable or enable FM.   To ensure proper operation, you should enable FM after you have set up the other modulation parameters. Only one modulation mode can be enabled at a time. When you enable FM, the previous modulation mode is turned off.</Description>
            </Property>
            <Property>
               <Name>InternalDeviation</Name>
               <Location>frequencymod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
propertyValue = driverData.frequencymod.internaldeviation;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

beep on
driverData = get(get(obj, 'Parent'), 'DriverData');

% returns an error if the propertyValue conflicts with the carrier frequency
max = driverData.waveformMax;
if(propertyValue &gt; driverData.frequency )
    propertyValue = driverData.frequency;
    beep
    driverData.error{driverData.holdplace} = ' -221,"Settings conflict; fm deviation has been adjusted"';
    driverData.holdplace = driverData.holdplace + 1;
end
if((propertyValue + driverData.frequency) &gt; (max + 100000))
    propertyValue = max;
    beep
    driverData.error{driverData.holdplace} = ' -221,"Settings conflict; fm deviation has been adjusted"';
    driverData.holdplace = driverData.holdplace + 1;
end

% checks to see if the user typed in a string value and then sets the 
% appropriate propertyValue
if(strcmpi(propertyValue,'min'))
    propertyValue = 0.01;
elseif(strcmpi(propertyValue,'max'))
    propertyValue = driverData.frequency;
end

driverData.frequencymod.internaldeviation = propertyValue;
set(get(obj, 'Parent'), 'DriverData', driverData);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100000.0" Min="0.01"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="min"/>
                     <Enum Name="max" Value="max"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>100</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the peak frequency deviation in Hertz.  This value represents the variation in frequency of the modulating waveform.  from the carrier frequency.  Select from 10 mHz to 7.5 MHz. Default is 100 Hz.  The carrier frequency must always be greater than or equal to the peak Frequency deviation. If you attempt to set the deviation to a value greater than the carrier frequency (with FM enabled), the function generator will automatically adjust the deviation to equal the carrier frequency.  The sum of the carrier frequency and peak frequency deviation must be less than or equal to the maximum frequency for the selected function plus 100 kHz. If you attempt to set the deviation to an invalid value, the multimeter will automatically adjust the value to the maximum value allowed with the present carrier frequency.</Description>
            </Property>
            <Property>
               <Name>InternalFrequency</Name>
               <Location>frequencymod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
propertyValue = driverData.frequencymod.internalfrequenvy;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');

% checks to see if the user typed in a string value and then sets the 
% appropriate propertyValue
if(strcmpi(propertyValue,'min'))
    propertyValue = 0.01;
elseif(strcmpi(propertyValue,'max'))
    propertyValue = 10000.0;
end

driverData.frequencymod.internalfrequenvy = propertyValue;
set(get(obj, 'Parent'), 'DriverData', driverData);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="10000.0" Min="0.01"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="min"/>
                     <Enum Name="max" Value="max"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.01</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select the frequency of the modulating waveform.  Select from 10 mHz to 100 kHz. The default is 10 Hz.</Description>
            </Property>
            <Property>
               <Name>InternalWaveform</Name>
               <Location>frequencymod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
propertyValue = driverData.frequencymod.internalwaveform;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
driverData.frequencymod.internalwaveform = propertyValue;
set(get(obj, 'Parent'), 'DriverData', driverData);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="sin" Value="sin"/>
                     <Enum Name="square" Value="square"/>
                     <Enum Name="triangle" Value="triangle"/>
                     <Enum Name="ramp" Value="ramp"/>
                     <Enum Name="noise" Value="noise"/>
                     <Enum Name="user" Value="user"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>sin</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select the shape of the modulating function.  You can use the noise function as a modulating waveform. However, you cannot use the noise function as a carrier waveform. The default value is SIN.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>frequencysweep</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="FrequencySweep1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Enabled</Name>
               <Location>frequencysweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
propertyValue = driverData.enabled{4};</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

beep on
driverData = get(get(obj, 'Parent'), 'DriverData');

% checks to see if another mode is enabled
idx = strmatch('on',driverData.enabled,'exact');

% sets an error if another mode is enabled and switches all other modes 
% to 'off'
if(strcmpi(propertyValue,'on') &amp;&amp; ~isempty(idx) &amp;&amp; idx ~= 4)
    beep
    driverData.error{driverData.holdplace} = '-221,"Settings conflict; previous modulation has been disabled"';
    driverData.holdplace = driverData.holdplace + 1;
    driverData.enabled{idx} = 'off';
end
     
driverData.enabled{4} = propertyValue;
set(get(obj, 'Parent'), 'DriverData', driverData);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="on" Value="on"/>
                     <Enum Name="off" Value="off"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>On</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Enable or disable the sweep mode.  To ensure proper operation, you should enable AM after you have set up the other modulation parameters. Only one modulation mode can be enabled at a time. When you enable AM the previous modulation is turned off.</Description>
            </Property>
            <Property>
               <Name>Spacing</Name>
               <Location>frequencysweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
propertyValue = driverData.frequencysweep.spacing;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
driverData.frequencysweep.spacing = propertyValue;
set(get(obj, 'Parent'), 'DriverData', driverData);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="linear" Value="linear"/>
                     <Enum Name="log" Value="log"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>linear</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select the linear or the algorithmic spacing for the sweep.  The default is linear.</Description>
            </Property>
            <Property>
               <Name>Start</Name>
               <Location>frequencysweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
propertyValue = driverData.frequencysweep.start;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');

% checks to see if the user typed in a string value and then sets the 
% appropriate propertyValue
if(strcmpi(propertyValue,'min'))
    propertyValue = 0.01;
elseif(strcmpi(propertyValue,'max'))
    propertyValue = 1.5E7;
end

driverData.frequencysweep.start = propertyValue;
set(get(obj, 'Parent'), 'DriverData', driverData);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="1.5E7" Min="0.01"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="min"/>
                     <Enum Name="max" Value="max"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.01</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the start frequency   Select from 10 mHz to 15 MHz. the sweep is phase continuous over the full frequency range. The default is 100 Hz.]  Executing the *RST command does not set the start and stop frequency to their default values. Instead the restart operation set the start frequency to 10 mHz(minimum) and the stop frequency to 15 MHz (maximum).</Description>
            </Property>
            <Property>
               <Name>Stop</Name>
               <Location>frequencysweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
propertyValue = driverData.frequencysweep.stop;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');

% checks to see if the user typed in a string value and then sets the 
% appropriate propertyValue
if(strcmpi(propertyValue,'min'))
    propertyValue = 0.01;
elseif(strcmpi(propertyValue,'max'))
    propertyValue = 1.5E7;
end

driverData.frequencysweep.stop = propertyValue;
set(get(obj, 'Parent'), 'DriverData', driverData);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="max" Value="max"/>
                     <Enum Name="min" Value="min"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="1.5E7" Min="0.01"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1000</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the stop frequency.   Select from 10mHz to 15 MHz. The sweep is phase is continuous over the full frequency range. The default is 1 kHz.  Executing the *RST command does not set the start and stop frequency to their default values. Instead the restart operation set the start frequency to 10 mHz(minimum) and the stop frequency to 15 MHz (maximum).</Description>
            </Property>
            <Property>
               <Name>Time</Name>
               <Location>frequencysweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
propertyValue = driverData.frequencysweep.time;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');

% checks to see if the user typed in a string value and then sets the 
% appropriate propertyValue
if(strcmpi(propertyValue,'min'))
    propertyValue = 0.0010;
elseif(strcmpi(propertyValue,'max'))
    propertyValue = 500.0;
end

driverData.frequencysweep.time = propertyValue;
set(get(obj, 'Parent'), 'DriverData', driverData);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="500.0" Min="0.0010"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="min"/>
                     <Enum Name="max" Value="max"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the number of seconds required to sweep from start of the frequency sweep to stop frequency.  Select from 1 ms to 500 seconds.  The number of frequency points in the sweep depends on the sweep time you select and is automatically calculated by the function generator.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>fskmod</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="FSKmod1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Enabled</Name>
               <Location>fskmod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
propertyValue = driverData.enabled{5};</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

beep on
driverData = get(get(obj, 'Parent'), 'DriverData');

% checks to see if another mode is enabled
idx = strmatch('on',driverData.enabled,'exact');

% stores an error if another mode is enabled and switches all other modes 
% to 'off'
if(strcmpi(propertyValue,'on') &amp;&amp; ~isempty(idx) &amp;&amp; idx ~= 5)
    beep
    driverData.error{driverData.holdplace} = '-221,"Settings conflict; previous modulation has been disabled"';
    driverData.holdplace = driverData.holdplace + 1;
    driverData.enabled{idx}  = 'off';
end
     
driverData.enabled{5} = propertyValue;
set(get(obj, 'Parent'), 'DriverData', driverData);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="on" Value="on"/>
                     <Enum Name="off" Value="off"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>on</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Disable or enable the FSK mode.   To ensure proper operation, you should enable AM after you have set up the other modulation parameters. Only one modulation mode can be enabled at a time. When you enable AM the previous modulation is turned off.</Description>
            </Property>
            <Property>
               <Name>Frequency</Name>
               <Location>fskmod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
propertyValue = driverData.fskmod.frequency;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');

% checks to see if the user typed in a string value and then sets the 
% appropriate propertyValue
if(strcmpi(propertyValue,'min'))
    propertyValue = 0.01;
elseif(strcmpi(propertyValue,'max'))
    propertyValue = 1.5E7;
end

driverData.fskmod.frequency = propertyValue;
set(get(obj, 'Parent'), 'DriverData', driverData);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="1.5E7" Min="0.01"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="min"/>
                     <Enum Name="max" Value="max"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.01</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the FSK "hop" frequency from 10 mHz to 15 MHz.  The default value is 100 Hz.</Description>
            </Property>
            <Property>
               <Name>InternalRate</Name>
               <Location>fskmod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
propertyValue = driverData.fskmod.internalrate;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');

% checks to see if the user typed in a string value and then sets the 
% appropriate propertyValue
if(strcmpi(propertyValue,'min'))
    propertyValue = 0.01;
elseif(strcmpi(propertyValue,'max'))
    propertyValue = 50000.0;
end

driverData.fskmod.internalrate = propertyValue;
set(get(obj, 'Parent'), 'DriverData', driverData);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="50000.0" Min="0.01"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="min"/>
                     <Enum Name="max" Value="max"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>10</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the rate at which the internal frequency "shifts" between the carrier and hop frequency.   Select from 10 mHz to 50 kHz, The default is 10 Hz.  The FSK rate is ignored when the external source is selected.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>fskmod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
propertyValue = driverData.fskmod.source;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
driverData.fskmod.source = propertyValue;
set(get(obj, 'Parent'), 'DriverData', driverData);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="internal" Value="internal"/>
                     <Enum Name="external" Value="external"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>internal</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select an internal or external FSK.  The default is INT.  When the internal source is selected, the rate at which output frequency "shifts" between carrier frequency and hop frequency is determined by the FSK rate specified.  When external source is selected, the output frequency is determined by the signal level on the rear-panel FSK terminal. When a low "TTL" is level is present, the carrier frequency is output.  The maximum external FSK rate is 1 MHz.  The external annunciator turns on when the function generator is waiting for external trigger signal.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>system</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="System1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ByteOrder</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
propertyValue = driverData.system.byteorder;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
driverData.system.byteorder = propertyValue;
set(get(obj, 'Parent'), 'DriverData', driverData);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="normal" Value="normal"/>
                     <Enum Name="swapped" Value="swappped"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>normal</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select the byte order for binary transfers in the block mode using the DATA:DAC command.</Description>
            </Property>
            <Property>
               <Name>Version</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

driverData = get(get(obj, 'Parent'), 'DriverData');
propertyValue = driverData.system.version;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Query the function generator to determine the present SCPI version.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>beep</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function beep(obj)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.
 
beep on
beep</MCode>
               </Code>
               <Description>INVOKE(obj,beep) to issue asingle beep immediately.</Description>
            </Method>
            <Method>
               <Name>deletestate</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function loadstate(obj,location)  
% OBJ is the group object. 
% LOCATION is the specified storage location 
 
driverData = get(get(obj, 'Parent'), 'DriverData');
 
% Error checking
% LOCATION must be a scalar and between 1 and 5, inclusive.
if ~isnumeric(location) 
    error('LOCATION must be numeric');
elseif  location &gt;5 || location &lt;1
    error('LOCATION must be between 1 and 5 inclusive');
end
 
savefile = sprintf('generic_agilent_33120a_location%i.mat',location);
delete (savefile)
 
set(get(obj, 'Parent'), 'DriverData', driverData);
</MCode>
               </Code>
               <Description>INVOKE(obj,deletestate,location) to delete a previously stored state.</Description>
            </Method>
            <Method>
               <Name>loadstate</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function loadstate(obj,location)
% OBJ is the group object.
% LOCATION is the specified storage location
 
driverData = get(get(obj, 'Parent'), 'DriverData');
 
% Error checking
% LOCATION must be a scalar and between 1 and 5, inclusive.
if ~isnumeric(location) 
    error('LOCATION must be numeric');
elseif  location &gt;5 || location &lt;1
    error('LOCATION must be between 1 and 5 inclusive');
end
 
savefile = sprintf('generic_agilent_33120a_location%i.mat',location);
load (savefile)
 
set(get(obj, 'Parent'), 'DriverData', driverData);
</MCode>
               </Code>
               <Description>INVOKE(obj,loadstate,location) to recall a previously stored state.</Description>
            </Method>
            <Method>
               <Name>savestate</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function savestate(obj,location)
% OBJ is the group object.
% LOCATION is the specified storage location
 
driverData = get(get(obj, 'Parent'), 'DriverData');
 
% Error checking
% LOCATION must be a scalar and between 1 and 5, inclusive.
if ~isnumeric(location)
    error('LOCATION must be numeric');
elseif  location &gt;5 || location &lt;1
    error('LOCATION must be between 1 and 5 inclusive');
end
 
savefile = sprintf('generic_agilent_33120a_location%i.mat',location);
save(savefile, 'driverData')
 
set(get(obj, 'Parent'), 'DriverData', driverData);
</MCode>
               </Code>
               <Description>INVOKE(obj,savestate,location) to store an instrument configuration at a LOCATION.</Description>
            </Method>
         </MethodInfo>
      </Group>
   </GroupInfo>
</MATLABInstrumentDriver>
