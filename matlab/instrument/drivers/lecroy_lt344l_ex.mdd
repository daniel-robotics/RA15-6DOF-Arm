<?xml version="1.0" encoding="utf-8"?>
<MATLABInstrumentDriver>
   <FileVersion>1.0</FileVersion>
   <DriverName>D:\sandbox\matlab\toolbox\instrument\instrument\drivers\lecroy_lt344l.mdd</DriverName>
   <DriverType>MATLAB interface object</DriverType>
   <InstrumentType>Oscilloscope</InstrumentType>
   <InstrumentManufacturer>LeCroy</InstrumentManufacturer>
   <InstrumentModel>LT344L</InstrumentModel>
   <InstrumentVersion>1.0</InstrumentVersion>
   <Identify>*IDN?</Identify>
   <Reset>*RST;COMM_HEADER OFF; </Reset>
   <Selftest>*TST?</Selftest>
   <Error>*ESR?; CMR?</Error>
   <CreateInitCode>
      <Code>function init(obj)
% This method is called after the object is created.
% OBJ is the device object.
% End of function definition - DO NOT EDIT

% Extract the interface object.
interface = get(obj, 'Interface');

% Configure the buffer size to allow for waveform transfer.
% 21000 is the maximum allowed points that can be transferred to the instrument
set(interface, 'InputBufferSize', 21000);
set(interface, 'OutputBufferSize',21000);

% initializes userData
userData = get(obj, 'UserData');
userData.measurment.type = 'FREQ';

% valid colors for scope
userData.color = {'WHITE','CYAN','YELLOW','GREEN','MAGENTA','BLUE','RED','LTGRAY','GRAY','SLGRAY','CHGRAY','DKCYAN','CREAM','SAND','AMBER','OLIVE','LTGREEN','JADE','LMGREEN','APGREEN','EMGREEN','GRGREEN','OCSPRAY','ICEBLUE','PASTBLUE','PALEBLUE','SKYBLUE','ROYLBLUE','DEEPBLUE','NAVY','PLUM','PURPLE','AMETHYST','FUCHSIA','RASPBRY','NEONPINK','PALEPINK','PINK','VERMIL','ORANGE','CERISE','KHAKI','BROWN','BLACK'} ;

% all sources are set to channel one as a default
userData.measurment.source = 'C1';
userData.source = 'C1';

% initializes the waveform header to an empty array
userData.header = [];
set(obj, 'UserData', userData);
</Code>
   </CreateInitCode>
   <ConnectInitCode>
      <Type>MCode</Type>
      <Code>function init(obj)
% This method is called after the object is connected.
% OBJ is the device object.
% End of function definition - DO NOT EDIT

% get the interface
interface = get(obj, 'interface');

% If HEADER is not OFF then responses retrieved from
% the device will not match what is expected, and the driver will not
% function properly.

fprintf(interface, 'COMM_HEADER OFF');

% Clear the Standard Event Status Register (SESR) to remove possible Power
% on event, which would otherwise be returned by getError.
query(interface, ' CMR?');

userData = get(obj, 'UserData');
userData.connect = true;
set(obj, 'UserData', userData);
</Code>
   </ConnectInitCode>
   <CleanupCode>
      <Type>MCode</Type>
      <Code>function cleanup(obj)
% This function is called before the object is disconnected.
% OBJ is the device object.
% End of function definition - DO NOT EDIT

 
userData = get(obj, 'UserData');
userData.connect = false;
set(obj, 'UserData', userData);
</Code>
   </CleanupCode>
   <GroupInfo>
      <Group>
         <Name>parent</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="parent1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Date</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the interface
interface = get(obj,'Interface');

% queries the instrument
fprintf(interface,'DATE?');

% retrieve the value from the instrument
propertyValue = fscanf(interface);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Queries the oscilloscope's internal date. Returns date in the form of day, month, year, hour, min, sec.</Description>
            </Property>
            <Property>
               <Name>RearOutput</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>Rear_OUTput</ConfigureCommand>
                     <QueryCommand>REAR_OUTPUT?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="off" Value="OFF"/>
                     <Enum Name="passFail" Value="PF"/>
                     <Enum Name="singlePulse" Value="PULSE"/>
                     <Enum Name="triggerOut" Value="TRIG"/>
                     <Enum Name="triggerReady" Value="TRDY"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the oscilloscope rear output.</Description>
            </Property>
            <Property>
               <Name>ResponseHeaderState</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand/>
                     <QueryCommand>COMM_HEADER?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="on" Value="ON"/>
                     <Enum Name="off" Value="OFF"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Queries the Response Header Enable State that causes the oscilloscope to either include or omit headers on query responses.

NOTE: Although the property is not truly read only for the instrument, the value must be 'off' for the driver to operate correctly.  As a result, it is set as read-only for the driver.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>autoset</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="AUTO_SETUP" Output="false"/>
                  </Commands>
               </Code>
               <Description>AUTOSET Automatic parameter adjustment.

INVOKE(OBJ, 'autoset') causes the oscilloscope to adjust its vertical, horizontal, and trigger controls to display a more stable waveform.</Description>
            </Method>
            <Method>
               <Name>buzzer</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function buzzer(obj,state)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

% get the interface
interface = get(obj,'Interface');

% converts the user input to an insturment command
idx = strmatch(lower(state), {'on','off','beep'}, 'exact');
if (isempty(idx))
    error('instrument:method:invalidValue','State must be one of: ON, OFF, BEEP');
end
 
% determines what code to send to the instrument
to_interface = sprintf('BUZZ %s',upper(state));

% sets the instrument
fprintf(interface,to_interface);</MCode>
               </Code>
               <Description>BUZZER controls the built-in piezo-electric buzz.

INVOKE(OBJ,'buzzer',STATE) state can be BEEP, ON, or  OFF.</Description>
            </Method>
            <Method>
               <Name>drivertest</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function varargout = drivertest(obj)
%   LECROYTEST Code for testing a MATLAB instrument driver.
%
%   This is the machine generated code that tests a MATLAB instrument driver, 
%   lecroy_lt344l_ex.mdd.
%   
%   The test consists of multiple test steps that can test the MATLAB instrument
%   drivers functions and properties.
%   
%   The test code was generated with the MIDTEST GUI. For more information
%   on MIDTEST, type 'instrhelp midtest' at the MATLAB command prompt.
%   
%   To run the test, type the name of the file, LeCroyTest, at the MATLAB
%   command prompt.
% 
%   The file, LECROYTEST.M must be on your MATLAB PATH. For additional information 
%   on setting your MATLAB PATH, type 'help addpath' at the MATLAB command 
%   prompt.
% 
%   Example:
%       lecroytest;
% 
%   See also ICDEVICE, MIDTEST.
% 
 
%   Creation time: 11-Nov-2005 10:26:40
 

% Wrap entire test in try catch.
try
fprintf('Test: Lecroy LT344I driver test\n');
fprintf(['Start time: ' datestr(now) '\n']);

% Initialize variables.
varargout              = {};
noErrorMsg             = '0;0';
stepWarningOccurred    = false;
warningOccurred        = false;
errorOccurred          = false;

% Construct the device object.
deviceObj = obj;

% Test Step 1: devicereset - Function (Function Test Step)

errorcode = false;
try
    % Execute the function.
    devicereset(deviceObj);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 2: Properties Sweep - 1 (Properties Sweep Test Step)
% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Date property in the parent group.\n');
 
try
    % Query the value for the read-only property, Date.
    get(deviceObj, 'Date');

    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmp(result, noErrorMsg);

    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while getting the property value.\n');
    fprintf([lasterr,'\n']);
end

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing InstrumentModel property in the parent group.\n');
 
try
    % Query the value for the read-only property, InstrumentModel.
    get(deviceObj, 'InstrumentModel');

    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmp(result, noErrorMsg);

    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while getting the property value.\n');
    fprintf([lasterr,'\n']);
end

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing RearOutPut property in the parent group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the RearOutPut property.
validValues = {'off', 'passFail', 'triggerOut', 'triggerReady'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        set(deviceObj, 'RearOutPut', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(deviceObj, 'RearOutPut');

            % Compare to the expected value.
            errorcode = ~isequal(tempOut, validValues{i});
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                if isnumeric(tempOut)
                    fprintf(['Actual value: ' num2str(tempOut), '\n']);
                else
                    fprintf(['Actual value: ' tempOut, '\n']);
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}), '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing ResponseHeaderState property in the parent group.\n');
 
try
    % Query the value for the read-only property, ResponseHeaderState.
    get(deviceObj, 'ResponseHeaderState');

    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmp(result, noErrorMsg);

    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while getting the property value.\n');
    fprintf([lasterr,'\n']);
end

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Control property in the Acquisition group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Control property.
validValues = {'run', 'stop'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Acquisition');
        set(groupObj, 'Control', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Control'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Delay property in the Acquisition group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Delay property.
validValues = {-10000.0,100.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        
        groupObj = get(deviceObj, 'Acquisition');
        set(groupObj, 'TimeBase', 1);
        
        % Configure the property.
        groupObj = get(deviceObj, 'Acquisition');
        set(groupObj, 'Delay', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Delay'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing State property in the Acquisition group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the State property.
validValues = {'stop', 'run'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Acquisition');
        set(groupObj, 'State', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'State'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Timebase property in the Acquisition group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Timebase property.
validValues = {1.0E-9, 2.0E-9, 5.0E-9, 1.0E-8, 2.0E-8, 5.0E-8, 1.0E-7, 2.0E-7, 5.0E-7, 1.0E-6, 2.0E-6, 5.0E-6, 1.0E-5, 2.0E-5, 5.0E-5, 1.0E-4, 2.0E-4, 5.0E-4, 0.0010, 0.0020, 0.0050, 0.01, 0.02, 0.05, 0.1, 0.2, 0.5, 1.0, 2.0, 5.0, 10.0, 20.0, 50.0, 100.0, 200.0, 500.0, 1000.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Acquisition');
        set(groupObj, 'Timebase', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Timebase'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% changes the enviroment on the instrument so that BandwidthLimit settings
% can be used
groupObj = get(deviceObj, 'Channel');
get(groupObj,'state');

% Post information on the property being tested.
fprintf('Testing BandwidthLimit property in the Channel group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the BandwidthLimit property.
% validValues = {'on', 'off', '200mhz'};
validValues = {'off'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Channel');
        set(groupObj, 'BandwidthLimit', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'BandwidthLimit'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Coupling property in the Channel group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Coupling property.
validValues = {'ac', 'dc', 'ground', '50ohms'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Channel');
        set(groupObj, 'Coupling', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Coupling'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Position property in the Channel group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Position property.
validValues = {-1.0, 1.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Channel');
        set(groupObj, 'Position', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Position'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Probe property in the Channel group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Probe property.
validValues = {1.0, 2.0, 5.0, 10.0, 20.0, 25.0, 50.0, 100.0, 200.0, 500.0, 1000.0, 10000.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Channel');
        set(groupObj, 'Probe', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Probe'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Scale property in the Channel group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Scale property.
validValues = {0.0020, 10.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Channel');
        set(groupObj, 'Scale', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Scale'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing State property in the Channel group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the State property.
validValues = {'off', 'on'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Channel');
        set(groupObj, 'State', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'State'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing CursorType property in the Cursor group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the CursorType property.
validValues = {'none', 'custom', 'fail', 'horizontalAbsolute', 'standardTimeParameters', 'horizontalRelative', 'pass', 'verticalAbsolute', 'standardVoltageParameters', 'verticalRelative'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Cursor');
        set(groupObj, 'CursorType', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'CursorType'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing HorizontalBarDelta property in the Cursor group.\n');
 
try
    % Query the value for the read-only property, HorizontalBarDelta.
    groupObj = get(deviceObj, 'Cursor');
    get(groupObj, {'HorizontalBarDelta'});

    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmp(result, noErrorMsg);

    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while getting the property value.\n');
    fprintf([lasterr,'\n']);
end

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Source property in the Cursor group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Source property.
validValues = {'channel1', 'channel2', 'channel3', 'channel4', 'traceA', 'traceB', 'traceC', 'traceD'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Cursor');
        set(groupObj, 'Source', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Source'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing VerticalBarDelta property in the Cursor group.\n');
 
try
    % Query the value for the read-only property, VerticalBarDelta.
    groupObj = get(deviceObj, 'Cursor');
    get(groupObj, {'VerticalBarDelta'});

    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmp(result, noErrorMsg);

    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while getting the property value.\n');
    fprintf([lasterr,'\n']);
end

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing BackgroundColor property in the Display group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the BackgroundColor property.
validValues = {'WHITE','CYAN','YELLOW','GREEN','MAGENTA','BLUE','RED','LTGRAY','GRAY','SLGRAY','CHGRAY','DKCYAN','CREAM','SAND','AMBER','OLIVE','LTGREEN','JADE','LMGREEN','APGREEN','EMGREEN','GRGREEN','OCSPRAY','ICEBLUE','PASTBLUE','PALEBLUE','SKYBLUE','ROYLBLUE','DEEPBLUE','NAVY','PLUM','PURPLE','AMETHYST','FUCHSIA','RASPBRY','NEONPINK','PALEPINK','PINK','VERMIL','ORANGE','CERISE','KHAKI','BROWN','BLACK'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Display');
        set(groupObj, 'BackgroundColor', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = upper(get(groupObj, {'BackgroundColor'}));

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Contrast property in the Display group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Contrast property.
validValues = {0.0, 10.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 100.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Display');
        set(groupObj, 'Contrast', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Contrast'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing CursorColor property in the Display group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the CursorColor property.
validValues = {'WHITE','CYAN','YELLOW','GREEN','MAGENTA','BLUE','RED','LTGRAY','GRAY','SLGRAY','CHGRAY','DKCYAN','CREAM','SAND','AMBER','OLIVE','LTGREEN','JADE','LMGREEN','APGREEN','EMGREEN','GRGREEN','OCSPRAY','ICEBLUE','PASTBLUE','PALEBLUE','SKYBLUE','ROYLBLUE','DEEPBLUE','NAVY','PLUM','PURPLE','AMETHYST','FUCHSIA','RASPBRY','NEONPINK','PALEPINK','PINK','VERMIL','ORANGE','CERISE','KHAKI','BROWN','BLACK'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Display');
        set(groupObj, 'CursorColor', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = upper(get(groupObj, {'CursorColor'}));

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Format property in the Display group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Format property.
validValues = {'xy', 'yt'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Display');
        set(groupObj, 'Format', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Format'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Grid property in the Display group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Grid property.
validValues = {'single', 'dual', 'quad', 'octal'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Display');
        set(groupObj, 'Grid', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Grid'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing GridColor property in the Display group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the GridColor property.
validValues = {'WHITE','CYAN','YELLOW','GREEN','MAGENTA','BLUE','RED','LTGRAY','GRAY','SLGRAY','CHGRAY','DKCYAN','CREAM','SAND','AMBER','OLIVE','LTGREEN','JADE','LMGREEN','APGREEN','EMGREEN','GRGREEN','OCSPRAY','ICEBLUE','PASTBLUE','PALEBLUE','SKYBLUE','ROYLBLUE','DEEPBLUE','NAVY','PLUM','PURPLE','AMETHYST','FUCHSIA','RASPBRY','NEONPINK','PALEPINK','PINK','VERMIL','ORANGE','CERISE','KHAKI','BROWN','BLACK'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Display');
        set(groupObj, 'GridColor', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = upper(get(groupObj, {'GridColor'}));

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Neutralcolor property in the Display group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Neutralcolor property.
validValues = {'WHITE','CYAN','YELLOW','GREEN','MAGENTA','BLUE','RED','LTGRAY','GRAY','SLGRAY','CHGRAY','DKCYAN','CREAM','SAND','AMBER','OLIVE','LTGREEN','JADE','LMGREEN','APGREEN','EMGREEN','GRGREEN','OCSPRAY','ICEBLUE','PASTBLUE','PALEBLUE','SKYBLUE','ROYLBLUE','DEEPBLUE','NAVY','PLUM','PURPLE','AMETHYST','FUCHSIA','RASPBRY','NEONPINK','PALEPINK','PINK','VERMIL','ORANGE','CERISE','KHAKI','BROWN','BLACK'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Display');
        set(groupObj, 'Neutralcolor', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = upper(get(groupObj, {'Neutralcolor'}));

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing OverlayColor property in the Display group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the OverlayColor property.
validValues = {'WHITE','CYAN','YELLOW','GREEN','MAGENTA','BLUE','RED','LTGRAY','GRAY','SLGRAY','CHGRAY','DKCYAN','CREAM','SAND','AMBER','OLIVE','LTGREEN','JADE','LMGREEN','APGREEN','EMGREEN','GRGREEN','OCSPRAY','ICEBLUE','PASTBLUE','PALEBLUE','SKYBLUE','ROYLBLUE','DEEPBLUE','NAVY','PLUM','PURPLE','AMETHYST','FUCHSIA','RASPBRY','NEONPINK','PALEPINK','PINK','VERMIL','ORANGE','CERISE','KHAKI','BROWN','BLACK'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Display');
        set(groupObj, 'OverlayColor', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = upper(get(groupObj, {'OverlayColor'}));

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Persistence property in the Display group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Persistence property.
validValues = {'infinite', 0.5, 1.0, 2.0, 5.0, 10.0, 20.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Display');
        set(groupObj, 'Persistence', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Persistence'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing ColorScheme property in the Display group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the ColorScheme property.
validValues = {'1', '2', '3', '4', '5', '6', 'U1', 'U2', 'U3', 'U4'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Display');
        set(groupObj, 'ColorScheme', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'ColorScheme'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Style property in the Display group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Style property.
validValues = {'dots', 'vectors'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Display');
        set(groupObj, 'Style', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Style'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing TextColor property in the Display group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the TextColor property.
validValues = {'WHITE','CYAN','YELLOW','GREEN','MAGENTA','BLUE','RED','LTGRAY','GRAY','SLGRAY','CHGRAY','DKCYAN','CREAM','SAND','AMBER','OLIVE','LTGREEN','JADE','LMGREEN','APGREEN','EMGREEN','GRGREEN','OCSPRAY','ICEBLUE','PASTBLUE','PALEBLUE','SKYBLUE','ROYLBLUE','DEEPBLUE','NAVY','PLUM','PURPLE','AMETHYST','FUCHSIA','RASPBRY','NEONPINK','PALEPINK','PINK','VERMIL','ORANGE','CERISE','KHAKI','BROWN','BLACK'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Display');
        set(groupObj, 'TextColor', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = upper(get(groupObj, {'TextColor'}));

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing WarningColor property in the Display group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the WarningColor property.
validValues = {'WHITE','CYAN','YELLOW','GREEN','MAGENTA','BLUE','RED','LTGRAY','GRAY','SLGRAY','CHGRAY','DKCYAN','CREAM','SAND','AMBER','OLIVE','LTGREEN','JADE','LMGREEN','APGREEN','EMGREEN','GRGREEN','OCSPRAY','ICEBLUE','PASTBLUE','PALEBLUE','SKYBLUE','ROYLBLUE','DEEPBLUE','NAVY','PLUM','PURPLE','AMETHYST','FUCHSIA','RASPBRY','NEONPINK','PALEPINK','PINK','VERMIL','ORANGE','CERISE','KHAKI','BROWN','BLACK'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Display');
        set(groupObj, 'WarningColor', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = upper(get(groupObj, {'WarningColor'}));

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing MeasurementType property in the Measurement group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the MeasurementType property.
validValues = {'frequency', 'mean', 'period', 'peak2peak', 'crms', 'amplitude', 'area', 'base'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Measurement');
        set(groupObj, 'MeasurementType', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'MeasurementType'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Source property in the Measurement group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Source property.
validValues = {'channel1', 'channel2', 'channel3', 'channel4'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Measurement');
        set(groupObj, 'Source', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Source'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Value property in the Measurement group.\n');
 
try
    % Query the value for the read-only property, Value.
    groupObj = get(deviceObj, 'Measurement');
    get(groupObj, {'Value'});

    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmp(result, noErrorMsg);

    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while getting the property value.\n');
    fprintf([lasterr,'\n']);
end

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Max property in the Sequence group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Reset the device
devicereset(deviceObj);

% Valid values for the Max property.
validValues = {50.0, 100.0, 250.0, 500.0, 1000.0, 2500.0, 5000.0, 10000.0, 25000.0, 50000.0, 100000.0, 250000.0, 500000.0};

% Test all supported values.
for i = 1:length(validValues)
    try

        % Configure the property.
        groupObj = get(deviceObj, 'Sequence');
        set(groupObj, 'Max', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Max'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';

            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);

            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end

                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Mode property in the Sequence group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Mode property.
validValues = {'on', 'off'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Sequence');
        set(groupObj, 'Mode', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Mode'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Segment property in the Sequence group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Segment property.
validValues = {50.0, 200.0, 500.0, 2000.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Sequence');
        set(groupObj, 'Segment', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Segment'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Coupling property in the Trigger group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Coupling property.
validValues = {'ac', 'dc', 'highFreqRejection', 'lowFreqRejection'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Trigger');
        set(groupObj, 'Coupling', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Coupling'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% get the interface
interface = get(deviceObj,'Interface');
% change the settings of trig so that holdoff can be used
fprintf(interface,'TRig_SElect EDGE,HT,TI')

% Post information on the property being tested.
fprintf('Testing Holdoff property in the Trigger group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Holdoff property.
validValues = {1.0E-8, 10.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Trigger');
        
        % changes the trigger settings so that you can be in the correct
        % environment

        set(groupObj, 'TriggerType', 'edge')
        set(groupObj, 'HoldType', 'time')
        set(groupObj, 'Holdoff', validValues{i});
        
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Holdoff'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing HoldType property in the Trigger group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the HoldType property.
validValues = {'time', 'timeWithin', 'event', 'pulseSmaller', 'pulseLarger', 'intervalSmaller', 'intervalLarger', 'pulseWidthWindow', 'intervalWidthWindow', 'off'};

% Test all supported values.
for i = 1:length(validValues)
    try
      % sets the trigger type so that hold type can be changed 
        switch validValues{i}
            case {'time','event','off'}
                dependentValue = 'edge';
            case {'pulseSmaller','pulseLarger','pulseWidthWindow'}
                dependentValue = 'glitch';
            case {'intervalSmaller','intervalLarger','intervalWidthWindow'}
                dependentValue = 'interval';
            case {'timeWithin'}
                dependentValue = 'stateQualified';
        end
        % Configure the property.  
        groupObj = get(deviceObj, 'Trigger');
        set(groupObj, 'TriggerType', dependentValue)
        set(groupObj, 'HoldType', validValues{i});
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'HoldType'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Level property in the Trigger group.\n');

% Overall error status for all settings.
finalerrorcode = false;

groupObj = get(deviceObj, 'Channel');
set(groupObj, 'Scale', 10);

% Valid values for the Level property.
validValues = {-50.0, 50.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Trigger');
        set(groupObj, 'Level', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Level'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Mode property in the Trigger group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Mode property.
validValues = {'auto', 'run', 'stop'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Trigger');
        set(groupObj, 'Mode', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Mode'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Slope property in the Trigger group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Slope property.
validValues = {'falling', 'rising', 'window'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Trigger');
        set(groupObj, 'Slope', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Slope'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Source property in the Trigger group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Source property.
validValues = {'channel1', 'channel2', 'external', 'external10', 'channel3', 'channel4', 'acline'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Trigger');

        % changes the trigger settings so that you can be in the correct
        % environment
        set(groupObj, 'TriggerType', 'edge')
        
        set(groupObj, 'Source', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Source'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing TriggerType property in the Trigger group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the TriggerType property.
validValues = {'edge', 'drop', 'glitch', 'interval', 'stateQualified', 'edgeQualified'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Trigger');
        set(groupObj, 'TriggerType', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'TriggerType'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Window property in the Trigger group.\n');
 
try
    % Query the value for the read-only property, Window.
    groupObj = get(deviceObj, 'Trigger');
    get(groupObj, {'Window'});

    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmp(result, noErrorMsg);

    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while getting the property value.\n');
    fprintf([lasterr,'\n']);
end

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing ByteOrder property in the Waveform group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the ByteOrder property.
validValues = {'bigEndian', 'littleEndian'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Waveform');
        set(groupObj, 'ByteOrder', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'ByteOrder'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing FirstPoint property in the Waveform group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the FirstPoint property.
validValues = {0.0, 2500.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Waveform');
        set(groupObj, 'FirstPoint', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'FirstPoint'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Precision property in the Waveform group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Precision property.
validValues = { 'int16', 'int8'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Waveform');
        set(groupObj, 'Precision', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Precision'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 3: devicereset - Function (Function Test Step)

errorcode = false;
try
    % Execute the function.
    devicereset(deviceObj);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 4: Properties Sweep - 2 (Properties Sweep Test Step)
% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Date property in the parent group.\n');
 
try
    % Query the value for the read-only property, Date.
    get(deviceObj, 'Date');

    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmp(result, noErrorMsg);

    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while getting the property value.\n');
    fprintf([lasterr,'\n']);
end

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing InstrumentModel property in the parent group.\n');
 
try
    % Query the value for the read-only property, InstrumentModel.
    get(deviceObj, 'InstrumentModel');

    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmp(result, noErrorMsg);

    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while getting the property value.\n');
    fprintf([lasterr,'\n']);
end

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing ResponseHeaderState property in the parent group.\n');
 
try
    % Query the value for the read-only property, ResponseHeaderState.
    get(deviceObj, 'ResponseHeaderState');

    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmp(result, noErrorMsg);

    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while getting the property value.\n');
    fprintf([lasterr,'\n']);
end

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Delay property in the Acquisition group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Delay property.
validValues = {-5, 10.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        
        groupObj = get(deviceObj, 'Acquisition');
        set(groupObj, 'TimeBase', 5.0E-4);
        
        % Configure the property.
        groupObj = get(deviceObj, 'Acquisition');
        set(groupObj, 'Delay', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Delay'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing State property in the Acquisition group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the State property.
validValues = {'stop', 'run'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Acquisition');
        set(groupObj, 'State', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'State'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Timebase property in the Acquisition group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Timebase property.
validValues = {1.0E-9, 2.0E-9, 5.0E-9, 1.0E-8, 2.0E-8, 5.0E-8, 1.0E-7, 2.0E-7, 5.0E-7, 1.0E-6, 2.0E-6, 5.0E-6, 1.0E-5, 2.0E-5, 5.0E-5, 1.0E-4, 2.0E-4, 5.0E-4, 0.0010, 0.0020, 0.0050, 0.01, 0.02, 0.05, 0.1, 0.2, 0.5, 1.0, 2.0, 5.0, 10.0, 20.0, 50.0, 100.0, 200.0, 500.0, 1000.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Acquisition');
        set(groupObj, 'Timebase', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Timebase'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing BandwidthLimit property in the Channel group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the BandwidthLimit property.
validValues = {'on', 'off', '200mhz'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Channel');
        set(groupObj, 'BandwidthLimit', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'BandwidthLimit'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Coupling property in the Channel group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Coupling property.
validValues = {'ac', 'dc', 'ground', '50ohms'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Channel');
        set(groupObj, 'Coupling', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Coupling'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Position property in the Channel group.\n');

% Overall error status for all settings.
finalerrorcode = false;

groupObj = get(deviceObj, 'Channel');
set(groupObj, 'Scale', 10);

% Valid values for the Position property.
validValues = {-10.0, 10.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Channel');
        set(groupObj, 'Position', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Position'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Probe property in the Channel group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Probe property.
validValues = {1.0, 2.0, 5.0, 10.0, 20.0, 25.0, 50.0, 100.0, 200.0, 500.0, 1000.0, 10000.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Channel');
        set(groupObj, 'Probe', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Probe'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Scale property in the Channel group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Scale property.
validValues = {0.0020, 10.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Channel');
        set(groupObj, 'Scale', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Scale'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing State property in the Channel group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the State property.
validValues = {'off', 'on'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Channel');
        set(groupObj, 'State', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'State'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing CursorType property in the Cursor group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the CursorType property.
validValues = {'none', 'custom', 'fail', 'horizontalAbsolute', 'standardTimeParameters', 'horizontalRelative', 'pass', 'verticalAbsolute', 'standardVoltageParameters', 'verticalRelative'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Cursor');
        set(groupObj, 'CursorType', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'CursorType'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing HorizontalBarDelta property in the Cursor group.\n');
 
try
    % Query the value for the read-only property, HorizontalBarDelta.
    groupObj = get(deviceObj, 'Cursor');
    get(groupObj, {'HorizontalBarDelta'});

    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmp(result, noErrorMsg);

    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while getting the property value.\n');
    fprintf([lasterr,'\n']);
end

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Source property in the Cursor group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Source property.
validValues = {'channel1', 'channel2', 'channel3', 'channel4', 'traceA', 'traceB', 'traceC', 'traceD'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Cursor');
        set(groupObj, 'Source', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Source'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing VerticalBarDelta property in the Cursor group.\n');
 
try
    % Query the value for the read-only property, VerticalBarDelta.
    groupObj = get(deviceObj, 'Cursor');
    get(groupObj, {'VerticalBarDelta'});

    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmp(result, noErrorMsg);

    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while getting the property value.\n');
    fprintf([lasterr,'\n']);
end

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Persistence property in the Display group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Persistence property.
validValues = {'infinite', 0.5, 1.0, 2.0, 5.0, 10.0, 20.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Display');
        set(groupObj, 'Persistence', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Persistence'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing MeasurementType property in the Measurement group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the MeasurementType property.
validValues = {'frequency', 'mean', 'period', 'peak2peak', 'crms', 'amplitude', 'area', 'base'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Measurement');
        set(groupObj, 'MeasurementType', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'MeasurementType'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Source property in the Measurement group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Source property.
validValues = {'channel1', 'channel2', 'channel3', 'channel4'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Measurement');
        set(groupObj, 'Source', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Source'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Value property in the Measurement group.\n');
 
try
    % Query the value for the read-only property, Value.
    groupObj = get(deviceObj, 'Measurement');
    get(groupObj, {'Value'});

    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmp(result, noErrorMsg);

    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while getting the property value.\n');
    fprintf([lasterr,'\n']);
end

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Mode property in the Sequence group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Mode property.
validValues = {'on', 'off'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Sequence');
        set(groupObj, 'Mode', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Mode'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Segment property in the Sequence group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Segment property.
validValues = {50.0, 200.0, 500.0, 2000.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Sequence');
        set(groupObj, 'Segment', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Segment'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Coupling property in the Trigger group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Coupling property.
validValues = {'ac', 'dc', 'highFreqRejection', 'lowFreqRejection'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Trigger');
        set(groupObj, 'Coupling', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Coupling'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Mode property in the Trigger group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Mode property.
validValues = {'auto', 'run', 'single', 'stop'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Trigger');
        set(groupObj, 'Mode', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Mode'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Slope property in the Trigger group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Slope property.
validValues = {'falling', 'rising', 'window'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Trigger');
        set(groupObj, 'Slope', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Slope'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Source property in the Trigger group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Source property.
validValues = {'channel1', 'channel2', 'external', 'external10', 'channel3', 'channel4', 'acline'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Trigger');
        set(groupObj, 'Source', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Source'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Window property in the Trigger group.\n');
 
try
    % Query the value for the read-only property, Window.
    groupObj = get(deviceObj, 'Trigger');
    get(groupObj, {'Window'});

    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmp(result, noErrorMsg);

    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while getting the property value.\n');
    fprintf([lasterr,'\n']);
end

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing ByteOrder property in the Waveform group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the ByteOrder property.
validValues = {'bigEndian', 'littleEndian'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Waveform');
        set(groupObj, 'ByteOrder', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'ByteOrder'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing FirstPoint property in the Waveform group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the FirstPoint property.
validValues = {0.0, 2500.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Waveform');
        set(groupObj, 'FirstPoint', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'FirstPoint'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing MaxNumberPoint property in the Waveform group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the MaxNumberPoint property.
validValues = {1000.0, 10.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Waveform');
        set(groupObj, 'MaxNumberPoint', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'MaxNumberPoint'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Precision property in the Waveform group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Precision property.
validValues = {'int16','ASCII', 'int8'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Waveform');
        set(groupObj, 'Precision', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Precision'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 5: devicereset - Function (Function Test Step)

errorcode = false;
try
    % Execute the function.
    devicereset(deviceObj);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 6: Properties Sweep - 3 (failing) (Properties Sweep Test Step)
% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Date property in the parent group.\n');
 
try
    % Query the value for the read-only property, Date.
    get(deviceObj, 'Date');

    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmp(result, noErrorMsg);

    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while getting the property value.\n');
    fprintf([lasterr,'\n']);
end

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing InstrumentModel property in the parent group.\n');
 
try
    % Query the value for the read-only property, InstrumentModel.
    get(deviceObj, 'InstrumentModel');

    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmp(result, noErrorMsg);

    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while getting the property value.\n');
    fprintf([lasterr,'\n']);
end

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing RearOutPut property in the parent group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Post information on the property being tested.
fprintf('Testing ResponseHeaderState property in the parent group.\n');
 
try
    % Query the value for the read-only property, ResponseHeaderState.
    get(deviceObj, 'ResponseHeaderState');

    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmp(result, noErrorMsg);

    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while getting the property value.\n');
    fprintf([lasterr,'\n']);
end

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Delay property in the Acquisition group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Delay property.
validValues = {-5000000.0, -500, 0, 100.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        
        groupObj = get(deviceObj, 'Acquisition');
        set(groupObj, 'TimeBase', 500);
        
        % Configure the property.
        groupObj = get(deviceObj, 'Acquisition');
        set(groupObj, 'Delay', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Delay'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing State property in the Acquisition group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the State property.
validValues = {'stop', 'run'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Acquisition');
        set(groupObj, 'State', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'State'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Timebase property in the Acquisition group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Timebase property.
validValues = {1.0E-9, 2.0E-9, 5.0E-9, 1.0E-8, 2.0E-8, 5.0E-8, 1.0E-7, 2.0E-7, 5.0E-7, 1.0E-6, 2.0E-6, 5.0E-6, 1.0E-5, 2.0E-5, 5.0E-5, 1.0E-4, 2.0E-4, 5.0E-4, 0.0010, 0.0020, 0.0050, 0.01, 0.02, 0.05, 0.1, 0.2, 0.5, 1.0, 2.0, 5.0, 10.0, 20.0, 50.0, 100.0, 200.0, 500.0, 1000.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Acquisition');
        set(groupObj, 'Timebase', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Timebase'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing BandwidthLimit property in the Channel group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the BandwidthLimit property.
validValues = {'on', 'off', '200mhz'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Channel');
        set(groupObj, 'BandwidthLimit', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'BandwidthLimit'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Coupling property in the Channel group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Coupling property.
validValues = {'ac', 'dc', 'ground', '50ohms'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Channel');
        set(groupObj, 'Coupling', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Coupling'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Probe property in the Channel group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Probe property.
validValues = {1.0, 2.0, 5.0, 10.0, 20.0, 25.0, 50.0, 100.0, 200.0, 500.0, 1000.0, 10000.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Channel');
        set(groupObj, 'Probe', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Probe'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Scale property in the Channel group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Scale property.
validValues = {0.0020, 10.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Channel');
        set(groupObj, 'Scale', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Scale'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing State property in the Channel group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the State property.
validValues = {'off', 'on'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Channel');
        set(groupObj, 'State', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'State'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing CursorType property in the Cursor group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the CursorType property.
validValues = {'none', 'custom', 'fail', 'horizontalAbsolute', 'standardTimeParameters', 'horizontalRelative', 'pass', 'verticalAbsolute', 'standardVoltageParameters', 'verticalRelative'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Cursor');
        set(groupObj, 'CursorType', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'CursorType'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing HorizontalBarDelta property in the Cursor group.\n');
 
try
    % Query the value for the read-only property, HorizontalBarDelta.
    groupObj = get(deviceObj, 'Cursor');
    get(groupObj, {'HorizontalBarDelta'});

    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmp(result, noErrorMsg);

    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while getting the property value.\n');
    fprintf([lasterr,'\n']);
end

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Source property in the Cursor group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Source property.
validValues = {'channel1', 'channel2', 'channel3', 'channel4', 'traceA', 'traceB', 'traceC', 'traceD'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Cursor');
        set(groupObj, 'Source', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Source'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing VerticalBarDelta property in the Cursor group.\n');
 
try
    % Query the value for the read-only property, VerticalBarDelta.
    groupObj = get(deviceObj, 'Cursor');
    get(groupObj, {'VerticalBarDelta'});

    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmp(result, noErrorMsg);

    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while getting the property value.\n');
    fprintf([lasterr,'\n']);
end

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing MeasurementType property in the Measurement group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the MeasurementType property.
validValues = {'frequency', 'mean', 'period', 'peak2peak', 'crms', 'amplitude', 'area', 'base'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Measurement');
        set(groupObj, 'MeasurementType', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'MeasurementType'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Source property in the Measurement group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Source property.
validValues = {'channel1', 'channel2', 'channel3', 'channel4'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Measurement');
        set(groupObj, 'Source', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Source'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Value property in the Measurement group.\n');
 
try
    % Query the value for the read-only property, Value.
    groupObj = get(deviceObj, 'Measurement');
    get(groupObj, {'Value'});

    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmp(result, noErrorMsg);

    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while getting the property value.\n');
    fprintf([lasterr,'\n']);
end

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Mode property in the Sequence group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Mode property.
validValues = {'on', 'off'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Sequence');
        set(groupObj, 'Mode', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Mode'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Segment property in the Sequence group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Segment property.
validValues = {50.0, 200.0, 500.0, 2000.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Sequence');
        set(groupObj, 'Segment', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Segment'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Coupling property in the Trigger group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Coupling property.
validValues = {'ac', 'dc', 'highFreqRejection', 'lowFreqRejection'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Trigger');
        set(groupObj, 'Coupling', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Coupling'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Slope property in the Trigger group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Slope property.
validValues = {'falling', 'rising', 'window'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Trigger');
        set(groupObj, 'Slope', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Slope'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Source property in the Trigger group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Source property.
validValues = {'channel1', 'channel2', 'external', 'external10', 'channel3', 'channel4', 'acline'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Trigger');
        set(groupObj, 'Source', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Source'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Window property in the Trigger group.\n');
 
try
    % Query the value for the read-only property, Window.
    groupObj = get(deviceObj, 'Trigger');
    get(groupObj, {'Window'});

    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmp(result, noErrorMsg);

    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while getting the property value.\n');
    fprintf([lasterr,'\n']);
end

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing ByteOrder property in the Waveform group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the ByteOrder property.
validValues = {'bigEndian', 'littleEndian'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Waveform');
        set(groupObj, 'ByteOrder', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'ByteOrder'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing FirstPoint property in the Waveform group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the FirstPoint property.
validValues = {0.0, 2500.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Waveform');
        set(groupObj, 'FirstPoint', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'FirstPoint'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Precision property in the Waveform group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Precision property.
validValues = {'ASCII', 'int16',  'int8'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Waveform');
        set(groupObj, 'Precision', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, {'Precision'});

            % Compare to the expected value.
            expectedValue = cell(size(groupObj))';
            [expectedValue{:}] = deal(validValues{i});
            errorcode = ~isequal(tempOut, expectedValue);
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.\n');
    
                % Post actual value.
                for k=1:length(tempOut)
                    c = tempOut{k};
                    if isnumeric(c)
                        fprintf(['Actual value(' num2str(k) '): ' num2str(c) '\n']);
                    else
                        fprintf(['Actual value(' num2str(k) '): ' c '\n']);
                    end
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i}) '\n']);
                else
                    fprintf(['Expected value: ' validValues{i}, '\n']);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.\n');
                fprintf([result,'\n']);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 7: devicereset - Function (Function Test Step)

errorcode = false;
try
    % Execute the function.
    devicereset(deviceObj);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 8: autoset - Function (Function Test Step)

errorcode = false;
try
    % Execute the function.
    invoke(deviceObj, 'autoset');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 9: buzzer ON - Function (Function Test Step)

errorcode = false;
try
    % Execute the function.
    invoke(deviceObj, 'buzzer', 'ON');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result,'\n']);
    end
    invoke(deviceObj, 'buzzer', 'OFF'); 
    
catch
    % A MATLAB error occurred.
    errorcode = true;
    
    invoke(deviceObj, 'buzzer', 'OFF'); 
    
    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 10: buzzer OFF - Function (Function Test Step)

errorcode = false;
try
    % Execute the function.
    invoke(deviceObj, 'buzzer', 'off');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 11: buzzer BEEP - Function (Function Test Step)

errorcode = false;
try
    % Execute the function.
    invoke(deviceObj, 'buzzer', 'beep');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result,'\n']);
    end
    
    invoke(deviceObj, 'buzzer', 'OFF'); 
    
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr,'\n']);
    
    invoke(deviceObj, 'buzzer', 'OFF'); 
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 12: geterror - Function (Function Test Step)

errorcode = false;
try
    % Execute the function.
    [errorMsg] = geterror(deviceObj);
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, errorMsg};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 13: selfcalibrate - Function (failing) (Function Test Step)
errorcode = false;
try
    % Execute the function.
    invoke(deviceObj, 'selfcalibrate');
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, '0');
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 14: selftest - Function (Function Test Step)

errorcode = false;
try
    % Execute the function.
    [status] = selftest(deviceObj);
    
    % Store the result so that it can be returned.
    varargout = {varargout{:}, status};
    
    % For this test the instrument sends 0 instead of 0;0
    result = '';
    if ~status
        result = '0;0';
    end
    
    errorcode = ~strcmpi(result, noErrorMsg);

    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 15: channelcolor - Function (failing) (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Display');
    
    %set the color scheme to a user defined one
    set(groupObj,'ColorScheme','u1')
    invoke(groupObj, 'channelcolor', 'channel1', 'blue');
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 16: bits - Function (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Math');
    invoke(groupObj, 'bits', 20,'traceA');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 17: maxsweeps - Function (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Math');
    invoke(groupObj, 'maxsweeps', 100,'traceA');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 18: weight - Function (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Math');
    invoke(groupObj, 'weight', 40,'traceA');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 19: savestate - Function (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'System');
    invoke(groupObj, 'savestate', 1);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 20: loadstate - Function (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'System');
    invoke(groupObj, 'loadstate', 1);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 21: trigger - Function (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Trigger');
    invoke(groupObj, 'trigger');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 22: readwaveform - Function (Function Test Step)

errorcode = false;

% Reset the device
devicereset(deviceObj);
invoke(deviceObj,'autoset');

try
    % Execute the function.
    groupObj = get(deviceObj, 'Waveform');
    
    % sets the max number of points to less then 20000
    set(groupObj, 'MaxNumberPoint', 500)
    [y,x,yunit,xunit,header] = invoke(groupObj, 'readwaveform', 'channel1');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, y,x,yunit,xunit,header};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 23: writewaveform - Function (failing) (Function Test Step)
errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Waveform');
    invoke(groupObj, 'writewaveform', 'memory1',y,header);
    
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 24: storewaveform - Function  (Function Test Step)

errorcode = false;
devicereset(deviceObj)
invoke(deviceObj,'autoset');
        
% returns the path to C1
groupObj = get(deviceObj, 'Channel');    
get(groupObj,'Coupling');

try
    % Execute the function.
    groupObj = get(deviceObj, 'Waveform');
    invoke(groupObj, 'storewaveform', 'channel1','memory2');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 25: All Properties Sweep (Properties Sweep Test Step)
% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Date property in the parent group.\n');
 
try
    % Query the value for the read-only property, Date.
    get(deviceObj, 'Date');

    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmp(result, noErrorMsg);

    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while getting the property value.\n');
    fprintf([lasterr,'\n']);
end

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing InstrumentModel property in the parent group.\n');
 
try
    % Query the value for the read-only property, InstrumentModel.
    get(deviceObj, 'InstrumentModel');

    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmp(result, noErrorMsg);

    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while getting the property value.\n');
    fprintf([lasterr,'\n']);
end

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing RearOutPut property in the parent group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the RearOutPut property.
validValues = {'off', 'passFail', 'singlePulse', 'triggerOut', 'triggerReady'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        set(deviceObj, 'RearOutPut', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing ResponseHeaderState property in the parent group.\n');
 
try
    % Query the value for the read-only property, ResponseHeaderState.
    get(deviceObj, 'ResponseHeaderState');

    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmp(result, noErrorMsg);

    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while getting the property value.\n');
    fprintf([lasterr,'\n']);
end

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Control property in the Acquisition group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Control property.
validValues = {'single', 'run', 'stop'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Acquisition');
        set(groupObj, 'Control', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Delay property in the Acquisition group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Delay property.
validValues = {-1.0E-5, 100.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        groupObj = get(deviceObj, 'Acquisition');
        set(groupObj, 'TimeBase', 1.0E-9);
        
        % Configure the property.
        groupObj = get(deviceObj, 'Acquisition');
        set(groupObj, 'Delay', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing State property in the Acquisition group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the State property.
validValues = {'stop', 'run', 'single', 'auto'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Acquisition');
        set(groupObj, 'State', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Timebase property in the Acquisition group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Timebase property.
validValues = {1.0E-9, 2.0E-9, 5.0E-9, 1.0E-8, 2.0E-8, 5.0E-8, 1.0E-7, 2.0E-7, 5.0E-7, 1.0E-6, 2.0E-6, 5.0E-6, 1.0E-5, 2.0E-5, 5.0E-5, 1.0E-4, 2.0E-4, 5.0E-4, 0.0010, 0.0020, 0.0050, 0.01, 0.02, 0.05, 0.1, 0.2, 0.5, 1.0, 2.0, 5.0, 10.0, 20.0, 50.0, 100.0, 200.0, 500.0, 1000.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Acquisition');
        set(groupObj, 'Timebase', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing BandwidthLimit property in the Channel group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the BandwidthLimit property.
validValues = {'on', 'off', '200mhz'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Channel');
        
        % returns the path to C1
        get(groupObj,'Coupling');
        set(groupObj, 'BandwidthLimit', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Coupling property in the Channel group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Coupling property.
validValues = {'ac', 'dc', 'ground', '50ohms'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Channel');
        set(groupObj, 'Coupling', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Position property in the Channel group.\n');

% Overall error status for all settings.
finalerrorcode = false;

groupObj = get(deviceObj, 'Channel');
set(groupObj, 'Scale', 10);

% Valid values for the Position property.
validValues = {-5.0, 5.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Channel');
        set(groupObj, 'Position', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Probe property in the Channel group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Probe property.
validValues = {1.0, 2.0, 5.0, 10.0, 20.0, 25.0, 50.0, 100.0, 200.0, 500.0, 1000.0, 10000.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Channel');
        set(groupObj, 'Probe', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Scale property in the Channel group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Scale property.
validValues = {0.0020, 10.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Channel');
        set(groupObj, 'Scale', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing State property in the Channel group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the State property.
validValues = {'off', 'on'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Channel');
        set(groupObj, 'State', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing CursorType property in the Cursor group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the CursorType property.
validValues = {'none', 'custom', 'fail', 'horizontalAbsolute', 'standardTimeParameters', 'horizontalRelative', 'pass', 'verticalAbsolute', 'standardVoltageParameters', 'verticalRelative'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Cursor');
        set(groupObj, 'CursorType', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing HorizontalBarDelta property in the Cursor group.\n');
 
try
    % Query the value for the read-only property, HorizontalBarDelta.
    groupObj = get(deviceObj, 'Cursor');
    get(groupObj, {'HorizontalBarDelta'});

    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmp(result, noErrorMsg);

    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while getting the property value.\n');
    fprintf([lasterr,'\n']);
end

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing HorizontalBarPosition1 property in the Cursor group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the HorizontalBarPosition1 property.
validValues = {-1000.0, 0.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Cursor');
        set(groupObj, 'HorizontalBarPosition1', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing HorizontalBarPosition2 property in the Cursor group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the HorizontalBarPosition2 property.
validValues = {-1000.0, 0.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Cursor');
        set(groupObj, 'HorizontalBarPosition2', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Source property in the Cursor group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Source property.
validValues = {'channel1', 'channel2', 'channel3', 'channel4', 'traceA', 'traceB', 'traceC', 'traceD'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Cursor');
        set(groupObj, 'Source', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing VerticalBarDelta property in the Cursor group.\n');
 
try
    % Query the value for the read-only property, VerticalBarDelta.
    groupObj = get(deviceObj, 'Cursor');
    get(groupObj, {'VerticalBarDelta'});

    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmp(result, noErrorMsg);

    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while getting the property value.\n');
    fprintf([lasterr,'\n']);
end

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing VerticalBarPosition1 property in the Cursor group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the VerticalBarPosition1 property.
validValues = {-1000.0, 0.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Cursor');
        set(groupObj, 'VerticalBarPosition1', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing VerticalBarPosition2 property in the Cursor group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the VerticalBarPosition2 property.
validValues = {-1000.0, 0.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Cursor');
        set(groupObj, 'VerticalBarPosition2', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing BackgroundColor property in the Display group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the BackgroundColor property.
validValues = {'WHITE','CYAN','YELLOW','GREEN','MAGENTA','BLUE','RED','LTGRAY','GRAY','SLGRAY','CHGRAY','DKCYAN','CREAM','SAND','AMBER','OLIVE','LTGREEN','JADE','LMGREEN','APGREEN','EMGREEN','GRGREEN','OCSPRAY','ICEBLUE','PASTBLUE','PALEBLUE','SKYBLUE','ROYLBLUE','DEEPBLUE','NAVY','PLUM','PURPLE','AMETHYST','FUCHSIA','RASPBRY','NEONPINK','PALEPINK','PINK','VERMIL','ORANGE','CERISE','KHAKI','BROWN','BLACK'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Display');
        set(groupObj, 'BackgroundColor', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Contrast property in the Display group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Contrast property.
validValues = {0.0, 10.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 100.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Display');
        set(groupObj, 'Contrast', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing CursorColor property in the Display group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the CursorColor property.
validValues = {'WHITE','CYAN','YELLOW','GREEN','MAGENTA','BLUE','RED','LTGRAY','GRAY','SLGRAY','CHGRAY','DKCYAN','CREAM','SAND','AMBER','OLIVE','LTGREEN','JADE','LMGREEN','APGREEN','EMGREEN','GRGREEN','OCSPRAY','ICEBLUE','PASTBLUE','PALEBLUE','SKYBLUE','ROYLBLUE','DEEPBLUE','NAVY','PLUM','PURPLE','AMETHYST','FUCHSIA','RASPBRY','NEONPINK','PALEPINK','PINK','VERMIL','ORANGE','CERISE','KHAKI','BROWN','BLACK'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Display');
        set(groupObj, 'CursorColor', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Format property in the Display group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Format property.
validValues = {'xy', 'yt'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Display');
        set(groupObj, 'Format', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Grid property in the Display group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Grid property.
validValues = {'single', 'dual', 'quad', 'octal'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Display');
        set(groupObj, 'Grid', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing GridColor property in the Display group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the GridColor property.
validValues = {'WHITE','CYAN','YELLOW','GREEN','MAGENTA','BLUE','RED','LTGRAY','GRAY','SLGRAY','CHGRAY','DKCYAN','CREAM','SAND','AMBER','OLIVE','LTGREEN','JADE','LMGREEN','APGREEN','EMGREEN','GRGREEN','OCSPRAY','ICEBLUE','PASTBLUE','PALEBLUE','SKYBLUE','ROYLBLUE','DEEPBLUE','NAVY','PLUM','PURPLE','AMETHYST','FUCHSIA','RASPBRY','NEONPINK','PALEPINK','PINK','VERMIL','ORANGE','CERISE','KHAKI','BROWN','BLACK'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Display');
        set(groupObj, 'GridColor', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Neutralcolor property in the Display group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Neutralcolor property.
validValues = {'WHITE','CYAN','YELLOW','GREEN','MAGENTA','BLUE','RED','LTGRAY','GRAY','SLGRAY','CHGRAY','DKCYAN','CREAM','SAND','AMBER','OLIVE','LTGREEN','JADE','LMGREEN','APGREEN','EMGREEN','GRGREEN','OCSPRAY','ICEBLUE','PASTBLUE','PALEBLUE','SKYBLUE','ROYLBLUE','DEEPBLUE','NAVY','PLUM','PURPLE','AMETHYST','FUCHSIA','RASPBRY','NEONPINK','PALEPINK','PINK','VERMIL','ORANGE','CERISE','KHAKI','BROWN','BLACK'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Display');
        set(groupObj, 'Neutralcolor', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing OverlayColor property in the Display group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the OverlayColor property.
validValues = {'WHITE','CYAN','YELLOW','GREEN','MAGENTA','BLUE','RED','LTGRAY','GRAY','SLGRAY','CHGRAY','DKCYAN','CREAM','SAND','AMBER','OLIVE','LTGREEN','JADE','LMGREEN','APGREEN','EMGREEN','GRGREEN','OCSPRAY','ICEBLUE','PASTBLUE','PALEBLUE','SKYBLUE','ROYLBLUE','DEEPBLUE','NAVY','PLUM','PURPLE','AMETHYST','FUCHSIA','RASPBRY','NEONPINK','PALEPINK','PINK','VERMIL','ORANGE','CERISE','KHAKI','BROWN','BLACK'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Display');
        set(groupObj, 'OverlayColor', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Persistence property in the Display group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Persistence property.
validValues = {'infinite', 0.5, 1.0, 2.0, 5.0, 10.0, 20.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Display');
        set(groupObj, 'Persistence', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing ColorScheme property in the Display group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the ColorScheme property.
validValues = {'1', '2', '3', '4', '5', '6', 'U1', 'U2', 'U3', 'U4'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Display');
        set(groupObj, 'ColorScheme', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Style property in the Display group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Style property.
validValues = {'dots', 'vectors'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Display');
        set(groupObj, 'Style', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing TextColor property in the Display group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the TextColor property.
validValues = {'WHITE','CYAN','YELLOW','GREEN','MAGENTA','BLUE','RED','LTGRAY','GRAY','SLGRAY','CHGRAY','DKCYAN','CREAM','SAND','AMBER','OLIVE','LTGREEN','JADE','LMGREEN','APGREEN','EMGREEN','GRGREEN','OCSPRAY','ICEBLUE','PASTBLUE','PALEBLUE','SKYBLUE','ROYLBLUE','DEEPBLUE','NAVY','PLUM','PURPLE','AMETHYST','FUCHSIA','RASPBRY','NEONPINK','PALEPINK','PINK','VERMIL','ORANGE','CERISE','KHAKI','BROWN','BLACK'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Display');
        set(groupObj, 'TextColor', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing WarningColor property in the Display group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the WarningColor property.
validValues = {'WHITE','CYAN','YELLOW','GREEN','MAGENTA','BLUE','RED','LTGRAY','GRAY','SLGRAY','CHGRAY','DKCYAN','CREAM','SAND','AMBER','OLIVE','LTGREEN','JADE','LMGREEN','APGREEN','EMGREEN','GRGREEN','OCSPRAY','ICEBLUE','PASTBLUE','PALEBLUE','SKYBLUE','ROYLBLUE','DEEPBLUE','NAVY','PLUM','PURPLE','AMETHYST','FUCHSIA','RASPBRY','NEONPINK','PALEPINK','PINK','VERMIL','ORANGE','CERISE','KHAKI','BROWN','BLACK'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Display');
        set(groupObj, 'WarningColor', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing MeasurementType property in the Measurement group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the MeasurementType property.
validValues = {'frequency', 'mean', 'period', 'peak2peak', 'crms', 'amplitude', 'area', 'base'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Measurement');
        set(groupObj, 'MeasurementType', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Source property in the Measurement group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Source property.
validValues = {'channel1', 'channel2', 'channel3', 'channel4'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Measurement');
        set(groupObj, 'Source', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Value property in the Measurement group.\n');
 
try
    % Query the value for the read-only property, Value.
    groupObj = get(deviceObj, 'Measurement');
    get(groupObj, {'Value'});

    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmp(result, noErrorMsg);

    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while getting the property value.\n');
    fprintf([lasterr,'\n']);
end

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Max property in the Sequence group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Reset the device
devicereset(deviceObj);

groupObj = get(deviceObj, 'Sequence');
set(groupObj, 'Mode', 'on');

% Valid values for the Max property.
validValues = {50.0, 100.0, 250.0, 500.0, 1000.0, 2500.0, 5000.0, 10000.0, 25000.0, 50000.0, 100000.0, 250000.0, 500000.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Sequence');
        set(groupObj, 'Max', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Mode property in the Sequence group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Mode property.
validValues = {'on', 'off'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Sequence');
        set(groupObj, 'Mode', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Segment property in the Sequence group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Segment property.
validValues = {50.0, 200.0, 500.0, 2000.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Sequence');
        set(groupObj, 'Segment', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Coupling property in the Trigger group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Coupling property.
validValues = {'ac', 'dc', 'highFreqRejection', 'lowFreqRejection'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Trigger');
        set(groupObj, 'Coupling', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Holdoff property in the Trigger group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Holdoff property.
validValues = {1.0E-8, 10.0,2};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Trigger');
        
        % changes the trigger settings so that you can be in the correct
        % environment
        set(groupObj, 'TriggerType', 'edge')
        set(groupObj, 'HoldType', 'time')
        
        set(groupObj, 'Holdoff', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing HoldType property in the Trigger group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the HoldType property.
validValues = {'time', 'timeWithin', 'event', 'pulseSmaller', 'pulseLarger', 'intervalSmaller', 'intervalLarger', 'pulseWidthWindow', 'intervalWidthWindow', 'off'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % sets the trigger type so that hold type can be changed 
        switch validValues{i}
            case {'time','event','off'}
                dependentValue = 'edge';
            case {'pulseSmaller','pulseLarger','pulseWidthWindow'}
                dependentValue = 'glitch';
            case {'intervalSmaller','intervalLarger','intervalWidthWindow'}
                dependentValue = 'interval';
            case {'timeWithin'}
                dependentValue = 'stateQualified';
        end

        % Configure the property.
        groupObj = get(deviceObj, 'Trigger');
        set(groupObj, 'TriggerType', dependentValue)
        set(groupObj, 'HoldType', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Level property in the Trigger group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Level property.
validValues = {-50.0, 50.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Trigger');
        set(groupObj, 'Level', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Mode property in the Trigger group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Mode property.
validValues = {'auto', 'run', 'stop'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Trigger');
        set(groupObj, 'Mode', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Slope property in the Trigger group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Slope property.
validValues = {'falling', 'rising', 'window'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Trigger');
        set(groupObj, 'Slope', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Source property in the Trigger group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Source property.
validValues = {'channel1', 'channel2', 'external', 'external10', 'channel3', 'channel4', 'acline'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Trigger');
        
        % sets the trigger values so that the sourse can be changed
        set(groupObj, 'TriggerType', 'edge')
        
        set(groupObj, 'Source', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing TriggerType property in the Trigger group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the TriggerType property.
validValues = {'edge', 'drop', 'glitch', 'single source', 'interval', 'stateQualified', 'standard ', 'edgeQualified'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Trigger');
        set(groupObj, 'TriggerType', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Window property in the Trigger group.\n');
 
try
    % Query the value for the read-only property, Window.
    groupObj = get(deviceObj, 'Trigger');
    get(groupObj, {'Window'});

    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmp(result, noErrorMsg);

    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while getting the property value.\n');
    fprintf([lasterr,'\n']);
end

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing ByteOrder property in the Waveform group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the ByteOrder property.
validValues = {'bigEndian', 'littleEndian'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Waveform');
        set(groupObj, 'ByteOrder', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing EndingPoint property in the Waveform group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the EndingPoint property.
validValues = {100, 2500.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Waveform');
        set(groupObj, 'EndingPoint', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing FirstPoint property in the Waveform group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the FirstPoint property.
validValues = {0.0, 2500.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Waveform');
        set(groupObj, 'FirstPoint', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing MaxNumberPoint property in the Waveform group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the MaxNumberPoint property.
validValues = {2000.0, 100.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Waveform');
        set(groupObj, 'MaxNumberPoint', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;

% Reset errorcode.
errorcode = false;

% Post information on the property being tested.
fprintf('Testing Precision property in the Waveform group.\n');

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Precision property.
validValues = {'ASCII', 'int16',  'int8'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Waveform');
        set(groupObj, 'Precision', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.\n');
            fprintf([result,'\n']);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.\n');
        fprintf([lasterr,'\n']);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% test for functions that were added last


% Test Step 1: set to subtraction (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Math');
    groupObj = groupObj(1);
    invoke(groupObj, 'setmathequation', 'subtraction','channel1','channel2','traceA');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 2: 1st channel (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Math');
    groupObj = groupObj(1);
    [value] = invoke(groupObj, 'getfirstchannel', 'traceA');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, value};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end
 
% Error if the function output argument(s) do not match the expected value(s).
if (errorcode == false)
    % Compare to the expected value.
    errorcode = ~isequal(value, 'channel1');

    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The function did not return the expected value.');

        % Post the results.    
        fprintf('Actual values:');
        allOutputArguments     = {value};
        allOutputArgumentNames = {'value'};
    
        for j = 1:length(allOutputArguments)
            tempArg  = allOutputArguments{j};
            tempName = allOutputArgumentNames{j};
    
            if ~iscell(tempArg)
                tempArg = {tempArg};
            end

            % Loop through results and display them.
            for k = 1:length(tempArg)
                if isnumeric(tempArg{k}) &amp;&amp; numel(tempArg{k}) &lt; 10
                    fprintf(['    ' tempName '(' num2str(k) '): ' num2str(tempArg{k})]);
                elseif ischar(tempArg{k})
                    fprintf(['    ' tempName '(' num2str(k) '): ' tempArg{k}]);
                else
                    fprintf(['    ' tempName '(' num2str(k) '): ' num2str(size(tempArg{k}, 1)) ' by ' num2str(size(tempArg{k}, 2)) ' ' class(tempArg{k})]);
                end
            end
        end

        % Post the expected values.
        fprintf('Expected value:');
        fprintf(['    value = channel1']);
    end

end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 3: 2nd channel (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Math');
    groupObj = groupObj(1);
    [value] = invoke(groupObj, 'getsecondchannel', 'traceA');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, value};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end
 
% Error if the function output argument(s) do not match the expected value(s).
if (errorcode == false)
    % Compare to the expected value.
    errorcode = ~isequal(value, 'channel2');

    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The function did not return the expected value.');

        % Post the results.    
        fprintf('Actual values:');
        allOutputArguments     = {value};
        allOutputArgumentNames = {'value'};
    
        for j = 1:length(allOutputArguments)
            tempArg  = allOutputArguments{j};
            tempName = allOutputArgumentNames{j};
    
            if ~iscell(tempArg)
                tempArg = {tempArg};
            end

            % Loop through results and display them.
            for k = 1:length(tempArg)
                if isnumeric(tempArg{k}) &amp;&amp; numel(tempArg{k}) &lt; 10
                    fprintf(['    ' tempName '(' num2str(k) '): ' num2str(tempArg{k})]);
                elseif ischar(tempArg{k})
                    fprintf(['    ' tempName '(' num2str(k) '): ' tempArg{k}]);
                else
                    fprintf(['    ' tempName '(' num2str(k) '): ' num2str(size(tempArg{k}, 1)) ' by ' num2str(size(tempArg{k}, 2)) ' ' class(tempArg{k})]);
                end
            end
        end

        % Post the expected values.
        fprintf('Expected value:');
        fprintf(['    value = channel2']);
    end

end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 4: get equation subtract (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Math');
    groupObj = groupObj(1);
    [value] = invoke(groupObj, 'getequation', 'traceA');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, value};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end
 
% Error if the function output argument(s) do not match the expected value(s).
if (errorcode == false)
    % Compare to the expected value.
    errorcode = ~isequal(value, 'subtraction');

    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The function did not return the expected value.');

        % Post the results.    
        fprintf('Actual values:');
        allOutputArguments     = {value};
        allOutputArgumentNames = {'value'};
    
        for j = 1:length(allOutputArguments)
            tempArg  = allOutputArguments{j};
            tempName = allOutputArgumentNames{j};
    
            if ~iscell(tempArg)
                tempArg = {tempArg};
            end

            % Loop through results and display them.
            for k = 1:length(tempArg)
                if isnumeric(tempArg{k}) &amp;&amp; numel(tempArg{k}) &lt; 10
                    fprintf(['    ' tempName '(' num2str(k) '): ' num2str(tempArg{k})]);
                elseif ischar(tempArg{k})
                    fprintf(['    ' tempName '(' num2str(k) '): ' tempArg{k}]);
                else
                    fprintf(['    ' tempName '(' num2str(k) '): ' num2str(size(tempArg{k}, 1)) ' by ' num2str(size(tempArg{k}, 2)) ' ' class(tempArg{k})]);
                end
            end
        end

        % Post the expected values.
        fprintf('Expected value:');
        fprintf(['    value = subtraction']);
    end

end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 5: set to addition (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Math');
    groupObj = groupObj(1);
    invoke(groupObj, 'setmathequation', 'addition','channel2','channel3','traceA');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 6: 1st channel (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Math');
    groupObj = groupObj(1);
    [value] = invoke(groupObj, 'getfirstchannel', 'traceA');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, value};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end
 
% Error if the function output argument(s) do not match the expected value(s).
if (errorcode == false)
    % Compare to the expected value.
    errorcode = ~isequal(value, 'channel2');

    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The function did not return the expected value.');

        % Post the results.    
        fprintf('Actual values:');
        allOutputArguments     = {value};
        allOutputArgumentNames = {'value'};
    
        for j = 1:length(allOutputArguments)
            tempArg  = allOutputArguments{j};
            tempName = allOutputArgumentNames{j};
    
            if ~iscell(tempArg)
                tempArg = {tempArg};
            end

            % Loop through results and display them.
            for k = 1:length(tempArg)
                if isnumeric(tempArg{k}) &amp;&amp; numel(tempArg{k}) &lt; 10
                    fprintf(['    ' tempName '(' num2str(k) '): ' num2str(tempArg{k})]);
                elseif ischar(tempArg{k})
                    fprintf(['    ' tempName '(' num2str(k) '): ' tempArg{k}]);
                else
                    fprintf(['    ' tempName '(' num2str(k) '): ' num2str(size(tempArg{k}, 1)) ' by ' num2str(size(tempArg{k}, 2)) ' ' class(tempArg{k})]);
                end
            end
        end

        % Post the expected values.
        fprintf('Expected value:');
        fprintf(['    value = channel2']);
    end

end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 7: 2ndchannel (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Math');
    groupObj = groupObj(1);
    [value] = invoke(groupObj, 'getsecondchannel', 'traceA');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, value};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end
 
% Error if the function output argument(s) do not match the expected value(s).
if (errorcode == false)
    % Compare to the expected value.
    errorcode = ~isequal(value, 'channel3');

    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The function did not return the expected value.');

        % Post the results.    
        fprintf('Actual values:');
        allOutputArguments     = {value};
        allOutputArgumentNames = {'value'};
    
        for j = 1:length(allOutputArguments)
            tempArg  = allOutputArguments{j};
            tempName = allOutputArgumentNames{j};
    
            if ~iscell(tempArg)
                tempArg = {tempArg};
            end

            % Loop through results and display them.
            for k = 1:length(tempArg)
                if isnumeric(tempArg{k}) &amp;&amp; numel(tempArg{k}) &lt; 10
                    fprintf(['    ' tempName '(' num2str(k) '): ' num2str(tempArg{k})]);
                elseif ischar(tempArg{k})
                    fprintf(['    ' tempName '(' num2str(k) '): ' tempArg{k}]);
                else
                    fprintf(['    ' tempName '(' num2str(k) '): ' num2str(size(tempArg{k}, 1)) ' by ' num2str(size(tempArg{k}, 2)) ' ' class(tempArg{k})]);
                end
            end
        end

        % Post the expected values.
        fprintf('Expected value:');
        fprintf(['    value = channel3']);
    end

end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 8: get equation addition (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Math');
    groupObj = groupObj(1);
    [value] = invoke(groupObj, 'getequation', 'traceA');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, value};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end
 
% Error if the function output argument(s) do not match the expected value(s).
if (errorcode == false)
    % Compare to the expected value.
    errorcode = ~isequal(value, 'addition');

    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The function did not return the expected value.');

        % Post the results.    
        fprintf('Actual values:');
        allOutputArguments     = {value};
        allOutputArgumentNames = {'value'};
    
        for j = 1:length(allOutputArguments)
            tempArg  = allOutputArguments{j};
            tempName = allOutputArgumentNames{j};
    
            if ~iscell(tempArg)
                tempArg = {tempArg};
            end

            % Loop through results and display them.
            for k = 1:length(tempArg)
                if isnumeric(tempArg{k}) &amp;&amp; numel(tempArg{k}) &lt; 10
                    fprintf(['    ' tempName '(' num2str(k) '): ' num2str(tempArg{k})]);
                elseif ischar(tempArg{k})
                    fprintf(['    ' tempName '(' num2str(k) '): ' tempArg{k}]);
                else
                    fprintf(['    ' tempName '(' num2str(k) '): ' num2str(size(tempArg{k}, 1)) ' by ' num2str(size(tempArg{k}, 2)) ' ' class(tempArg{k})]);
                end
            end
        end

        % Post the expected values.
        fprintf('Expected value:');
        fprintf(['    value = addition']);
    end

end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 9: set to negation (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Math');
    groupObj = groupObj(1);
    invoke(groupObj, 'setmathequation', 'negation','channel3','channel4','traceA');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 10: 1st channel (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Math');
    groupObj = groupObj(1);
    [value] = invoke(groupObj, 'getfirstchannel', 'traceA');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, value};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end
 
% Error if the function output argument(s) do not match the expected value(s).
if (errorcode == false)
    % Compare to the expected value.
    errorcode = ~isequal(value, 'channel3');

    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The function did not return the expected value.');

        % Post the results.    
        fprintf('Actual values:');
        allOutputArguments     = {value};
        allOutputArgumentNames = {'value'};
    
        for j = 1:length(allOutputArguments)
            tempArg  = allOutputArguments{j};
            tempName = allOutputArgumentNames{j};
    
            if ~iscell(tempArg)
                tempArg = {tempArg};
            end

            % Loop through results and display them.
            for k = 1:length(tempArg)
                if isnumeric(tempArg{k}) &amp;&amp; numel(tempArg{k}) &lt; 10
                    fprintf(['    ' tempName '(' num2str(k) '): ' num2str(tempArg{k})]);
                elseif ischar(tempArg{k})
                    fprintf(['    ' tempName '(' num2str(k) '): ' tempArg{k}]);
                else
                    fprintf(['    ' tempName '(' num2str(k) '): ' num2str(size(tempArg{k}, 1)) ' by ' num2str(size(tempArg{k}, 2)) ' ' class(tempArg{k})]);
                end
            end
        end

        % Post the expected values.
        fprintf('Expected value:');
        fprintf(['    value = channel3']);
    end

end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 11: 2nd channel (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Math');
    groupObj = groupObj(1);
    [value] = invoke(groupObj, 'getsecondchannel', 'traceA');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, value};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end
 
% Error if the function output argument(s) do not match the expected value(s).
if (errorcode == false)
    % Compare to the expected value.
    errorcode = ~isequal(value, '');

    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The function did not return the expected value.');

        % Post the results.    
        fprintf('Actual values:');
        allOutputArguments     = {value};
        allOutputArgumentNames = {'value'};
    
        for j = 1:length(allOutputArguments)
            tempArg  = allOutputArguments{j};
            tempName = allOutputArgumentNames{j};
    
            if ~iscell(tempArg)
                tempArg = {tempArg};
            end

            % Loop through results and display them.
            for k = 1:length(tempArg)
                if isnumeric(tempArg{k}) &amp;&amp; numel(tempArg{k}) &lt; 10
                    fprintf(['    ' tempName '(' num2str(k) '): ' num2str(tempArg{k})]);
                elseif ischar(tempArg{k})
                    fprintf(['    ' tempName '(' num2str(k) '): ' tempArg{k}]);
                else
                    fprintf(['    ' tempName '(' num2str(k) '): ' num2str(size(tempArg{k}, 1)) ' by ' num2str(size(tempArg{k}, 2)) ' ' class(tempArg{k})]);
                end
            end
        end

        % Post the expected values.
        fprintf('Expected value:');
        fprintf(['    value = ']);
    end

end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 12: get equation negation (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Math');
    groupObj = groupObj(1);
    [value] = invoke(groupObj, 'getequation', 'traceA');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, value};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end
 
% Error if the function output argument(s) do not match the expected value(s).
if (errorcode == false)
    % Compare to the expected value.
    errorcode = ~isequal(value, 'negation');

    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The function did not return the expected value.');

        % Post the results.    
        fprintf('Actual values:');
        allOutputArguments     = {value};
        allOutputArgumentNames = {'value'};
    
        for j = 1:length(allOutputArguments)
            tempArg  = allOutputArguments{j};
            tempName = allOutputArgumentNames{j};
    
            if ~iscell(tempArg)
                tempArg = {tempArg};
            end

            % Loop through results and display them.
            for k = 1:length(tempArg)
                if isnumeric(tempArg{k}) &amp;&amp; numel(tempArg{k}) &lt; 10
                    fprintf(['    ' tempName '(' num2str(k) '): ' num2str(tempArg{k})]);
                elseif ischar(tempArg{k})
                    fprintf(['    ' tempName '(' num2str(k) '): ' tempArg{k}]);
                else
                    fprintf(['    ' tempName '(' num2str(k) '): ' num2str(size(tempArg{k}, 1)) ' by ' num2str(size(tempArg{k}, 2)) ' ' class(tempArg{k})]);
                end
            end
        end

        % Post the expected values.
        fprintf('Expected value:');
        fprintf(['    value = negation']);
    end

end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 13: set to ratio (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Math');
    groupObj = groupObj(1);
    invoke(groupObj, 'setmathequation', 'ratio','channel4','channel2','traceA');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 14: 1st channel (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Math');
    groupObj = groupObj(1);
    [value] = invoke(groupObj, 'getfirstchannel', 'traceA');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, value};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end
 
% Error if the function output argument(s) do not match the expected value(s).
if (errorcode == false)
    % Compare to the expected value.
    errorcode = ~isequal(value, 'channel4');

    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The function did not return the expected value.');

        % Post the results.    
        fprintf('Actual values:');
        allOutputArguments     = {value};
        allOutputArgumentNames = {'value'};
    
        for j = 1:length(allOutputArguments)
            tempArg  = allOutputArguments{j};
            tempName = allOutputArgumentNames{j};
    
            if ~iscell(tempArg)
                tempArg = {tempArg};
            end

            % Loop through results and display them.
            for k = 1:length(tempArg)
                if isnumeric(tempArg{k}) &amp;&amp; numel(tempArg{k}) &lt; 10
                    fprintf(['    ' tempName '(' num2str(k) '): ' num2str(tempArg{k})]);
                elseif ischar(tempArg{k})
                    fprintf(['    ' tempName '(' num2str(k) '): ' tempArg{k}]);
                else
                    fprintf(['    ' tempName '(' num2str(k) '): ' num2str(size(tempArg{k}, 1)) ' by ' num2str(size(tempArg{k}, 2)) ' ' class(tempArg{k})]);
                end
            end
        end

        % Post the expected values.
        fprintf('Expected value:');
        fprintf(['    value = channel4']);
    end

end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 15: 2nd channel (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Math');
    groupObj = groupObj(1);
    [value] = invoke(groupObj, 'getsecondchannel', 'traceA');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, value};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end
 
% Error if the function output argument(s) do not match the expected value(s).
if (errorcode == false)
    % Compare to the expected value.
    errorcode = ~isequal(value, 'channel2');

    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The function did not return the expected value.');

        % Post the results.    
        fprintf('Actual values:');
        allOutputArguments     = {value};
        allOutputArgumentNames = {'value'};
    
        for j = 1:length(allOutputArguments)
            tempArg  = allOutputArguments{j};
            tempName = allOutputArgumentNames{j};
    
            if ~iscell(tempArg)
                tempArg = {tempArg};
            end

            % Loop through results and display them.
            for k = 1:length(tempArg)
                if isnumeric(tempArg{k}) &amp;&amp; numel(tempArg{k}) &lt; 10
                    fprintf(['    ' tempName '(' num2str(k) '): ' num2str(tempArg{k})]);
                elseif ischar(tempArg{k})
                    fprintf(['    ' tempName '(' num2str(k) '): ' tempArg{k}]);
                else
                    fprintf(['    ' tempName '(' num2str(k) '): ' num2str(size(tempArg{k}, 1)) ' by ' num2str(size(tempArg{k}, 2)) ' ' class(tempArg{k})]);
                end
            end
        end

        % Post the expected values.
        fprintf('Expected value:');
        fprintf(['    value = channel2']);
    end

end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 16: get equation ratio (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Math');
    groupObj = groupObj(1);
    [value] = invoke(groupObj, 'getequation', 'traceA');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, value};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end
 
% Error if the function output argument(s) do not match the expected value(s).
if (errorcode == false)
    % Compare to the expected value.
    errorcode = ~isequal(value, 'ratio');

    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The function did not return the expected value.');

        % Post the results.    
        fprintf('Actual values:');
        allOutputArguments     = {value};
        allOutputArgumentNames = {'value'};
    
        for j = 1:length(allOutputArguments)
            tempArg  = allOutputArguments{j};
            tempName = allOutputArgumentNames{j};
    
            if ~iscell(tempArg)
                tempArg = {tempArg};
            end

            % Loop through results and display them.
            for k = 1:length(tempArg)
                if isnumeric(tempArg{k}) &amp;&amp; numel(tempArg{k}) &lt; 10
                    fprintf(['    ' tempName '(' num2str(k) '): ' num2str(tempArg{k})]);
                elseif ischar(tempArg{k})
                    fprintf(['    ' tempName '(' num2str(k) '): ' tempArg{k}]);
                else
                    fprintf(['    ' tempName '(' num2str(k) '): ' num2str(size(tempArg{k}, 1)) ' by ' num2str(size(tempArg{k}, 2)) ' ' class(tempArg{k})]);
                end
            end
        end

        % Post the expected values.
        fprintf('Expected value:');
        fprintf(['    value = ratio']);
    end

end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 17: set to multiplication (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Math');
    groupObj = groupObj(1);
    invoke(groupObj, 'setmathequation', 'multiplication','channel3','channel2','traceB');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 18: 1st channel (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Math');
    groupObj = groupObj(1);
    [value] = invoke(groupObj, 'getfirstchannel', 'traceB');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, value};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end
 
% Error if the function output argument(s) do not match the expected value(s).
if (errorcode == false)
    % Compare to the expected value.
    errorcode = ~isequal(value, 'channel3');

    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The function did not return the expected value.');

        % Post the results.    
        fprintf('Actual values:');
        allOutputArguments     = {value};
        allOutputArgumentNames = {'value'};
    
        for j = 1:length(allOutputArguments)
            tempArg  = allOutputArguments{j};
            tempName = allOutputArgumentNames{j};
    
            if ~iscell(tempArg)
                tempArg = {tempArg};
            end

            % Loop through results and display them.
            for k = 1:length(tempArg)
                if isnumeric(tempArg{k}) &amp;&amp; numel(tempArg{k}) &lt; 10
                    fprintf(['    ' tempName '(' num2str(k) '): ' num2str(tempArg{k})]);
                elseif ischar(tempArg{k})
                    fprintf(['    ' tempName '(' num2str(k) '): ' tempArg{k}]);
                else
                    fprintf(['    ' tempName '(' num2str(k) '): ' num2str(size(tempArg{k}, 1)) ' by ' num2str(size(tempArg{k}, 2)) ' ' class(tempArg{k})]);
                end
            end
        end

        % Post the expected values.
        fprintf('Expected value:');
        fprintf(['    value = channel3']);
    end

end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 19: 2nd channel (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Math');
    groupObj = groupObj(1);
    [value] = invoke(groupObj, 'getsecondchannel', 'traceB');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, value};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end
 
% Error if the function output argument(s) do not match the expected value(s).
if (errorcode == false)
    % Compare to the expected value.
    errorcode = ~isequal(value, 'channel2');

    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The function did not return the expected value.');

        % Post the results.    
        fprintf('Actual values:');
        allOutputArguments     = {value};
        allOutputArgumentNames = {'value'};
    
        for j = 1:length(allOutputArguments)
            tempArg  = allOutputArguments{j};
            tempName = allOutputArgumentNames{j};
    
            if ~iscell(tempArg)
                tempArg = {tempArg};
            end

            % Loop through results and display them.
            for k = 1:length(tempArg)
                if isnumeric(tempArg{k}) &amp;&amp; numel(tempArg{k}) &lt; 10
                    fprintf(['    ' tempName '(' num2str(k) '): ' num2str(tempArg{k})]);
                elseif ischar(tempArg{k})
                    fprintf(['    ' tempName '(' num2str(k) '): ' tempArg{k}]);
                else
                    fprintf(['    ' tempName '(' num2str(k) '): ' num2str(size(tempArg{k}, 1)) ' by ' num2str(size(tempArg{k}, 2)) ' ' class(tempArg{k})]);
                end
            end
        end

        % Post the expected values.
        fprintf('Expected value:');
        fprintf(['    value = channel2']);
    end

end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 20: get equation multiplication (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Math');
    groupObj = groupObj(1);
    invoke(groupObj, 'getequation', 'traceB');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 21: set to reciprocal (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Math');
    groupObj = groupObj(1);
    invoke(groupObj, 'setmathequation', 'reciprocal','channel2','channel4','traceC');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 22: 1st channel (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Math');
    groupObj = groupObj(1);
    [value] = invoke(groupObj, 'getfirstchannel', 'traceC');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, value};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end
 
% Error if the function output argument(s) do not match the expected value(s).
if (errorcode == false)
    % Compare to the expected value.
    errorcode = ~isequal(value, 'channel2');

    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The function did not return the expected value.');

        % Post the results.    
        fprintf('Actual values:');
        allOutputArguments     = {value};
        allOutputArgumentNames = {'value'};
    
        for j = 1:length(allOutputArguments)
            tempArg  = allOutputArguments{j};
            tempName = allOutputArgumentNames{j};
    
            if ~iscell(tempArg)
                tempArg = {tempArg};
            end

            % Loop through results and display them.
            for k = 1:length(tempArg)
                if isnumeric(tempArg{k}) &amp;&amp; numel(tempArg{k}) &lt; 10
                    fprintf(['    ' tempName '(' num2str(k) '): ' num2str(tempArg{k})]);
                elseif ischar(tempArg{k})
                    fprintf(['    ' tempName '(' num2str(k) '): ' tempArg{k}]);
                else
                    fprintf(['    ' tempName '(' num2str(k) '): ' num2str(size(tempArg{k}, 1)) ' by ' num2str(size(tempArg{k}, 2)) ' ' class(tempArg{k})]);
                end
            end
        end

        % Post the expected values.
        fprintf('Expected value:');
        fprintf(['    value = channel2']);
    end

end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 23: 2nd channel (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Math');
    groupObj = groupObj(1);
    [value] = invoke(groupObj, 'getsecondchannel', 'traceC');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, value};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end
 
% Error if the function output argument(s) do not match the expected value(s).
if (errorcode == false)
    % Compare to the expected value.
    errorcode = ~isequal(value, '');

    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The function did not return the expected value.');

        % Post the results.    
        fprintf('Actual values:');
        allOutputArguments     = {value};
        allOutputArgumentNames = {'value'};
    
        for j = 1:length(allOutputArguments)
            tempArg  = allOutputArguments{j};
            tempName = allOutputArgumentNames{j};
    
            if ~iscell(tempArg)
                tempArg = {tempArg};
            end

            % Loop through results and display them.
            for k = 1:length(tempArg)
                if isnumeric(tempArg{k}) &amp;&amp; numel(tempArg{k}) &lt; 10
                    fprintf(['    ' tempName '(' num2str(k) '): ' num2str(tempArg{k})]);
                elseif ischar(tempArg{k})
                    fprintf(['    ' tempName '(' num2str(k) '): ' tempArg{k}]);
                else
                    fprintf(['    ' tempName '(' num2str(k) '): ' num2str(size(tempArg{k}, 1)) ' by ' num2str(size(tempArg{k}, 2)) ' ' class(tempArg{k})]);
                end
            end
        end

        % Post the expected values.
        fprintf('Expected value:');
        fprintf(['    value = ']);
    end

end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 24: get equation reciprocal (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Math');
    groupObj = groupObj(1);
    [value] = invoke(groupObj, 'getequation', 'traceC');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, value};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end
 
% Error if the function output argument(s) do not match the expected value(s).
if (errorcode == false)
    % Compare to the expected value.
    errorcode = ~isequal(value, 'reciprocal');

    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The function did not return the expected value.');

        % Post the results.    
        fprintf('Actual values:');
        allOutputArguments     = {value};
        allOutputArgumentNames = {'value'};
    
        for j = 1:length(allOutputArguments)
            tempArg  = allOutputArguments{j};
            tempName = allOutputArgumentNames{j};
    
            if ~iscell(tempArg)
                tempArg = {tempArg};
            end

            % Loop through results and display them.
            for k = 1:length(tempArg)
                if isnumeric(tempArg{k}) &amp;&amp; numel(tempArg{k}) &lt; 10
                    fprintf(['    ' tempName '(' num2str(k) '): ' num2str(tempArg{k})]);
                elseif ischar(tempArg{k})
                    fprintf(['    ' tempName '(' num2str(k) '): ' tempArg{k}]);
                else
                    fprintf(['    ' tempName '(' num2str(k) '): ' num2str(size(tempArg{k}, 1)) ' by ' num2str(size(tempArg{k}, 2)) ' ' class(tempArg{k})]);
                end
            end
        end

        % Post the expected values.
        fprintf('Expected value:');
        fprintf(['    value = reciprocal']);
    end

end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 25: set to identity (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Math');
    groupObj = groupObj(1);
    invoke(groupObj, 'setmathequation', 'identity','channel4','channel2','traceD');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 26: 1st channel (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Math');
    groupObj = groupObj(1);
    [value] = invoke(groupObj, 'getfirstchannel', 'traceD');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, value};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end
 
% Error if the function output argument(s) do not match the expected value(s).
if (errorcode == false)
    % Compare to the expected value.
    errorcode = ~isequal(value, 'channel4');

    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The function did not return the expected value.');

        % Post the results.    
        fprintf('Actual values:');
        allOutputArguments     = {value};
        allOutputArgumentNames = {'value'};
    
        for j = 1:length(allOutputArguments)
            tempArg  = allOutputArguments{j};
            tempName = allOutputArgumentNames{j};
    
            if ~iscell(tempArg)
                tempArg = {tempArg};
            end

            % Loop through results and display them.
            for k = 1:length(tempArg)
                if isnumeric(tempArg{k}) &amp;&amp; numel(tempArg{k}) &lt; 10
                    fprintf(['    ' tempName '(' num2str(k) '): ' num2str(tempArg{k})]);
                elseif ischar(tempArg{k})
                    fprintf(['    ' tempName '(' num2str(k) '): ' tempArg{k}]);
                else
                    fprintf(['    ' tempName '(' num2str(k) '): ' num2str(size(tempArg{k}, 1)) ' by ' num2str(size(tempArg{k}, 2)) ' ' class(tempArg{k})]);
                end
            end
        end

        % Post the expected values.
        fprintf('Expected value:');
        fprintf(['    value = channel4']);
    end

end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 27: 2nd channel (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Math');
    groupObj = groupObj(1);
    [value] = invoke(groupObj, 'getsecondchannel', 'traceD');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, value};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end
 
% Error if the function output argument(s) do not match the expected value(s).
if (errorcode == false)
    % Compare to the expected value.
    errorcode = ~isequal(value, '');

    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The function did not return the expected value.');

        % Post the results.    
        fprintf('Actual values:');
        allOutputArguments     = {value};
        allOutputArgumentNames = {'value'};
    
        for j = 1:length(allOutputArguments)
            tempArg  = allOutputArguments{j};
            tempName = allOutputArgumentNames{j};
    
            if ~iscell(tempArg)
                tempArg = {tempArg};
            end

            % Loop through results and display them.
            for k = 1:length(tempArg)
                if isnumeric(tempArg{k}) &amp;&amp; numel(tempArg{k}) &lt; 10
                    fprintf(['    ' tempName '(' num2str(k) '): ' num2str(tempArg{k})]);
                elseif ischar(tempArg{k})
                    fprintf(['    ' tempName '(' num2str(k) '): ' tempArg{k}]);
                else
                    fprintf(['    ' tempName '(' num2str(k) '): ' num2str(size(tempArg{k}, 1)) ' by ' num2str(size(tempArg{k}, 2)) ' ' class(tempArg{k})]);
                end
            end
        end

        % Post the expected values.
        fprintf('Expected value:');
        fprintf(['    value = channel2']);
    end

end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 28: get equation identity (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Math');
    groupObj = groupObj(1);
    [value] = invoke(groupObj, 'getequation', 'traceD');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, value};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end
 
% Error if the function output argument(s) do not match the expected value(s).
if (errorcode == false)
    % Compare to the expected value.
    errorcode = ~isequal(value, 'identity');

    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The function did not return the expected value.');

        % Post the results.    
        fprintf('Actual values:');
        allOutputArguments     = {value};
        allOutputArgumentNames = {'value'};
    
        for j = 1:length(allOutputArguments)
            tempArg  = allOutputArguments{j};
            tempName = allOutputArgumentNames{j};
    
            if ~iscell(tempArg)
                tempArg = {tempArg};
            end

            % Loop through results and display them.
            for k = 1:length(tempArg)
                if isnumeric(tempArg{k}) &amp;&amp; numel(tempArg{k}) &lt; 10
                    fprintf(['    ' tempName '(' num2str(k) '): ' num2str(tempArg{k})]);
                elseif ischar(tempArg{k})
                    fprintf(['    ' tempName '(' num2str(k) '): ' tempArg{k}]);
                else
                    fprintf(['    ' tempName '(' num2str(k) '): ' num2str(size(tempArg{k}, 1)) ' by ' num2str(size(tempArg{k}, 2)) ' ' class(tempArg{k})]);
                end
            end
        end

        % Post the expected values.
        fprintf('Expected value:');
        fprintf(['    value = identity']);
    end

end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 29: maxpoints-100 (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Math');
    groupObj = groupObj(1);
    invoke(groupObj, 'maxpoints', 100,'traceA');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 30: maxpoints-500 (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Math');
    groupObj = groupObj(1);
    invoke(groupObj, 'maxpoints', 500,'traceB');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end




% Test Step 26: factoryreset - Function (Function Test Step)

errorcode = false;
try
    % Execute the function.
    invoke(deviceObj, 'factoryreset');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf([result,'\n']);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.\n');
    fprintf([lasterr,'\n']);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Cleanup.

% Post results.
fprintf(['Stop time: ' datestr(now) '\n']);
if (errorOccurred == true)
    fprintf('Test status: FAILED\n');
    varargout{1} = false;
elseif (warningOccurred == true)
    fprintf('Test status: PASSED with warnings\n');
    varargout{1} = true;
else
    fprintf('Test status: PASSED\n');
    varargout{1} = true;
end

catch
    % An error occurred while running the test.
    fprintf('An error occurred while executing the test.\n');
    fprintf([lasterr,'\n']);
    varargout{1} = false;
end

</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>factoryreset</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="*RST" Output="false"/>
                     <Line Command=" COMM_HEADER OFF" Output="false"/>
                  </Commands>
               </Code>
               <Description>FACTORYRESET  Resets the oscilloscope to its factory default settings.

INVOKE(OBJ, 'factoryreset')  resets the oscilloscope to its factory settings.</Description>
            </Method>
            <Method>
               <Name>selfcalibrate</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="*CAL?" Output="false"/>
                  </Commands>
               </Code>
               <Description>SELFCALIBRATE Performs an internal self-calibration.

INVOKE(obj, 'selfcalibrate') to self-calibrate the oscilloscope. This function does not return any status information.</Description>
            </Method>
            <Method>
               <Name>setdate</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setdate(obj,day,month,year,hour,minute,second)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

% get the interface
interface = get(obj,'Interface');

% determines what code to send to the instrument
to_interface = sprintf('DATE %i,%s,%i,%i,%i,%i',day,month,year,hour,minute,second);

% sets the instrument
fprintf(interface,to_interface);</MCode>
               </Code>
               <Description>SETDATE sets the internal clock of the oscilloscope.

INVOKE(OBJ, 'setdate',DAY,MONTH,YEAR,HOUR,MINUTE,SECOND) </Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>acquisition</Name>
         <Description>The acquisition group defines properties and functions related to how the waveform is acquired and the timebase.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Acquisition1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Control</Name>
               <Location>acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>TRig_MoDe</ConfigureCommand>
                     <QueryCommand>TRig_MoDe?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="single" Value="SINGLE"/>
                     <Enum Name="run" Value="NORM"/>
                     <Enum Name="stop" Value="STOP"/>
                     <Enum Name="auto" Value="AUTO"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>run</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Tells the oscilloscope when to stop taking acquisitions for edge trigger type. 

</Description>
            </Property>
            <Property>
               <Name>Delay</Name>
               <Location>acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>TRig_DeLay</ConfigureCommand>
                     <QueryCommand>TRig_DeLay?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <DependentProperty>Timebase</DependentProperty>
                  <DependentPropertyValue>1.0e-8</DependentPropertyValue>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>Timebase</DependentProperty>
                  <DependentPropertyValue>1.0e-9</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100.0" Min="-1.0E-5"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>Timebase</DependentProperty>
                  <DependentPropertyValue>2.0e-9</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100.0" Min="-2.0E-5"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>Timebase</DependentProperty>
                  <DependentPropertyValue>5.0e-9</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100.0" Min="-5.0E-5"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>Timebase</DependentProperty>
                  <DependentPropertyValue>1.0e-8</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100.0" Min="-1.0E-4"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>Timebase</DependentProperty>
                  <DependentPropertyValue>2.0e-8</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100.0" Min="-2.0E-4"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>Timebase</DependentProperty>
                  <DependentPropertyValue>5.0e-8</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100.0" Min="-5.0E-4"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>Timebase</DependentProperty>
                  <DependentPropertyValue>1.0e-7</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100.0" Min="-0.0010"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>Timebase</DependentProperty>
                  <DependentPropertyValue>2.0e-7</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100.0" Min="-0.0020"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>Timebase</DependentProperty>
                  <DependentPropertyValue>5.0e-7</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100.0" Min="-0.0050"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>Timebase</DependentProperty>
                  <DependentPropertyValue>1.0e-6</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100.0" Min="-0.01"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>Timebase</DependentProperty>
                  <DependentPropertyValue>2.0e-6</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100.0" Min="-0.02"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>Timebase</DependentProperty>
                  <DependentPropertyValue>5.0e-6</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100.0" Min="-0.05"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>Timebase</DependentProperty>
                  <DependentPropertyValue>1.0e-5</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100.0" Min="-0.1"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>Timebase</DependentProperty>
                  <DependentPropertyValue>2.0e-5</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100.0" Min="-0.2"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>Timebase</DependentProperty>
                  <DependentPropertyValue>5.0e-5</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100.0" Min="-0.5"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>Timebase</DependentProperty>
                  <DependentPropertyValue>1.0e-4</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100.0" Min="-1.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>Timebase</DependentProperty>
                  <DependentPropertyValue>2.0e-4</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100.0" Min="-2.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>Timebase</DependentProperty>
                  <DependentPropertyValue>5.0e-4</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100.0" Min="-5.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>Timebase</DependentProperty>
                  <DependentPropertyValue>0.0010</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100.0" Min="-10.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>Timebase</DependentProperty>
                  <DependentPropertyValue>0.0020</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100.0" Min="-20.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>Timebase</DependentProperty>
                  <DependentPropertyValue>0.0050</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100.0" Min="-50.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>Timebase</DependentProperty>
                  <DependentPropertyValue>0.01</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100.0" Min="-100.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>Timebase</DependentProperty>
                  <DependentPropertyValue>0.02</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100.0" Min="-200.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>Timebase</DependentProperty>
                  <DependentPropertyValue>0.05</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100.0" Min="-500.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>Timebase</DependentProperty>
                  <DependentPropertyValue>0.1</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100.0" Min="-1000.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>Timebase</DependentProperty>
                  <DependentPropertyValue>0.2</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100.0" Min="-2000.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>Timebase</DependentProperty>
                  <DependentPropertyValue>0.5</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100.0" Min="-5000.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>Timebase</DependentProperty>
                  <DependentPropertyValue>1.0</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100.0" Min="-10000.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>Timebase</DependentProperty>
                  <DependentPropertyValue>2.0</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100.0" Min="-20000.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>Timebase</DependentProperty>
                  <DependentPropertyValue>5.0</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100.0" Min="-50000.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>Timebase</DependentProperty>
                  <DependentPropertyValue>10.0</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100.0" Min="-100000.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>Timebase</DependentProperty>
                  <DependentPropertyValue>20.0</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100.0" Min="-200000.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>Timebase</DependentProperty>
                  <DependentPropertyValue>50.0</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100.0" Min="-500000.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>Timebase</DependentProperty>
                  <DependentPropertyValue>100.0</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100.0" Min="-1000000.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>Timebase</DependentProperty>
                  <DependentPropertyValue>200.0</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100.0" Min="-2000000.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>Timebase</DependentProperty>
                  <DependentPropertyValue>500.0</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100.0" Min="-5000000.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>Timebase</DependentProperty>
                  <DependentPropertyValue>1000.0</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100.0" Min="-1.0E7"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the main time base horizontal position.</Description>
            </Property>
            <Property>
               <Name>State</Name>
               <Location>acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>TRig_MoDe</ConfigureCommand>
                     <QueryCommand>TRig_MoDe?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="stop" Value="STOP"/>
                     <Enum Name="run" Value="NORM"/>
                     <Enum Name="single" Value="SINGLE"/>
                     <Enum Name="auto" Value="AUTO"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>run</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Starts or stops oscilloscope acquisitions.</Description>
            </Property>
            <Property>
               <Name>Timebase</Name>
               <Location>acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>Time_DIV</ConfigureCommand>
                     <QueryCommand>Time_DIV? </QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0E-9</Value>
                     <Value>2.0E-9</Value>
                     <Value>5.0E-9</Value>
                     <Value>1.0E-8</Value>
                     <Value>2.0E-8</Value>
                     <Value>5.0E-8</Value>
                     <Value>1.0E-7</Value>
                     <Value>2.0E-7</Value>
                     <Value>5.0E-7</Value>
                     <Value>1.0E-6</Value>
                     <Value>2.0E-6</Value>
                     <Value>5.0E-6</Value>
                     <Value>1.0E-5</Value>
                     <Value>2.0E-5</Value>
                     <Value>5.0E-5</Value>
                     <Value>1.0E-4</Value>
                     <Value>2.0E-4</Value>
                     <Value>5.0E-4</Value>
                     <Value>0.0010</Value>
                     <Value>0.0020</Value>
                     <Value>0.0050</Value>
                     <Value>0.01</Value>
                     <Value>0.02</Value>
                     <Value>0.05</Value>
                     <Value>0.1</Value>
                     <Value>0.2</Value>
                     <Value>0.5</Value>
                     <Value>1.0</Value>
                     <Value>2.0</Value>
                     <Value>5.0</Value>
                     <Value>10.0</Value>
                     <Value>20.0</Value>
                     <Value>50.0</Value>
                     <Value>100.0</Value>
                     <Value>200.0</Value>
                     <Value>500.0</Value>
                     <Value>1000.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets the time per division for the main time base.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>channel</Name>
         <Description/>
         <Command/>
         <Size>4</Size>
         <Mappings>
            <ChannelMap Command="C4" Index="4"/>
            <ChannelMap Command="C3" Index="3"/>
            <ChannelMap Command="C2" Index="2"/>
            <ChannelMap Command="C1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>BandwidthLimit</Name>
               <Location>channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% queries the instrument 
fprintf(interface, 'BandWidth_Limit?');

% retrieve the value from the instrument
idn = scanstr(interface);

% gets the bandwidth limit separate from other data
try
    % gets the hardware index number
    hw = obj.HwIndex;
    
    % output of instrument is in the format of C1,ON,C2,OFF,C3,ON.....
    % need the value of the channel which is always at Hwindex * 2
    hw = hw * 2;

    % returns the value
    propertyValue = lower(idn{hw});
catch
    % if global bandwidth limit is on, then the output of the instrument is
    % just the bandwidthlimit with no headers
    propertyValue = lower(idn{1});
end</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% turns global bandwidth limit off
fprintf(interface,'GLOBAL_BWL OFF')

% get the hardware index number
hw = obj.HwIndex;

% determines what code to send to the instrument
to_interface = sprintf('BandWidth_Limit C%i,%s',hw,propertyValue);

% sets the instrument
fprintf(interface,to_interface)</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="on" Value="ON"/>
                     <Enum Name="off" Value="OFF"/>
                     <Enum Name="200MHz" Value="200MHZ"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>on</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the bandwidth setting of the specified oscilloscope channel.

</Description>
            </Property>
            <Property>
               <Name>Coupling</Name>
               <Location>channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
 
% get the device
device = get(obj,'Parent');
 
% get the interface
interface = get(device,'Interface');
 
% get the hardware index number
hw = obj.HwIndex;
 
% determines what code to send to the instrument
to_interface = sprintf('C%i:CouPLing?',hw);
 
% queries the instrument 
fprintf(interface,to_interface)
 
% retrieve the value from the instrument
value = scanstr(interface);
 
% converts the instrument value to the corresponding property value
instrumentValues = {'A1M', 'D1M', 'GND', 'D50'};
propertyValues = {'ac', 'dc', 'ground', '50ohms'};
idx = strmatch(value{1}, instrumentValues);
 
% returns the value
propertyValue = propertyValues{idx};
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% get the hardware index number
hw = obj.HwIndex;

% determines what code to send to the instrument
to_interface = sprintf('C%i:CouPLing %s', hw, propertyValue);

% sets the instrument
fprintf(interface,to_interface)</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="ac" Value="A1M"/>
                     <Enum Name="dc" Value="D1M"/>
                     <Enum Name="ground" Value="GND"/>
                     <Enum Name="50ohms" Value="D50"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>ac</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the coupling of the specified oscilloscope channel.</Description>
            </Property>
            <Property>
               <Name>Position</Name>
               <Location>channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');

% get the interface
interface = get(device, 'Interface');

% get the hardware index number
hw = obj.HwIndex;

% determines what code to send to the instrument
to_interface = sprintf('C%i:OFfSeT?', hw);

% queries the instrument 
fprintf(interface,to_interface)

% retrieve the value from the instrument
propertyValue = str2num(fscanf(interface));</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj, 'Parent');

% get the interface
interface = get(device, 'Interface');

% get the hardware index number
hw = obj.HwIndex;

% determines what code to send to the instrument
to_interface = sprintf('C%i:OFfSeT %i', hw, propertyValue);

% sets the instrument
fprintf(interface,to_interface);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="10.0" Min="-10.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the vertical position of the specified oscilloscope channel.  

</Description>
            </Property>
            <Property>
               <Name>Probe</Name>
               <Location>channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% get the hardware index number
hw = obj.HwIndex;

% determines what code to send to the instrument
to_interface = sprintf('C%i:ATTeNuation?', hw);

% queries the instrument 
fprintf(interface,to_interface)

% retrieve the value from the instrument
propertyValue = str2num(fscanf(interface));</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% get the hardware index number
hw = obj.HwIndex;

% determines what code to send to the instrument
to_interface = sprintf('C%i:ATTeNuation %i',hw,propertyValue);

% sets the instrument
fprintf(interface,to_interface)
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>2.0</Value>
                     <Value>5.0</Value>
                     <Value>10.0</Value>
                     <Value>20.0</Value>
                     <Value>25.0</Value>
                     <Value>50.0</Value>
                     <Value>100.0</Value>
                     <Value>200.0</Value>
                     <Value>500.0</Value>
                     <Value>1000.0</Value>
                     <Value>10000.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the attenuation factor of the specified channel.</Description>
            </Property>
            <Property>
               <Name>Scale</Name>
               <Location>channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% get the hardware index number
hw = obj.HwIndex;

% determines what code to send to the instrument
to_interface = sprintf('C%i:Volt_DIV?',hw);

% queries the instrument 
fprintf(interface,to_interface)

% retrieve the value from the instrument
propertyValue = str2num( fscanf(interface));
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% get the hardware index number
hw = obj.HwIndex;

% determines what code to send to the instrument
to_interface = sprintf('C%i:Volt_DIV %i',hw,propertyValue);

% sets the instrument
fprintf(interface,to_interface)</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="10.0" Min="0.0020"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.0020</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the vertical gain of the specified oscilloscope channel.</Description>
            </Property>
            <Property>
               <Name>State</Name>
               <Location>channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% get the hardware index number
hw = obj.HwIndex;

% determines what code to send to the instrument
to_interface = sprintf('C%i:TRAce?',hw);

% queries the instrument 
fprintf(interface,to_interface)

% retrieve the value from the instrument
value = scanstr(interface);

% returns the value
propertyValue=lower(value{1});</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% get the hardware index number
hw = obj.HwIndex;

% determines what code to send to the instrument
to_interface = sprintf('C%i:TRAce %s',hw,propertyValue);

% sets the instrument
fprintf(interface,to_interface)</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="off" Value="OFF"/>
                     <Enum Name="on" Value="ON "/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Enable or disable the display of the waveform on the scope.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>cursor</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Cursor1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>CursorType</Name>
               <Location>cursor</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>CuRsor_MeaSure</ConfigureCommand>
                     <QueryCommand>CuRsor_MeaSure?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="none" Value="OFF"/>
                     <Enum Name="custom" Value="CUST"/>
                     <Enum Name="fail" Value="FAIL"/>
                     <Enum Name="horizontalAbsolute" Value="HABS"/>
                     <Enum Name="standardTimeParameters" Value="HPAR"/>
                     <Enum Name="horizontalRelative" Value="HREL"/>
                     <Enum Name="pass" Value="PASS"/>
                     <Enum Name="verticalAbsolute" Value="VABS"/>
                     <Enum Name="standardVoltageParameters" Value="VPAR"/>
                     <Enum Name="verticalRelative" Value="VREL"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>none</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Selects the cursor type.</Description>
            </Property>
            <Property>
               <Name>HorizontalBarDelta</Name>
               <Location>cursor</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
 
% get the userData
userData = get(get(obj, 'Parent'), 'UserData');
 
% get the device
device = get(obj,'Parent');
 
% get the interface
interface = get(device,'Interface');
 
% gets the user specified source
chan = userData.source;
 
% gets first cursor value
to_interface = sprintf('%s:PEr_Cursor_Value? HABS',chan);
 
% queries the instrument 
fprintf(interface,to_interface)
 
% retrieve the value from the instrument
idn = scanstr(interface);
% need just the second part of the data because the first part is 
% the type of value returned 
value1 = idn{2};
 
% gets second cursor value
to_interface = sprintf('%s:PEr_Cursor_Value? HREL',chan)
 
% queries the instrument 
fprintf(interface,to_interface)
 
% retrieve the value from the instrument
idn = scanstr(interface);
% need just the second part of the data because the first part is 
% the type of value returned
value2 = idn{2};
 
% returns the difference of the two values
propertyValue = value2 - value1;

</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the difference (in vertical units) between the two horizontal bar cursors in the oscilloscope display.</Description>
            </Property>
            <Property>
               <Name>HorizontalBarPosition1</Name>
               <Location>cursor</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the userData 
userData = get(get(obj, 'Parent'), 'UserData');

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% gets the user specified source
chan = userData.source;

% determines what code to send to the instrument
to_interface = sprintf('%s:PEr_Cursor_Set? HABS',chan);

% queries the instrument 
fprintf(interface,to_interface)

% retrieve the value from the instrument
idn = scanstr(interface);

% returns the value
% need just the second part of the data because the first part is 
% the type of value returned
propertyValue = idn{2};</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the userData 
userData = get(get(obj, 'Parent'), 'UserData');

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% gets the user specified source
chan = userData.source;

% determines what code to send to the instrument
to_interface = sprintf('%s:PEr_Cursor_Set HABS, %i',chan,propertyValue);

% sets the instrument 
fprintf(interface,to_interface)</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the first horizontal bar cursor position.</Description>
            </Property>
            <Property>
               <Name>HorizontalBarPosition2</Name>
               <Location>cursor</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the userData 
userData = get(get(obj, 'Parent'), 'UserData');

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% gets the user specified source
chan = userData.source;

% determines what code to send to the instrument
to_interface = sprintf('%s:PEr_Cursor_Set? HREF',chan);

% queries the instrument 
fprintf(interface,to_interface)

% retrieve the value from the instrument
idn = scanstr(interface);

% returns the value
% need just the second part of the data because the first part is 
% the type of value returned
propertyValue = idn{2};</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the userData 
userData = get(get(obj, 'Parent'), 'UserData');

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% gets the user specified source
chan = userData.source;

% determines what code to send to the instrument
to_interface = sprintf('%s:PEr_Cursor_Set HREF, %i',chan,propertyValue);

% sets the instrument 
fprintf(interface,to_interface)</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the second horizontal bar cursor position.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>cursor</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the userData 
userData = get(get(obj, 'Parent'), 'UserData');

% gets the user specified source
value = userData.source;

% converts the instrument value into its corresponding property value
validValues = {'channel1','channel2','channel3','channel4','traceA','traceB','traceC','traceD'};
scopeValues = {'C1', 'C2', 'C3', 'C4', 'TA', 'TB', 'TC', 'TD'};
idx = strmatch(value,scopeValues, 'exact');

% returns the value
propertyValue = validValues{idx};</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the userData 
userData = get(get(obj, 'Parent'), 'UserData');

% sets the user specified source
userData.source = propertyValue;
set(get(obj, 'Parent'), 'UserData', userData);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="channel1" Value="C1"/>
                     <Enum Name="channel2" Value="C2"/>
                     <Enum Name="channel3" Value="C3"/>
                     <Enum Name="channel4" Value="C4"/>
                     <Enum Name="traceA" Value="TA"/>
                     <Enum Name="traceB" Value="TB"/>
                     <Enum Name="traceC" Value="TC"/>
                     <Enum Name="traceD" Value="TD"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>channel1</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the waveform that is the source of the vertical and horizontal scale factors used in determining cursor values.
This value should be set before using the horizontal or vertical properties.</Description>
            </Property>
            <Property>
               <Name>VerticalBarDelta</Name>
               <Location>cursor</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
 
% get the userData 
userData = get(get(obj, 'Parent'), 'UserData');
 
% get the device
device = get(obj,'Parent');
 
% get the interface
interface = get(device,'Interface');
 
% gets the user specified source
chan = userData.source;
 
% gets first cursor value
to_interface = sprintf('%s:PEr_Cursor_Value? VABS',chan);
 
% queries the instrument 
fprintf(interface,to_interface)
 
% retrieve the value from the instrument
idn = scanstr(interface);
% need just the second part of the data because the first part is 
% the type of value returned
value1 = idn{2};
 
% gets second cursor value
to_interface = sprintf('%s:PEr_Cursor_Value?  VREL',chan);
 
% queries the instrument 
fprintf(interface,to_interface)
 
% retrieve the value from the instrument
idn = scanstr(interface);
% need just the second part of the data because the first part is 
% the type of value returned
value2 = idn{2};
 
% returns the difference of the two values
propertyValue = value2 - value1;

</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the time or frequency difference between the two vertical bar cursors.</Description>
            </Property>
            <Property>
               <Name>VerticalBarPosition1</Name>
               <Location>cursor</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the userData 
userData = get(get(obj, 'Parent'), 'UserData');

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% gets the user specified source
chan = userData.source;

% determines what code to send to the instrument
to_interface = sprintf('%s:PEr_Cursor_Set? VABS',chan);

% queries the instrument 
fprintf(interface,to_interface)

% retrieve the value from the instrument
idn = scanstr(interface);

% returns the value
% need just the second part of the data because the first part is 
% the type of value returned
propertyValue = idn{2};</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the userData 
userData = get(get(obj, 'Parent'), 'UserData');

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% gets the user specified source
chan = userData.source;

% determines what code to send to the instrument
to_interface = sprintf('%s:PEr_Cursor_Set VABS, %i',chan,propertyValue);

% sets the instrument 
fprintf(interface,to_interface)</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the first vertical bar cursor position.</Description>
            </Property>
            <Property>
               <Name>VerticalBarPosition2</Name>
               <Location>cursor</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the userData 
userData = get(get(obj, 'Parent'), 'UserData');

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% gets the user specified source
chan = userData.source;

% determines what code to send to the instrument
to_interface = sprintf('%s:PEr_Cursor_Set? VREF',chan);

% queries the instrument 
fprintf(interface,to_interface)

% retrieve the value from the instrument
idn = scanstr(interface);

% returns the value 
% need just the second part of the data because the first part is 
% the type of value returned
propertyValue = idn{2};</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the userData 
userData = get(get(obj, 'Parent'), 'UserData');

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% gets the user specified source
chan = userData.source;

% determines what code to send to the instrument
to_interface = sprintf('%s:PEr_Cursor_Set VREF, %i',chan,propertyValue);

% sets the instrument 
fprintf(interface,to_interface)</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the second vertical bar cursor position.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>display</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Display1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>BackgroundColor</Name>
               <Location>display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
 
% get the device
device = get(obj,'Parent');
 
% get the interface
interface = get(device,'Interface');
 
% queries the instrument
% returns all of settings' colors
fprintf(interface,'COLOR?')
 
% retrieve the value from the instrument
idn = scanstr(interface);
 
% gets the background color, the 26th value of the returned instrument 
% string, separate from the rest of the color settings
propertyValue = lower(idn{26});
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
 
% get the userData 
userData = get(get(obj, 'Parent'), 'UserData');
 
% get the device
device = get(obj,'Parent');
 
% get the interface
interface = get(device,'Interface');
 
% checks to see if the propertyValue is a valid color 
validColor = userData.color;
idx = strmatch(upper(propertyValue),validColor,'exact');
 
if(isempty(idx))
    error('instrument:property:invalidValue','Intput value is an invalid color.')
end
 
% checks to see if the color scheme is on a user defined scheme
scheme = get(obj,'colorscheme');
 
% changes the color scheme to one of the user schemes if it isn't already set to one
% checks to see if the length of color scheme is equal to 1 
% all non user defined schemes have name length of one while all the user
% defined schemes have a name length of two
if(length(scheme) == 1)
    warning('instrument:property:settingsConflict','Changing color scheme to U1 so that colors can be changed.')
    fprintf(interface,'Color_SCHeme U1')
end
 
% determines what code to send to the instrument
to_interface = sprintf('COLOR BACKGND,%s',propertyValue);
 
% sets the instrument
fprintf(interface,to_interface);
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the background color.</Description>
            </Property>
            <Property>
               <Name>ColorScheme</Name>
               <Location>display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>Color_SCHeme</ConfigureCommand>
                     <QueryCommand>Color_SCHeme?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="1" Value="1"/>
                     <Enum Name="2" Value="2"/>
                     <Enum Name="3" Value="3"/>
                     <Enum Name="4" Value="4"/>
                     <Enum Name="5" Value="5"/>
                     <Enum Name="6" Value="6"/>
                     <Enum Name="U1" Value="U1"/>
                     <Enum Name="U2" Value="U2"/>
                     <Enum Name="U3" Value="U3"/>
                     <Enum Name="U4" Value="U4"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the overlay color scheme.</Description>
            </Property>
            <Property>
               <Name>Contrast</Name>
               <Location>display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% queries the instrument 
fprintf(interface,'INTenSity?')

% retrieve the value from the instrument
idn = scanstr(interface);

% returns the value
propertyValue = idn{2};</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% determines what code to send to the instrument
to_interface = sprintf('INTenSity TRACE,%i,GRID,%i',propertyValue,propertyValue);

% sets the instrument 
fprintf(interface,to_interface)</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>10.0</Value>
                     <Value>20.0</Value>
                     <Value>30.0</Value>
                     <Value>40.0</Value>
                     <Value>50.0</Value>
                     <Value>60.0</Value>
                     <Value>70.0</Value>
                     <Value>80.0</Value>
                     <Value>90.0</Value>
                     <Value>100.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>50</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set or query the contrast of the LCD display.</Description>
            </Property>
            <Property>
               <Name>CursorColor</Name>
               <Location>display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
 
% get the device
device = get(obj,'Parent');
 
% get the interface
interface = get(device,'Interface');
 
% queries the instrument
% returns all of settings' colors
fprintf(interface,'COLOR?')
 
% retrieve the value from the instrument
idn = scanstr(interface);
 
% gets the cursor color, the 22nd value of the returned instrument 
% string, separate from the rest of the color settings
propertyValue = lower(idn{22});

</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
 
% get the userData 
userData = get(get(obj, 'Parent'), 'UserData');
 
% get the device
device = get(obj,'Parent');
 
% get the interface
interface = get(device,'Interface');
 
% checks to see if the propertyValue is a valid color 
validColor = userData.color;
idx = strmatch(upper(propertyValue),validColor,'exact');
 
if(isempty(idx))
    error('instrument:property:invalidValue','Intput value is an invalid color.')
end
 
% checks to see if the color scheme is on a user scheme
scheme = get(obj,'colorscheme');
 
% changes the color scheme to one of the user schemes if it isn't already set to one
% checks to see if the length of color scheme is equal to 1 
% all non user defined schemes have name length of one while all the user
% defined schemes have a name length of two
if(length(scheme) == 1)
    warning('instrument:property:settingsConflict','Changing color scheme to U1 so that colors can be changed.')
    fprintf(interface,'Color_SCHeme U1')
end
 
% determines what code to send to the instrument
to_interface = sprintf('COLOR CURSOR,%s',propertyValue);
 
% sets the instrument
fprintf(interface,to_interface)


</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the cursor color.</Description>
            </Property>
            <Property>
               <Name>Format</Name>
               <Location>display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>XY_DiSplay</ConfigureCommand>
                     <QueryCommand>XY_DiSplay?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="xy" Value="ON"/>
                     <Enum Name="yt" Value="OFF"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>xy</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the oscilloscope display format.</Description>
            </Property>
            <Property>
               <Name>Grid</Name>
               <Location>display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>GRID</ConfigureCommand>
                     <QueryCommand>GRID?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="single" Value="SINGLE"/>
                     <Enum Name="dual" Value=" DUAL"/>
                     <Enum Name="quad" Value="QUAD"/>
                     <Enum Name="octal" Value=" OCTAL"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>single</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the oscilloscope's grid style.</Description>
            </Property>
            <Property>
               <Name>GridColor</Name>
               <Location>display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
 
% get the device
device = get(obj,'Parent');
 
% get the interface
interface = get(device,'Interface');
 
% queries the instrument
% returns all of settings' colors
fprintf(interface,'COLOR?')
 
% retrieve the value from the instrument
idn = scanstr(interface);
 
% gets the grid color, the 18th value of the returned instrument 
% string, separate from the rest of the color settings
propertyValue = lower(idn{18});

</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
 
% get the userData 
userData = get(get(obj, 'Parent'), 'UserData');
 
% get the device
device = get(obj,'Parent');
 
% get the interface
interface = get(device,'Interface');
 
% checks to see if the propertyValue is a valid color 
validColor = userData.color;
idx = strmatch(upper(propertyValue),validColor,'exact');
 
if(isempty(idx))
    error('instrument:property:invalidValue','Intput value is an invalid color.')
end
 
% checks to see if the color scheme is on a user scheme
scheme = get(obj,'colorscheme');
 
% changes the color scheme to one of the user schemes if it isn't already set to one
% checks to see if the length of color scheme is equal to 1 
% all non user defined schemes have name length of one while all the user
% defined schemes have a name length of two
if(length(scheme) == 1)
    warning('instrument:property:settingsConflict','Changing color scheme to U1 so that colors can be changed.')
    fprintf(interface,'Color_SCHeme U1')
end
 
% determines what code to send to the instrument
to_interface = sprintf('COLOR GRID,%s',propertyValue);
 
% sets the instrument
fprintf(interface,to_interface)

</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the grid color.</Description>
            </Property>
            <Property>
               <Name>Neutralcolor</Name>
               <Location>display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
 
% get the device
device = get(obj,'Parent');
 
% get the interface
interface = get(device,'Interface');
 
% queries the instrument
% returns all of settings' colors
fprintf(interface,'COLOR?')
 
% retrieve the value from the instrument
idn = scanstr(interface);
 
% gets the neutral color, the 24th value of the returned instrument 
% string, separate from the rest of the color settings
propertyValue = lower(idn{24});

</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
 
% get the userData 
userData = get(get(obj, 'Parent'), 'UserData');
 
% get the device
device = get(obj,'Parent');
 
% get the interface
interface = get(device,'Interface');
 
% checks to see if the propertyValue is a valid color 
validColor = userData.color;
idx = strmatch(upper(propertyValue),validColor,'exact');
 
if(isempty(idx))
    error('instrument:property:invalidValue','Intput value is an invalid color.')
end
 
% checks to see if the color scheme is on a user scheme
scheme = get(obj,'colorscheme');
 
% changes the color scheme to one of the user schemes if it isn't already set to one
% checks to see if the length of color scheme is equal to 1 
% all non user defined schemes have name length of one while all the user
% defined schemes have a name length of two
if(length(scheme) == 1)
    warning('instrument:property:settingsConflict','Changing color scheme to U1 so that colors can be changed.')
    fprintf(interface,'Color_SCHeme U1')
end
 
% determines what code to send to the instrument
to_interface = sprintf('COLOR NEUTRAL,%s',propertyValue);
 
% sets the instrument
fprintf(interface,to_interface)

</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the neutral color.</Description>
            </Property>
            <Property>
               <Name>OverlayColor</Name>
               <Location>display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% queries the instrument
% returns all of settings' colors
fprintf(interface,'COLOR?')

% retrieve the value from the instrument
idn = scanstr(interface);

% gets the overlay color, the 30th value of the returned instrument 
% string, separate from the rest of the color settings
propertyValue = lower(idn{30});</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the userData 
userData = get(get(obj, 'Parent'), 'UserData');

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% checks to see if the propertyValue is a valid color 
validColor = userData.color;
idx = strmatch(upper(propertyValue),validColor,'exact');

if(isempty(idx))
    error('instrument:property:invalidValue','Intput value is an invalid color.')
end

% checks to see if the color scheme is on a user scheme
scheme = get(obj,'colorscheme');

% changes the color scheme to one of the user schemes if it isn't already set to one
% checks to see if the length of color scheme is equal to 1 
% all non user defined schemes have name length of one while all the user
% defined schemes have a name length of two
if(length(scheme) == 1)
    warning('instrument:property:settingsConflict','Changing color scheme to U1 so that colors can be changed.')
	fprintf(interface,'Color_SCHeme U1')
end

% determines what code to send to the instrument
to_interface = sprintf('COLOR OVERLAYS,%s',propertyValue);

% sets the instrument
fprintf(interface,to_interface)</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the overlay color.</Description>
            </Property>
            <Property>
               <Name>Persistence</Name>
               <Location>display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% Tell the instrument you want it to tell you the value
fprintf(interface, 'PErsist_SetUp?');

% queries the instrument 
idn = scanstr(interface);

% retrieve the value from the instrument
if(ischar(idn{1}))
    propertyValue = 'infinite';
else
    propertyValue = idn{1};
end;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% determines what data type is and sets the instrument
if(propertyValue == 5E-1)
    fprintf(interface,'PErsist_SetUp 0.5,ALL')
elseif(ischar(propertyValue))
    fprintf(interface,'PErsist_SetUp %s,ALL',propertyValue)
else
    fprintf(interface,'PErsist_SetUp %i,ALL',propertyValue)
end;







</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="infinite" Value="infinite"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.5</Value>
                     <Value>1.0</Value>
                     <Value>2.0</Value>
                     <Value>5.0</Value>
                     <Value>10.0</Value>
                     <Value>20.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>infinite</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets the length of time that data points are displayed.</Description>
            </Property>
            <Property>
               <Name>Style</Name>
               <Location>display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>DoT_JoiN</ConfigureCommand>
                     <QueryCommand>DoT_JoiN?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="dots" Value="ON"/>
                     <Enum Name="vectors" Value="OFF"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>dots</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Selects how to display the waveform data.</Description>
            </Property>
            <Property>
               <Name>TextColor</Name>
               <Location>display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% queries the instrument
% returns all of settings' colors
fprintf(interface,'COLOR?')

% retrieve the value from the instrument
idn = scanstr(interface);

% gets the text color, the 20th value of the returned instrument 
% string, separate from the rest of the color settings
propertyValue = lower(idn{20});</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the userData 
userData = get(get(obj, 'Parent'), 'UserData');

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% checks to see if the propertyValue is a valid color 
validColor = userData.color;
idx = strmatch(upper(propertyValue),validColor,'exact');

if(isempty(idx))
    error('instrument:property:invalidValue','Intput value is an invalid color.')
end 

% checks to see if the color scheme is on a user scheme
scheme = get(obj,'colorscheme');

% changes the color scheme to one of the user schemes if it isn't already set to one
% checks to see if the length of color scheme is equal to 1 
% all non user defined schemes have name length of one while all the user
% defined schemes have a name length of two
if(length(scheme) == 1)
    warning('instrument:property:settingsConflict','Changing color scheme to U1 so that colors can be changed.')
	fprintf(interface,'Color_SCHeme U1')
end
 
% determines what code to send to the instrument
to_interface = sprintf('COLOR TEXT,%s',propertyValue);

% sets the instrument
fprintf(interface,to_interface) </SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the text color.</Description>
            </Property>
            <Property>
               <Name>WarningColor</Name>
               <Location>display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
 
% get the device
device = get(obj,'Parent');
 
% get the interface
interface = get(device,'Interface');
 
% queries the instrument
% returns all of settings' colors
fprintf(interface,'COLOR?')
 
% retrieve the value from the instrument
idn = scanstr(interface);
 
% gets the warning color, the 28th value of the returned instrument 
% string, separate from the rest of the color settings
propertyValue = lower(idn{28});
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
 
% get the userData 
userData = get(get(obj, 'Parent'), 'UserData');
 
% get the device
device = get(obj,'Parent');
 
% get the interface
interface = get(device,'Interface');
 
% checks to see if the propertyValue is a valid color 
validColor = userData.color;
idx = strmatch(upper(propertyValue),validColor,'exact');
 
if(isempty(idx))
    error('instrument:property:invalidValue','Intput value is an invalid color.')
end 
 
% checks to see if the color scheme is on a user scheme
scheme = get(obj,'colorscheme');
 
% changes the color scheme to one of the user schemes if it isn't already set to one
% checks to see if the length of color scheme is equal to 1 
% all non user defined schemes have name length of one while all the user
% defined schemes have a name length of two
if(length(scheme) == 1)
    warning('instrument:property:settingsConflict','Changing color scheme to U1 so that colors can be changed.')
    fprintf(interface,'Color_SCHeme U1')
end 
 
% determines what code to send to the instrument
to_interface = sprintf('COLOR WARNING,%s',propertyValue);
 
% sets the instrument
fprintf(interface,to_interface) 

</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the warning color.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>channelcolor</Name>
               <Location>display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function channelcolor(obj,chan,color)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

% get the userData 
userData = get(get(obj, 'Parent'), 'UserData');

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% checks to see if the color entered is valid  
validColor = userData.color;
idx = strmatch(upper(color),validColor,'exact');
if(isempty(idx))
    error('instrument:property:invalidValue','COLOR input is an invalid color.')
end;

% checks to see if the the color scheme is on a user scheme
scheme = get(obj,'colorscheme');

% changes the color scheme to one of the user schemes if it isnt already set to one
% checks to see if the length of color scheme is equal to 1 
% all non user defined schemes have name length of one while all the user
% defined schemes have a name length of two
if(length(scheme) == 1)
    warning('instrument:property:settingsConflict','Changing color scheme to U1 so that colors can be changed.')
	fprintf(interface,'Color_SCHeme U1')
end 

% chcks to see if the channel entered is valid
validValues = {'channel1','channel2','channel3','channel4','traceA','traceB','traceC','traceD'};
scopeValues = {'C1', 'C2', 'C3', 'C4', 'TA', 'TB', 'TC', 'TD'};
idx = strmatch(chan,validValues);
str=' channel1, channel2, channel3, channel4, traceA, traceB, traceC, traceD';
if (isempty(idx))
    error('instrument:property:invalidValue','CHANNEL must be one of:%s',str);
end
trueSource = scopeValues{idx};

% determines what code to send to the instrument
to_interface = sprintf('COLOR %s,%s',trueSource,color);

% sets the instrument
fprintf(interface,to_interface) 
</MCode>
               </Code>
               <Description>CHANCOLOR changes the specified channel's or trace's color

INVOKE(OBJ,chanColor,CHANNEL,COLOR) sets the color of the waveform of CHANNEL to COLOR.

Example:
	invoke(obj, 'chanColor', 'channel1','blue');

Channel must be one of : channel1, channel2, channel3, channel4.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>math</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Math1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>bits</Name>
               <Location>math</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function bits(obj,bits,trace)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');


% converts the user input for trace to an instrument value
validValues = {'traceA','traceB','traceC','traceD'};
scopeValues = {'TA', 'TB', 'TC', 'TD'};
idx = strmatch(trace,validValues, 'exact');
trace = scopeValues{idx};

% determines what code to send to the instrument
to_interface = sprintf('%s:DEFine BITS, %i',trace,bits);

% sets the instrument
fprintf(interface,to_interface)</MCode>
               </Code>
               <Description>BITS sets the number of ERES bits 

INVOKE(OBJ,'bits',BITS,TRACE) sets the number of ERES bits to BITS for TRACE

Trace must be one of : traceA, traceB, traceC, traceD.

</Description>
            </Method>
            <Method>
               <Name>getequation</Name>
               <Location>math</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function value = getequation(obj,trace)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% converts the user input for trace to an instrument value
validValuesTrace = {'traceA','traceB','traceC','traceD'};
scopeValues = {'TA', 'TB', 'TC', 'TD'};
idTrace = strmatch(trace,validValuesTrace, 'exact');
trace = scopeValues{idTrace};

% determines what code to send to the instrument
to_interface = sprintf('%s:DEFine?',trace);

% queries the instrument
fprintf(interface,to_interface)

% retrieve the value from the instrument
% looks for the second argument because the first is the word EQN and the 
% actual value follows after it
idn = scanstr(interface);
equation = idn{2};

% converts the instrument value into the property value
switch length(equation)
    case 7
        if(~isempty(strfind(equation,'-')))
            value = 'subtraction' ;
        elseif(~isempty(strfind (equation,'+')))
            value = 'addition';
        elseif(~isempty(strfind (equation,'/')))
            value = 'ratio';
        elseif(~isempty(strfind(equation,'*')))
            value = 'multiplication' ;
        else
            value = equation;
        end
    case 6
        if(~isempty(strfind (equation,'1/')))
            value = 'reciprocal';
        else
            value = equation;
        end
    case 5
        if(~isempty(strfind(equation,'-')))
            value = 'negation';
        elseif(~isempty(strfind(equation,'+')))
            value = 'identity' ;
        else
            value = equation;
        end
    otherwise
        value = equation;
end
        
            
    


</MCode>
               </Code>
               <Description>Returns the equation used in for TRACE.

INVOKE(OBJ,'getequation',TRACE) 

Trace must be one of : traceA, traceB, traceC, traceD.</Description>
            </Method>
            <Method>
               <Name>getfirstchannel</Name>
               <Location>math</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function value = getfirstchannel(obj, trace)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% converts the user input for trace to an instrument value
validValuesTrace = {'traceA','traceB','traceC','traceD'};
scopeValues = {'TA', 'TB', 'TC', 'TD'};
idTrace = strmatch(trace,validValuesTrace, 'exact');
trace = scopeValues{idTrace};

% determines what code to send to the instrument
to_interface = sprintf('%s:DEFine?',trace);

% queries the instrument
fprintf(interface,to_interface)

% retrieve the value from the instrument
% looks for the second argument because the first is the word EQN and the 
% actual value follows after it
idn = scanstr(interface);
equation = idn{2};

% finds out the letter C in the equation
findC = strfind(equation,'C');

% adds one to the location of letter C, this gives the channel location
channelLocation = findC(1) + 1;

% gets tje channel number from the location using the channel location 
%number
channelNumber =  equation(channelLocation);

% returns the value
value = sprintf('channel%s',channelNumber);

  
  </MCode>
               </Code>
               <Description>Returns the first channel used for TRACE.

INVOKE(OBJ,'getfirstchannel',TRACE) 

Trace must be one of : traceA, traceB, traceC, traceD.</Description>
            </Method>
            <Method>
               <Name>getsecondchannel</Name>
               <Location>math</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function value = getsecondchannel(obj, trace)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% converts the user input for trace to an instrument value
validValuesTrace = {'traceA','traceB','traceC','traceD'};
scopeValues = {'TA', 'TB', 'TC', 'TD'};
idTrace = strmatch(trace,validValuesTrace, 'exact');
trace = scopeValues{idTrace};

% determines what code to send to the instrument
to_interface = sprintf('%s:DEFine?',trace);

% queries the instrument
fprintf(interface,to_interface)

% retrieve the value from the instrument
% looks for the second argument because the first is the word EQN and the 
% actual value follows after it
idn = scanstr(interface);
equation = idn{2};

% finds out the letter C in the equation
findC = strfind(equation,'C');

% looks for the second occurance of the letter c but if one isnt found
% then only one channel was used and an empty string is returned
try
    % adds one to the location of letter C, this gives the channel location
    channelLocation = findC(2) + 1;

    % gets tje channel number from the location using the channel location
    %number
    channelNumber =  equation(channelLocation);

    % returns the value
    value = sprintf('channel%s',channelNumber);
catch
    value = '';
end</MCode>
               </Code>
               <Description>Returns the second channel used  for TRACE.

INVOKE(OBJ,'getequation',TRACE) 

Trace must be one of : traceA, traceB, traceC, traceD.

If only one channel is used this function returns an empty string.</Description>
            </Method>
            <Method>
               <Name>maxpoints</Name>
               <Location>math</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function maxpoints(obj,maxPoints,trace)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% converts the user input for trace to an instrument value
validValues = {'traceA','traceB','traceC','traceD'};
scopeValues = {'TA', 'TB', 'TC', 'TD'};
idx = strmatch(trace,validValues, 'exact');
trace = scopeValues{idx};

% determines what code to send to the instrument
to_interface = sprintf('%s:DEFine MAXPTS, %i',trace,maxPoints);

% sets the instrument
fprintf(interface,to_interface)</MCode>
               </Code>
               <Description>MAXPOINTS sets the maximum number of points for TRACE

INVOKE(OBJ,'maxPoints',MAXPOINTS,TRACE) 

Trace must be one of : traceA, traceB, traceC, traceD.</Description>
            </Method>
            <Method>
               <Name>maxsweeps</Name>
               <Location>math</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function maxsweeps(obj,sweep,trace)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% converts the user input for trace to an instrument value
validValues = {'traceA','traceB','traceC','traceD'};
scopeValues = {'TA', 'TB', 'TC', 'TD'};
idx = strmatch(trace,validValues, 'exact');
trace = scopeValues{idx};

% determines what code to send to the instrument
to_interface = sprintf('%s:DEFine SWEEPS, %i',trace,sweep);

% sets the instrument
fprintf(interface,to_interface)</MCode>
               </Code>
               <Description>MAXSWEEPS sets the maximum number of sweeps for TRACE

INVOKE(OBJ,'maxSweeps',NUMBEROFSWEEPS,TRACE) 

Trace must be one of : traceA, traceB, traceC, traceD.</Description>
            </Method>
            <Method>
               <Name>setmathequation</Name>
               <Location>math</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setmathequation(obj,equation,firstChannel,secondChannel,trace)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% converts the user input for trace to an instrument value
validValuesTrace = {'traceA','traceB','traceC','traceD'};
scopeValues = {'TA', 'TB', 'TC', 'TD'};
idTrace = strmatch(trace,validValuesTrace, 'exact');
trace = scopeValues{idTrace};

% converts the user input for first and second channel to instrument values
validValuesChannel = {'channel1','channel2','channel3','channel4'};
scopeValues = {'C1', 'C2', 'C3', 'C4'};

idFirst = strmatch(firstChannel,validValuesChannel, 'exact');
firstChannel = scopeValues{idFirst};

idSecond = strmatch(secondChannel,validValuesChannel, 'exact');
secondChannel = scopeValues{idSecond};

% converts valid values to a string by converting the cell to a matrix and 
% then concatenating the strings with a ',' between each of the values
valuesTrace = cell2mat(strcat(validValuesTrace,','));
valuesChannel = cell2mat(strcat(validValuesChannel,','));

% cuts off the last character of the string because you don't want to end in
% a comma
valuesTrace = valuesTrace(1:length(valuesTrace)-1);
valuesChannel = valuesChannel(1:length(valuesChannel)-1);

% throws an error if values are not valid
if(isempty(idTrace))
    error('instrument:method:invalidValue','Trace must be one of:%s.',valuesTrace)
elseif(isempty(idFirst)||isempty(idSecond))
    error('instrument:method:invalidValue','Channel must be one of:%s.',valuesChannel)
end

% converts the equation into the instrument value
if(strcmpi(equation,'negation'))
    value = sprintf('-%s',firstChannel);
elseif(strcmpi(equation,'identity'))
    value = sprintf('+%s',firstChannel);
elseif(strcmpi(equation,'subtraction'))
    value = sprintf('%s-%s',firstChannel,secondChannel);
elseif(strcmpi(equation,'addition'))
    value = sprintf('%s+%s',firstChannel,secondChannel);
elseif (strcmpi(equation,'ratio'))
    value = sprintf('%s/%s',firstChannel,secondChannel);
elseif(strcmpi(equation,'multiplication'))
    value = sprintf('%s*%s',firstChannel,secondChannel);
elseif(strcmpi(equation,'reciprocal'))
    value = sprintf('1/%s',firstChannel);
else
    value = equation;
    warning('instrument:method:unknownValue','the equation that you have chosen is not a standard equation')
end

% determines what code to send to the instrument
to_interface = sprintf('%s:DEFine EQN, ''%s''',trace,value);

% sets the instrument
fprintf(interface,to_interface)</MCode>
               </Code>
               <Description>SETMATHEQUATION sets the math equation on TRACE to EQUATION, using FIRST and SECONDCHANNEL.

INVOKE(OBJ,'setMathEquation',EQUATION,FIRSTCHANNEL,SECONDCHANNEL,TRACE) 

Trace must be one of : traceA, traceB, traceC, traceD.
Channel must be one of : channel1, channel2, channel3, channel4.
Equation must be one of: negation, identity, subtraction, addition, ratio, multiplication, reciprocal or a custom equation</Description>
            </Method>
            <Method>
               <Name>weight</Name>
               <Location>math</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function weight(obj,weight,trace)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% converts the user input for trace to an instrument value
validValues = {'traceA','traceB','traceC','traceD'};
scopeValues = {'TA', 'TB', 'TC', 'TD'};
idx = strmatch(trace,validValues, 'exact');
trace = scopeValues{idx};

% determines what code to send to the instrument
to_interface = sprintf('%s:DEFine WEIGHT, %i',trace,weight);

% sets the instrument
fprintf(interface,to_interface)</MCode>
               </Code>
               <Description>WEIGHT sets the continuous average weight for TRACE

INVOKE(OBJ,'weight',TRACE) 

Trace must be one of : traceA, traceB, traceC, traceD.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>measurement</Name>
         <Description/>
         <Command/>
         <Size>5</Size>
         <Mappings>
            <ChannelMap Command="IMMED" Index="5"/>
            <ChannelMap Command="MEAS4" Index="4"/>
            <ChannelMap Command="MEAS3" Index="3"/>
            <ChannelMap Command="MEAS2" Index="2"/>
            <ChannelMap Command="MEAS1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>MeasurementType</Name>
               <Location>measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% gets the measurement type from userData
userData = get(get(obj, 'Parent'), 'UserData');
value = userData.measurment.type;

% converts the instrument value to the property value
validValues = {'frequency','mean','period','peak2peak','crms','amplitude','area','base'};
scopeValues = {'FREQ', 'MEAN', 'PER', 'PK2PK', 'CRM', 'AMPL', 'AREA', 'BASE'};
idx = strmatch(value,scopeValues, 'exact');

% returns the value
propertyValue = validValues{idx};

</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the userData 
userData = get(get(obj, 'Parent'), 'UserData');

% sets the user specified source
userData.measurment.type = propertyValue;
set(get(obj, 'Parent'), 'UserData', userData) 
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="frequency" Value="FREQ"/>
                     <Enum Name="mean" Value="MEAN"/>
                     <Enum Name="period" Value="PER"/>
                     <Enum Name="peak2peak" Value="PK2PK"/>
                     <Enum Name="crms" Value="CRM"/>
                     <Enum Name="amplitude" Value="AMPL"/>
                     <Enum Name="area" Value="AREA"/>
                     <Enum Name="base" Value="BASE"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>frequency</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or query the measurement type.  By default this driver supports the standard measurement types of the oscilloscope, and does not include any measurements supported only by expansion modules.  To add additional measurement types supported by your model, edit the driver using midedit.

Set this property and the Source property, before using the Value property.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% gets the source from userData
userData = get(get(obj, 'Parent'), 'UserData');
value = userData.measurment.source; 

% converts the instrument value to the property value
validValues = {'channel1','channel2','channel3','channel4'};
scopeValues = {'C1', 'C2', 'C3', 'C4'};
idx = strmatch(value,scopeValues, 'exact');

% returns the value
propertyValue = validValues{idx};
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the userData 
userData = get(get(obj, 'Parent'), 'UserData');

% sets the user specified source
userData.measurment.source = propertyValue;
set(get(obj, 'Parent'), 'UserData', userData) 
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="channel1" Value="C1"/>
                     <Enum Name="channel2" Value="C2"/>
                     <Enum Name="channel3" Value="C3"/>
                     <Enum Name="channel4" Value="C4"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>channel1</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the source of the measurement.

Set this property and the MeasurementType property, before using the Value property.</Description>
            </Property>
            <Property>
               <Name>Value</Name>
               <Location>measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% gets channel to use for measurement from userData
userData = get(get(obj, 'Parent'), 'UserData');
chan = userData.measurment.source;

% gets the measurement type
type = userData.measurment.type;

% determines what code to send to the instrument
to_interface = sprintf('%s:PArameter_VAlue? %s',chan,type);

% queries the instrument 
fprintf(interface,to_interface)

% retrieve the value from the instrument
idn = scanstr(interface);

% returns the value
propertyValue = idn{2};</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the value of a measurement.  If the object is the immediate measurement object (the HwName property is 'IMMED') this property is always valid.  For the standard periodic measurements, it is only a valid if the MesesurementType is not 'none'. 

Set Source and MeasurementType  properties, before using this property
</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>sequence</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Sequence1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Max</Name>
               <Location>sequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% queries the instrument 
fprintf(interface,'SEQUENCE?');

% retrieve the value from the instrument 
idn = scanstr(interface);

% converts max into a string so that its property value can be found
if(isnumeric(idn{3}))
    value=sprintf('%i',idn{3});
else
    value=sprintf('%s',idn{3});
end 

% converts the instrument value to the property value
validValues = {'50','100','250','500','1000','2500','5000 ','10000','25000','50000','100000','250000','500000','1000000','2500000','5000000','10000000'};
scopeValues = {'50','100','250','500','1000','2500', '5K', '10K', '25K','50K','100K','250K','500K','1M'};
idx = strmatch(value,scopeValues, 'exact');

% returns the value
propertyValue = str2num(validValues{idx});</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% queries the instrument 
fprintf(interface,'SEQUENCE?');

% retrieve the value from the instrument 
idn = scanstr(interface);
if(strcmp('OFF',idn{1}))
    warning('instrument:property:settingsConflict','mode is set to OFF right now and is being changed to ON so that max can be changed.')
end

% determines what code to send to the instrument
to_interface = sprintf('SEQUENCE ON,%i,%i ',idn{2},propertyValue);

% sets the instrument 
fprintf(interface,to_interface) </SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>50.0</Value>
                     <Value>100.0</Value>
                     <Value>250.0</Value>
                     <Value>500.0</Value>
                     <Value>1000.0</Value>
                     <Value>2500.0</Value>
                     <Value>5000.0</Value>
                     <Value>10000.0</Value>
                     <Value>25000.0</Value>
                     <Value>50000.0</Value>
                     <Value>100000.0</Value>
                     <Value>250000.0</Value>
                     <Value>500000.0</Value>
                     <Value>1000000.0</Value>
                     <Value>2500000.0</Value>
                     <Value>5000000.0</Value>
                     <Value>1.0E7</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>50</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the max size of the sequence mode.</Description>
            </Property>
            <Property>
               <Name>Mode</Name>
               <Location>sequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% queries the instrument 
fprintf(interface,'SEQUENCE?');

% retrieve the value from the instrument 
idn = scanstr(interface);

% returns the value
propertyValue = lower(idn{1});</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

%get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% determines what code to send to the instrument
to_interface = sprintf('SEQUENCE %s',propertyValue);

% sets the instrument 
fprintf(interface,to_interface) 

</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="on" Value="ON"/>
                     <Enum Name="off" Value="OFF"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the sequence mode.</Description>
            </Property>
            <Property>
               <Name>Segment</Name>
               <Location>sequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% queries the instrument 
fprintf(interface,'SEQUENCE?');

% retrieve the value from the instrument 
idn = scanstr(interface);

% returns the value
propertyValue = idn{2};</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% gets the mode from the instrument
fprintf(interface,'SEQUENCE?');

% retrieve the value from the instrument 
idn = scanstr(interface);

% determines what code to send to the instrument
to_interface = sprintf('SEQUENCE %s,%i',idn{1},propertyValue);

% sets the instrument 
fprintf(interface,to_interface);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>50.0</Value>
                     <Value>200.0</Value>
                     <Value>500.0</Value>
                     <Value>2000.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>50</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the max number of segments.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>system</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="System1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>loadstate</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function loadstate(obj,location)
% OBJ is the group object.
% LOCATION is the specified storage location

% Get the interface
interface = get(get(obj,'parent'),'interface');

% Error checking
    % LOCATION must be a scalar and between 1 and 5, inclusive.
    if ~isnumeric(location) 
        error('instrument:method:invalidValue','LOCATION must be numeric.')
    elseif location ~= floor(location)
        error('instrument:method:invalidValue','LOCATION must be a scalar.');
    elseif  location &gt;5 || location &lt;1
        error('instrument:method:invalidValue','LOCATION must be between 1 and 5 inclusive.');
    end

% Send memory name query command
fprintf(interface,['*RCL ' num2str(location)])
</MCode>
               </Code>
               <Description>LOADSTATE  Recall a previously stored state.

INVOKE(OBJ, loadstate, location) restores the state of the oscilloscope from a copy of settings stores in memory.

LOCATION must be between 1 and 5 inclusive.</Description>
            </Method>
            <Method>
               <Name>savestate</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function savestate(obj,location)
% OBJ is the group object.
% LOCATION is the specified storage location

% Get the interface
interface = get(get(obj,'parent'),'interface');

% Error checking
    % LOCATION must be a scalar and between 1 and 5, inclusive.
    if ~isnumeric(location) 
        error('instrument:method:invalidValue','LOCATION must be numeric.');
    elseif location ~= floor(location)
        error('instrument:method:invalidValue','LOCATION must be a scalar.');
    elseif  location &gt;5 || location &lt;1
        error('instrument:method:invalidValue','LOCATION must be between 1 and 5 inclusive.');
    end
    
% Send memory name query command
fprintf(interface,['*SAV ' num2str(location)])
</MCode>
               </Code>
               <Description>SAVESTATE  Save the current state of the oscilloscope.

INVOKE(OBJ,'savestate',location) stores an instrument configuration at the specified memory location, LOCATION.

LOCATION must be between 1 and 5 inclusive.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>trigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Coupling</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>TRig_CouPling</ConfigureCommand>
                     <QueryCommand> TRig_CouPling?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="ac" Value="AC"/>
                     <Enum Name="dc" Value="DC"/>
                     <Enum Name="highFreqRejection" Value="HFREJ"/>
                     <Enum Name="lowFreqRejection" Value="LFREJ"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>dc</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the type of coupling for the main edge trigger.  This is equivalent to setting Coupling in the Trigger menu.</Description>
            </Property>
            <Property>
               <Name>Holdoff</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% queries the instrument 
fprintf(interface,'TRig_SElect?')

% retrieve the value from the instrument 
% the instrument returns a string with the holdoff value as well as other
% related values
idn = scanstr(interface);

% finds where the holdtype is located in the string because the holdoff
% value is located after it
x = 1;
while(~strcmp(idn{x},'HT'))
    x = x + 1;
end

% determines if the holdtype is OFF
% The holdoff value is either the next value after holdtype if holdtype's 
% value is off, otherwise the holdoff value is 3 values latter
if(strcmp(idn{x+1},'OFF'))
    propertyValue = sprintf('%i',idn{x+1});
else
    propertyValue = idn{x+3};
end</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% queries the instrument 
fprintf(interface,'TRig_SElect?')

% retrieve the value from the instrument 
idn = scanstr(interface);

% gets the hold type
x = 1;
while(~strcmp(idn{x},'HT'))
    x = x + 1;
end;

% determines what code to send to the instrument
to_interface = sprintf('TRig_SElect %s,HT,%s,HV,%i',idn{1},idn{x+1},propertyValue);

% determines if the hold type is OFF
if(strcmp(idn{x},'OFF'))
    error('instrument:property:invalidValue','Hold type is set to off, must be on to change Holdoff')
else
	fprintf(interface,to_interface)
end
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="10.0" Min="1.0E-8"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>5.0E-7</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets the oscilloscope's main hold off value.</Description>
            </Property>
            <Property>
               <Name>HoldType</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% queries the instrument 
fprintf(interface,'TRig_SElect?')

% retrieve the value from the instrument 
idn = scanstr(interface);

% gets the hold type 
x = 1;
while(~strcmp(idn{x},'HT'))
    x = x + 1;
end 
value = idn{x+1};

% converts the instrument value to the property value
validValues = {'time', 'timeWithin', 'event', 'pulseSmaller', 'pulseLarger', 'intervalSmaller', 'intervalLarger', 'pulseWidthWindow', 'intervalWidthWindow', 'off'};
scopeValues = {'TI', 'TL', 'EV', 'PS', 'PL', 'IS', 'IL','P2','I2', 'OFF'};
idx = strmatch(value,scopeValues, 'exact');


propertyValue = validValues{idx};




</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% queries the instrument 
fprintf(interface,'TRig_SElect?');

% retrieve the value from the instrument 
idn = scanstr(interface);

% determines what code to send to the instrument
to_interface = sprintf('TRig_SElect %s,HT,%s',idn{1},propertyValue);

% sets the instrument
fprintf(interface,to_interface);
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="time" Value="TI"/>
                     <Enum Name="timeWithin" Value="TL"/>
                     <Enum Name="event" Value="EV"/>
                     <Enum Name="pulseSmaller" Value="PS"/>
                     <Enum Name="pulseLarger" Value="PL"/>
                     <Enum Name="intervalSmaller" Value="IS"/>
                     <Enum Name="intervalLarger" Value="IL"/>
                     <Enum Name="pulseWidthWindow" Value="P2"/>
                     <Enum Name="intervalWidthWindow" Value="I2"/>
                     <Enum Name="off" Value="OFF"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>OFF</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the oscilloscope's hold type.</Description>
            </Property>
            <Property>
               <Name>Level</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand> TRig_LeVel</ConfigureCommand>
                     <QueryCommand> TRig_LeVel?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="50.0" Min="-50.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets the oscilloscope main trigger level.  This command is equivalent to adjusting the front-panel TRIGGER LEVEL knob.
Max and Min values are dependent on scale of channel type.</Description>
            </Property>
            <Property>
               <Name>Mode</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>TRig_MoDe </ConfigureCommand>
                     <QueryCommand>TRig_MoDe?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="auto" Value="AUTO"/>
                     <Enum Name="run" Value="NORM"/>
                     <Enum Name="single" Value="SINGLE"/>
                     <Enum Name="stop" Value="STOP"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>auto</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets the trigger mode for the edge trigger type.</Description>
            </Property>
            <Property>
               <Name>Slope</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>TRig_SLope</ConfigureCommand>
                     <QueryCommand>TRig_SLope?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="falling" Value="NEG"/>
                     <Enum Name="rising" Value="POS"/>
                     <Enum Name="window" Value="WINDOW"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>rising</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Selects a rising or falling slope for the main edge trigger.  This is equivalent to setting Slope in the Trigger menu.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

 %get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% queries the instrument
fprintf(interface,'TRig_SElect?')

% retrieve the value from the instrument
idn = scanstr(interface);

% returns the just the source value 
value = idn{3};

% converts the instrument value to the property value
validValues = {'channel1','channel2','channel3','channel4','external','external10','PA','acline'};
scopeValues = {'C1', 'C2', 'C3', 'C4','EX','EX10','PA','LINE'};
idx = strmatch(value,scopeValues, 'exact');

% returns the value
propertyValue = validValues{idx};</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% queries the instrument
fprintf(interface,'TRig_SElect?')

% retrieve the value from the instrument
idn = scanstr(interface);

% determines what code to send to the instrument
to_interface = sprintf('TRig_SElect %s,SR,%s',idn{1},propertyValue);

% sets the instrument
fprintf(interface,to_interface)</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="channel1" Value="C1"/>
                     <Enum Name="channel2" Value="C2"/>
                     <Enum Name="external" Value="EX"/>
                     <Enum Name="external10" Value="EX10"/>
                     <Enum Name="channel3" Value="C3"/>
                     <Enum Name="channel4" Value="C4"/>
                     <Enum Name="acline" Value="LINE"/>
                     <Enum Name="PA" Value="PA"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>channel1</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets of the source for the main edge trigger.  This is equivalent to setting Source in the Trigger menu.</Description>
            </Property>
            <Property>
               <Name>TriggerType</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% queries the instrument
fprintf(interface,'TRig_SElect?')

% retrieve the value from the instrument
idn = scanstr(interface);

% gets just the trigger type
value = idn{1};

% converts the instrument value to the property value
validValues = {'edge','drop','glitch','single source','interval','stateQualified','standard ','edgeQualified'};
scopeValues = {'EDGE', 'DROP', 'GLIT', 'SNG', 'INTV', 'SQ', 'STD', 'TEQ'};
idx = strmatch(value,scopeValues, 'exact');

% returns the value
propertyValue = validValues{idx};</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% determines what code to send to the instrument
to_interface = sprintf('TRig_SElect %s',propertyValue);

% sets the instrument
fprintf(interface,to_interface)</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="edge" Value="EDGE"/>
                     <Enum Name="drop" Value="DROP"/>
                     <Enum Name="glitch" Value="GLIT"/>
                     <Enum Name="single source" Value="SNG"/>
                     <Enum Name="interval" Value="INTV"/>
                     <Enum Name="stateQualified" Value="SQ"/>
                     <Enum Name="standard " Value="STD"/>
                     <Enum Name="edgeQualified" Value="TEQ"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>edge</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets the type of oscilloscope trigger.  This is equivalent to setting Type in the Trigger menu.</Description>
            </Property>
            <Property>
               <Name>Window</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>TRig_WIndow</ConfigureCommand>
                     <QueryCommand>TRig_WIndow?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0.0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Queries the current window amplitude.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>trigger</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="*TRG" Output="false"/>
                  </Commands>
               </Code>
               <Description>TRIGGER Trigger the instrument.

INVOKE(OBJ,'TRIGGER') performs a Group Execute trigger.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>waveform</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Waveform1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ByteOrder</Name>
               <Location>waveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>Comm_ORDer</ConfigureCommand>
                     <QueryCommand>Comm_ORDer?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="bigEndian" Value="HI"/>
                     <Enum Name="littleEndian" Value="LO"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>littleEndian</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries which byte of binary waveform data is transmitted first during a waveform transfer.
ByteOrder is set to littleEndian for reading and writing waveforms, this property's value is not actualy used.</Description>
            </Property>
            <Property>
               <Name>EndingPoint</Name>
               <Location>waveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% queries the instrument 
fprintf(interface,'WaveForm_SetUp?')

% retrieve the value from the instrument
idn = scanstr(interface);
endpnt = idn{6}+idn{4};

% returns the value calculated
propertyValue = endpnt;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% queries the instrument 
fprintf(interface,'WaveForm_SetUp?')

% retrieve the value from the instrument
idn = scanstr(interface);
endpt = propertyValue - idn{6};

% sets the instrument 
if(endpt &lt; 0)
    warning('instrument:property:invalidValue','endpoint needs to be larger then the first point')
else
    fprintf(interface,'WaveForm_SetUp  NP,%i',endpt)
end
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="2500.0" Min="0.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the ending point for waveform data transfers.</Description>
            </Property>
            <Property>
               <Name>FirstPoint</Name>
               <Location>waveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% queries the instrument 
fprintf(interface,'WaveForm_SetUp?')

% retrieve the value from the instrument
idn = scanstr(interface);

% returns only the first point
propertyValue = idn{6};</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% sets the instrument 
fprintf(interface,'WaveForm_SetUp  FP,%i',propertyValue)




</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="2500.0" Min="0.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the starting point for waveform data transfers.</Description>
            </Property>
            <Property>
               <Name>MaxNumberPoint</Name>
               <Location>waveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% queries the instrument 
fprintf(interface,'WaveForm_SetUp?')

% retrieve the value from the instrument
idn = scanstr(interface);

% returns only the maxnumberpoint
% waveForm_SetUp? returns multiple values so the max number of points is 
% seperated from the rest of the numbers returned.
value = idn{4};

% the instrument returns 0 when it means infinite, so the the value 0 is
% changed to 'infinite' 
if(value == 0)
    propertyValue = 'infinite';
else
    propertyValue = value;
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% the insturment can not take infinite as an input so the value is 
% converted to 0, which the instrument reads as infinite.
if(propertyValue == 'infinite')
    propertyValue = 0;
end

% determines what code to send to the instrument
to_interface = sprintf('WaveForm_SetUp  NP,%i',propertyValue);

% sets the instrument 
fprintf(interface,to_interface)</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="infinite" Value="infinite"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>infinite</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The maximum number of acquisition data points.

</Description>
            </Property>
            <Property>
               <Name>Precision</Name>
               <Location>waveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% determines what code to send to the instrument
to_interface = sprintf('COMM_FORMAT?');

% queries the instrument 
fprintf(interface,to_interface)

% retrieve the value from the instrument
idn = scanstr(interface);
value = sprintf('%s,%s',idn{2},idn{3});

% converts the instrument value to the property value
validValues = {'ASCII','int16','int8'};
scopeValues = {'WORD,HEX', 'WORD,BIN','BYTE,BIN'};
idx = strmatch(value,scopeValues, 'exact');

% return the value
propertyValue = validValues{idx};

</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');

% determines what code to send to the instrument
to_interface = sprintf('COMM_FORMAT DEF9, %s ',propertyValue);

% sets the instrument 
fprintf(interface,to_interface)
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="ASCII" Value="WORD,HEX"/>
                     <Enum Name="int16" Value="WORD,BIN"/>
                     <Enum Name="int8" Value="BYTE,BIN"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>ASCII</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the precision for waveform data transfers.
Precision is set to int8 for reading and writing waveforms, this property's value is not actualy used.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>readwaveform</Name>
               <Location>waveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [y, x, yunit, xunit, header] = readwaveform(obj, source, varargin)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

% get the userData 
userData = get(get(obj, 'Parent'), 'UserData');

% sees if there is any input
if (nargin &lt; 2)
    error('instrument:method:invalidValue','Not enough inputs were entered.');
end

% initializes every thing to empty/false/unknown
scale = false;
y = [];
x = [];
yunit = 'unknown';
xunit = 'unknown';
  
% checks to see if the source input is a valid value
validValues = {'channel1','channel2','channel3','channel4','traceA','traceB','traceC','traceD','memory1','memory2','memory3','memory4'};
scopeValues = {'C1', 'C2', 'C3', 'C4', 'TA', 'TB', 'TC', 'TD', 'M1', 'M2', 'M3', 'M4',};
idx = strmatch(source,validValues, 'exact');

% gives error if the channel is not a valid value
if (isempty(idx))
    error('instrument:method:invalidValue','CHANNEL must be one of: channel1, channel2, channel3, channel4,traceA, traceB, traceC, traceD, memory1, memory2, memory3 , memory4');
end

% sets the source to its property value
trueSource = scopeValues{idx};

% checks to see if the scale entered is a valid value
if (nargin &gt; 2)
    try
        scale = logical(varargin{1});
    catch
        error('instrument:method:invalidValue','SCALE must be a logical.');
    end
end

% Get interface
interface = get(get(obj,'parent'),'interface');

% stores the old user setings
oldPrecision = get(obj, 'Precision');
oldByteOrder = get(obj, 'ByteOrder');

% changes the prevision and byteorder so that wave form can be read
set(obj, 'Precision','int8');
set(obj, 'ByteOrder', 'littleEndian');

% gets wave from the instrument
try 

    % Issue the curve transfer command.
    to_interface = sprintf('%s:WaveForm? ALL',trueSource);
    fprintf(interface,to_interface);
    
    % get wave from the instrument
    raw = fread(interface,21000,'int8');

    % seperates the data from the descriptor block 
    endOfHeader = 361;
    startOfData = endOfHeader + 1;   
    lengthD= num2str(length(raw));
    
   
    y = raw(startOfData:end);
    header = raw(1:endOfHeader);
    % saves the header for use latter
    userData.header = header;
catch
    % returns the settings back to what the user had them and displays
    % an error that tells why the waveform did not get read in
    set(obj, 'Precision', oldPrecision);
    set(obj, 'ByteOrder', oldByteOrder);
    error(lasterr)  
end

% makes sure that data got read in
if (isempty(raw))
    % returns the settings back to what the user had them and displays
    % an error that the waveform did not get read in
    set(obj, 'Precision', oldPrecision);
    set(obj, 'ByteOrder', oldByteOrder);
    error('instrument:method:insturmenterror','An error occurred while reading the waveform.');
end
% checks to see if the user inputed a scale
if (scale == false)
    % if there is no scale the settings are set back to what the user had
    if (nargout &lt; 2)
        set(obj, 'Precision', oldPrecision);
        set(obj, 'ByteOrder', oldByteOrder);
        return;
    end
    endl = length(y) - 1;
    x = [0 : endl];

    % the x and y units are extraced from the waveform
    if (nargout &gt; 2)
        % gets the x unit from the header
        xunitFromHeader = raw(260);
        % converts the x unit from its ascii representation to its actual 
        % value
        xunit=char(xunitFromHeader);
        xunit(xunit == '"') = [];
        % gets the y unit from the header
        yunitFromHeader = raw(212);
        % converts the y unit from its ascii representation to its actual 
        % value        
        yunit = char(yunitFromHeader);
        yunit(yunit == '"') = [];
    end

% if the user did input a scale then the data is adjusted
else

    % gets the vertical gain  and offset from the header 
    % each number from the header represents one digit of the actual value
    vgainFromHeader = sprintf('%i%i%i%i',raw(172),raw(173),raw(174),raw(175));
    voffsetFromHeader = sprintf('%i%i%i%i',raw(176),raw(177),raw(178),raw(179));
    %converts the vertical gain and offset from strings to numbers
    vertical_gain = str2num(vgainFromHeader);
    vertical_offset = str2num(voffsetFromHeader);
   
    % calculates the y scale 
    y = vertical_gain *y - vertical_offset;
    
    % the settings are set back to what the user had 
    if (nargout &gt; 3)
    % calculates the x scale
    number = raw(341);
    fprintf(interface,'C1:Time_DIV? ')
    time_div = fscanf(interface);
    time_div = str2num(time_div);
    endl = length(y) - 1;
    x_sub = [0:endl];
    x = x_sub * time_div;
    end
    
    %gets the x and y units
    if (nargout &gt; 2)
       % gets the x unit from the header
        xunitFromHeader = raw(260)
        % converts the x unit from its ascii representation to its actual 
        % value
        xunit=char(xunitFromHeader);
        xunit(xunit == '"') = [];
        % gets the y unit from the header
        yunitFromHeader = raw(212)
        % converts the y unit from its ascii representation to its actual 
        % value        
        yunit = char(yunitFromHeader);
        yunit(yunit == '"') = [];
    end
end

y = y';

% puts the setting back to how they were origanly
set(obj, 'Precision', oldPrecision);
set(obj, 'ByteOrder', oldByteOrder);
set(get(obj, 'Parent'), 'UserData', userData);
    </MCode>
               </Code>
               <Description>READWAVEFORM Transfer waveforms from the oscilloscope to MATLAB.

[Y, T] = INVOKE(obj, 'readwaveform', CHANNEL) returns a waveform from the instrument,
using channel string, CHANNEL.  Valid channel values are channel&amp;lt;x&amp;gt;, reference&amp;lt;y&amp;gt;, and
math, where &amp;lt;x&amp;gt; is a number between 1 and the number of channels on the instrument and &amp;lt;y&amp;gt; is a letter between A and the number of reference channels on the instrument.

[Y, T] = INVOKE(obj, 'readwaveform', CHANNEL, SCALE) returns the data scaled to real units if SCALE is true, or as raw data if SCALE is false.

To read the waveform data points the interface object associated with the device
object must have a sufficiently large InputBufferSize property value.  If you receive
an error about the buffer size being to small, or have difficulty reading a waveform,
verify that it is large enough.  The size must be greater than two times the number
of points in the waveform, plus approximately 50 bytes for header information.

Example:
	[y, t] = invoke(obj, 'readwaveform', 'channel1');
	[y, t] = invoke(obj, 'readwaveform', 'referenceA', false);

Example changing the buffer size:
	% Note the device object must be closed.
	interfaceObj = get(deviceObj, 'interface');
	% Allow for a 10,000 point waveform with a little extra room.
	set(interfaceObj, 'InputBufferSize', 21000);
	connect(deviceObj);
	[y, t] = invoke(obj, 'readwaveform', 'channel1');

Channel must be one of : channel1, channel2, channel3, channel4, traceA, traceB, traceC, traceD, memory1, memory2, memory3, memory4.</Description>
            </Method>
            <Method>
               <Name>storewaveform</Name>
               <Location>waveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function storewaveform(obj,channel,location)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');
scopeValuesC = {'C1', 'C2', 'C3', 'C4', 'TA', 'TB', 'TC', 'TD'};
scopeValuesM = {'M1', 'M2', 'M3', 'M4'};

% checks to see if location is a valid value
idxM = strmatch(lower(location), {'memory1','memory2','memory3','memory4'}, 'exact');
if (isempty(idxM))
    error('instrument:method:invalidValue','LOCATION must be one of: memory1, memory2, memory3, memory4.');

end
trueLocation = scopeValuesM{idxM};

% checks to see if channel is a valid value
idxC = strmatch(lower(channel),{'channel1','channel2','channel3','channel4','tracea','traceb','tracec','traced'} , 'exact');
if (isempty(idxC))
    error('instrument:method:invalidValue','CHANNEL must be one of: channel1, channel2, channel3, channel4, traceA, traceB, traceC, traceD.');
end
trueChannel = scopeValuesC{idxC};

% determines what code to send to the instrument
to_interface = sprintf('STOre %s,%s',trueChannel,trueLocation);

% sets the instrument
fprintf(interface,to_interface)</MCode>
               </Code>
               <Description>STOREWAVEFORM Save a waveform to oscilloscope memory.

INVOKE(OBJ, 'storewaveform', CHANNEL, LOCATION) saves the waveform from CHANNEL to memory location, LOCATION.

Example:
	invoke(obj, 'storewaveform', 'channel1','memory1');

Channel must be one of : channel1, channel2, channel3, channel4, traceA, traceB, traceC, traceD. 
Location must be one of :memory1, memory2, memory3, memory4	.</Description>
            </Method>
            <Method>
               <Name>writewaveform</Name>
               <Location>waveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function writewaveform(obj,memory,data,header)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

% get the userData 
userData = get(get(obj, 'Parent'), 'UserData');

% get the device
device = get(obj,'Parent');

% get the interface
interface = get(device,'Interface');


% Validate destination
validValues = {'memory1','memory2','memory3','memory4'};
scopeValues = {'M1', 'M2', 'M3', 'M4'};
idx = strmatch(lower(memory), {'memory1','memory2','memory3','memory4'}, 'exact');
true_value = scopeValues{idx};
if (isempty(idx))
    error('Invalid value. MEMORY must be one of: memory1, memory2, memory3, memory4');

end
% Check that the array contains only numeric data
if ~isnumeric(data) || length(size(data)) &gt; 2 || min(size(data)) &gt; 1
    error('DATA must be a 1 x n numeric array');
end

% makes sure that data is an apropriate length
if (numel(data) &gt; 20000)
     error('DATA must be less than 20000 points');
end

% saves old settings
oldPrecision = get(obj, 'Precision');
set(obj, 'Precision','int8')
set(obj, 'ByteOrder', 'littleEndian');
% calculates the length of the data block
headerNumber = length(data) + 345;

% puts the length of the data in a format so that it can be compared with
% the header
head = sprintf('%i',headerNumber);
l = length(head);
while(l &lt; 9)
    head = cat(2,'0',head);
    l = l + 1;
end
d(1:11) = cat(2,'#9',head);
d = double(d');

% gets the length of the data from the header
headerCheck = header(5:15);

% figures out if the header matches the data by comparing what the header 
% thinks the length of the data is and the actual length of the data
if(isequal(headerCheck,d))
    % puts the header with the data
    header = double(header');
    data = [header data];
    fullData = data(5:end);
    % combinds the scpi comand and the data
    command = sprintf('%s:WAVEFORM ALL, ',true_value);
    commandAndData = [double(command) fullData];
    % writes the binary data A to the instrument connected to obj.
    fwrite(interface, commandAndData, 'int8');
else
    % returns an error if the header and the data dont match
    error('Header did not match up with points. Make sure header and points are from the same call to readwaveform.')
end</MCode>
               </Code>
               <Description>writeWAVEFORM Transfer waveforms to the oscilloscope from the computer.

INVOKE(OBJ, 'writewaveform', POINTS) downloads the numeric data POINTS to the oscilloscope. 

Warning: This operation can be very slow 
</Description>
            </Method>
         </MethodInfo>
      </Group>
   </GroupInfo>
</MATLABInstrumentDriver>
